
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea000b52 	b	ad50 <main>

Disassembly of section .text:

0000aa60 <EnableJTAG>:
    aa60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aa64:	e59f0064 	ldr	r0, [pc, #100]	; aad0 <dowaitloop+0xc>
    aa68:	e0211001 	eor	r1, r1, r1
    aa6c:	e5801000 	str	r1, [r0]
    aa70:	eb000012 	bl	aac0 <dowait>
    aa74:	e59f0058 	ldr	r0, [pc, #88]	; aad4 <dowaitloop+0x10>
    aa78:	e59f1058 	ldr	r1, [pc, #88]	; aad8 <dowaitloop+0x14>
    aa7c:	e5801000 	str	r1, [r0]
    aa80:	eb00000e 	bl	aac0 <dowait>
    aa84:	e0211001 	eor	r1, r1, r1
    aa88:	e5801000 	str	r1, [r0]
    aa8c:	e59f0048 	ldr	r0, [pc, #72]	; aadc <dowaitloop+0x18>
    aa90:	e5901000 	ldr	r1, [r0]
    aa94:	e3c11a07 	bic	r1, r1, #28672	; 0x7000
    aa98:	e3811a02 	orr	r1, r1, #8192	; 0x2000
    aa9c:	e5801000 	str	r1, [r0]
    aaa0:	e59f0038 	ldr	r0, [pc, #56]	; aae0 <dowaitloop+0x1c>
    aaa4:	e5901000 	ldr	r1, [r0]
    aaa8:	e59f2034 	ldr	r2, [pc, #52]	; aae4 <dowaitloop+0x20>
    aaac:	e1c11002 	bic	r1, r1, r2
    aab0:	e59f2030 	ldr	r2, [pc, #48]	; aae8 <dowaitloop+0x24>
    aab4:	e1811002 	orr	r1, r1, r2
    aab8:	e5801000 	str	r1, [r0]
    aabc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000aac0 <dowait>:
    aac0:	e3a02f4b 	mov	r2, #300	; 0x12c

0000aac4 <dowaitloop>:
    aac4:	e2522001 	subs	r2, r2, #1
    aac8:	1afffffd 	bne	aac4 <dowaitloop>
    aacc:	e12fff1e 	bx	lr
    aad0:	3f200094 	.word	0x3f200094
    aad4:	3f200098 	.word	0x3f200098
    aad8:	0bc00010 	.word	0x0bc00010
    aadc:	3f200000 	.word	0x3f200000
    aae0:	3f200008 	.word	0x3f200008
    aae4:	00e3ffc0 	.word	0x00e3ffc0
    aae8:	0061b6c0 	.word	0x0061b6c0

0000aaec <InitFrameBuffer>:
    aaec:	e59f2068 	ldr	r2, [pc, #104]	; ab5c <pointerWaitLoop$+0x1c>
    aaf0:	e59f3068 	ldr	r3, [pc, #104]	; ab60 <pointerWaitLoop$+0x20>

0000aaf4 <mBoxFullLoop$>:
    aaf4:	e5920018 	ldr	r0, [r2, #24]
    aaf8:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    aafc:	1afffffc 	bne	aaf4 <mBoxFullLoop$>
    ab00:	e2830101 	add	r0, r3, #1073741824	; 0x40000000
    ab04:	e3800008 	orr	r0, r0, #8
    ab08:	e5820020 	str	r0, [r2, #32]

0000ab0c <mBoxEmptyLoop$>:
    ab0c:	e5920018 	ldr	r0, [r2, #24]
    ab10:	e3100101 	tst	r0, #1073741824	; 0x40000000
    ab14:	1afffffc 	bne	ab0c <mBoxEmptyLoop$>
    ab18:	e5920000 	ldr	r0, [r2]
    ab1c:	e200100f 	and	r1, r0, #15
    ab20:	e3310008 	teq	r1, #8
    ab24:	1afffff8 	bne	ab0c <mBoxEmptyLoop$>
    ab28:	e59f0030 	ldr	r0, [pc, #48]	; ab60 <pointerWaitLoop$+0x20>
    ab2c:	e5901004 	ldr	r1, [r0, #4]
    ab30:	e3310102 	teq	r1, #-2147483648	; 0x80000000
    ab34:	0a000001 	beq	ab40 <pointerWaitLoop$>
    ab38:	13a00000 	movne	r0, #0
    ab3c:	112fff1e 	bxne	lr

0000ab40 <pointerWaitLoop$>:
    ab40:	e59f001c 	ldr	r0, [pc, #28]	; ab64 <pointerWaitLoop$+0x24>
    ab44:	e5900000 	ldr	r0, [r0]
    ab48:	e3300000 	teq	r0, #0
    ab4c:	0afffffb 	beq	ab40 <pointerWaitLoop$>
    ab50:	e59f3010 	ldr	r3, [pc, #16]	; ab68 <pointerWaitLoop$+0x28>
    ab54:	e5830000 	str	r0, [r3]
    ab58:	e12fff1e 	bx	lr
    ab5c:	3f00b880 	.word	0x3f00b880
    ab60:	00009080 	.word	0x00009080
    ab64:	000090cc 	.word	0x000090cc
    ab68:	000090e0 	.word	0x000090e0

0000ab6c <sampleSNES>:
    ab6c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}

0000ab70 <initSNES>:
    ab70:	e3a00001 	mov	r0, #1
    ab74:	eb000048 	bl	ac9c <setCLOCKFunction>
    ab78:	e3a00001 	mov	r0, #1
    ab7c:	eb00003d 	bl	ac78 <setLATCHFunction>
    ab80:	e3a00000 	mov	r0, #0
    ab84:	eb000034 	bl	ac5c <setDATAFunction>

0000ab88 <startSamplingSNESButtons>:
    ab88:	e3a0000b 	mov	r0, #11
    ab8c:	e3a01001 	mov	r1, #1
    ab90:	eb000056 	bl	acf0 <writeGPIO>
    ab94:	e3a00009 	mov	r0, #9
    ab98:	e3a01001 	mov	r1, #1
    ab9c:	eb000053 	bl	acf0 <writeGPIO>
    aba0:	e3a0000c 	mov	r0, #12
    aba4:	eb000019 	bl	ac10 <startTimer>
    aba8:	e3a00009 	mov	r0, #9
    abac:	e3a01000 	mov	r1, #0
    abb0:	eb00004e 	bl	acf0 <writeGPIO>
    abb4:	e3a08000 	mov	r8, #0
    abb8:	e3a07000 	mov	r7, #0

0000abbc <pulseLoop>:
    abbc:	e3a00006 	mov	r0, #6
    abc0:	eb000012 	bl	ac10 <startTimer>
    abc4:	e3a0000b 	mov	r0, #11
    abc8:	e3a01000 	mov	r1, #0
    abcc:	eb000047 	bl	acf0 <writeGPIO>
    abd0:	e3a00006 	mov	r0, #6
    abd4:	eb00000d 	bl	ac10 <startTimer>
    abd8:	e3a0000a 	mov	r0, #10
    abdc:	e3a01000 	mov	r1, #0
    abe0:	eb000036 	bl	acc0 <readGPIO>
    abe4:	e1a00710 	lsl	r0, r0, r7
    abe8:	e1888000 	orr	r8, r8, r0
    abec:	e3a0000b 	mov	r0, #11
    abf0:	e3a01001 	mov	r1, #1
    abf4:	eb00003d 	bl	acf0 <writeGPIO>
    abf8:	e2877001 	add	r7, r7, #1
    abfc:	e3570010 	cmp	r7, #16
    ac00:	baffffed 	blt	abbc <pulseLoop>

0000ac04 <pulseLoopEnd>:
    ac04:	e1a00008 	mov	r0, r8

0000ac08 <mainEnd>:
    ac08:	eaffffff 	b	ac0c <killProgram>

0000ac0c <killProgram>:
    ac0c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000ac10 <startTimer>:
    ac10:	e1a03000 	mov	r3, r0
    ac14:	e59f0128 	ldr	r0, [pc, #296]	; ad44 <newButtonPress+0x14>
    ac18:	e5901000 	ldr	r1, [r0]
    ac1c:	e0811003 	add	r1, r1, r3

0000ac20 <waitLoop>:
    ac20:	e5902000 	ldr	r2, [r0]
    ac24:	e1510002 	cmp	r1, r2
    ac28:	8afffffc 	bhi	ac20 <waitLoop>
    ac2c:	e1a0f00e 	mov	pc, lr

0000ac30 <setGPIOFunction>:
    ac30:	e59f3110 	ldr	r3, [pc, #272]	; ad48 <newButtonPress+0x18>
    ac34:	e3a04004 	mov	r4, #4
    ac38:	e0000094 	mul	r0, r4, r0
    ac3c:	e7934000 	ldr	r4, [r3, r0]
    ac40:	e3a05007 	mov	r5, #7
    ac44:	e1a05215 	lsl	r5, r5, r2
    ac48:	e1c33005 	bic	r3, r3, r5
    ac4c:	e1a01211 	lsl	r1, r1, r2
    ac50:	e1844001 	orr	r4, r4, r1
    ac54:	e7834000 	str	r4, [r3, r0]
    ac58:	e1a0f00e 	mov	pc, lr

0000ac5c <setDATAFunction>:
    ac5c:	e59f10e4 	ldr	r1, [pc, #228]	; ad48 <newButtonPress+0x18>
    ac60:	e5912004 	ldr	r2, [r1, #4]
    ac64:	e3a03007 	mov	r3, #7
    ac68:	e1c22003 	bic	r2, r2, r3
    ac6c:	e1822000 	orr	r2, r2, r0
    ac70:	e5812004 	str	r2, [r1, #4]
    ac74:	e1a0f00e 	mov	pc, lr

0000ac78 <setLATCHFunction>:
    ac78:	e59f10c8 	ldr	r1, [pc, #200]	; ad48 <newButtonPress+0x18>
    ac7c:	e5912000 	ldr	r2, [r1]
    ac80:	e3a03007 	mov	r3, #7
    ac84:	e1a03d83 	lsl	r3, r3, #27
    ac88:	e1c22003 	bic	r2, r2, r3
    ac8c:	e1a00d80 	lsl	r0, r0, #27
    ac90:	e1822000 	orr	r2, r2, r0
    ac94:	e5812000 	str	r2, [r1]
    ac98:	e1a0f00e 	mov	pc, lr

0000ac9c <setCLOCKFunction>:
    ac9c:	e59f10a4 	ldr	r1, [pc, #164]	; ad48 <newButtonPress+0x18>
    aca0:	e5912004 	ldr	r2, [r1, #4]
    aca4:	e3a03007 	mov	r3, #7
    aca8:	e1a03183 	lsl	r3, r3, #3
    acac:	e1c22003 	bic	r2, r2, r3
    acb0:	e1a00180 	lsl	r0, r0, #3
    acb4:	e1822000 	orr	r2, r2, r0
    acb8:	e5812004 	str	r2, [r1, #4]
    acbc:	e1a0f00e 	mov	pc, lr

0000acc0 <readGPIO>:
    acc0:	e59f1080 	ldr	r1, [pc, #128]	; ad48 <newButtonPress+0x18>
    acc4:	e3500020 	cmp	r0, #32
    acc8:	b5912034 	ldrlt	r2, [r1, #52]	; 0x34
    accc:	a5912038 	ldrge	r2, [r1, #56]	; 0x38
    acd0:	a2400020 	subge	r0, r0, #32
    acd4:	e3a03001 	mov	r3, #1
    acd8:	e1a03013 	lsl	r3, r3, r0
    acdc:	e0022003 	and	r2, r2, r3
    ace0:	e3320000 	teq	r2, #0
    ace4:	03a00000 	moveq	r0, #0
    ace8:	13a00001 	movne	r0, #1
    acec:	e1a0f00e 	mov	pc, lr

0000acf0 <writeGPIO>:
    acf0:	e3310000 	teq	r1, #0
    acf4:	e59f104c 	ldr	r1, [pc, #76]	; ad48 <newButtonPress+0x18>
    acf8:	1281201c 	addne	r2, r1, #28
    acfc:	02812028 	addeq	r2, r1, #40	; 0x28
    ad00:	e3500020 	cmp	r0, #32
    ad04:	a2400020 	subge	r0, r0, #32
    ad08:	e3a01001 	mov	r1, #1
    ad0c:	e1a01011 	lsl	r1, r1, r0
    ad10:	b5821000 	strlt	r1, [r2]
    ad14:	a5821004 	strge	r1, [r2, #4]
    ad18:	e1a0f00e 	mov	pc, lr

0000ad1c <areAnySNESButtonsPressed>:
    ad1c:	e59f1028 	ldr	r1, [pc, #40]	; ad4c <newButtonPress+0x1c>
    ad20:	e0411000 	sub	r1, r1, r0
    ad24:	e1500009 	cmp	r0, r9
    ad28:	1a000000 	bne	ad30 <newButtonPress>
    ad2c:	e3a01000 	mov	r1, #0

0000ad30 <newButtonPress>:
    ad30:	e3310000 	teq	r1, #0
    ad34:	03a01000 	moveq	r1, #0
    ad38:	13a01001 	movne	r1, #1
    ad3c:	e1a09000 	mov	r9, r0
    ad40:	e1a0f00e 	mov	pc, lr
    ad44:	3f003004 	.word	0x3f003004
    ad48:	3f200000 	.word	0x3f200000
    ad4c:	0000ffff 	.word	0x0000ffff

0000ad50 <main>:
    ad50:	e3a0d902 	mov	sp, #32768	; 0x8000
    ad54:	ebffff41 	bl	aa60 <EnableJTAG>
    ad58:	ebffff63 	bl	aaec <InitFrameBuffer>
    ad5c:	ebffff82 	bl	ab6c <sampleSNES>
    ad60:	e59f0340 	ldr	r0, [pc, #832]	; b0a8 <waitLoop+0x10>
    ad64:	e280000c 	add	r0, r0, #12
    ad68:	e59f133c 	ldr	r1, [pc, #828]	; b0ac <waitLoop+0x14>

0000ad6c <looop>:
    ad6c:	e3a02000 	mov	r2, #0
    ad70:	e5802000 	str	r2, [r0]
    ad74:	e2800004 	add	r0, r0, #4
    ad78:	e0412000 	sub	r2, r1, r0
    ad7c:	e3520000 	cmp	r2, #0
    ad80:	cafffff9 	bgt	ad6c <looop>
    ad84:	eb000069 	bl	af30 <tetrisCreateNewBlock>

0000ad88 <mainLoop>:
    ad88:	e3a00001 	mov	r0, #1
    ad8c:	eb000072 	bl	af5c <tetrisRotateBlock>
    ad90:	e3a00000 	mov	r0, #0
    ad94:	e3a01001 	mov	r1, #1
    ad98:	eb00007e 	bl	af98 <tetrisTranslateBlock>
    ad9c:	eb00003b 	bl	ae90 <tetrisUpdateGridWithBlock>
    ada0:	eb000016 	bl	ae00 <tetrisDrawGrid>
    ada4:	e3a000ff 	mov	r0, #255	; 0xff
    ada8:	eb0000b6 	bl	b088 <startTimer>
    adac:	eafffff5 	b	ad88 <mainLoop>

0000adb0 <mainEnd>:
    adb0:	eafffffe 	b	adb0 <mainEnd>

0000adb4 <tetrisSetGridBlockColor>:
    adb4:	e8bd0007 	pop	{r0, r1, r2}
    adb8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    adbc:	e59f32e4 	ldr	r3, [pc, #740]	; b0a8 <waitLoop+0x10>
    adc0:	e5934000 	ldr	r4, [r3]
    adc4:	e5935004 	ldr	r5, [r3, #4]
    adc8:	e5936008 	ldr	r6, [r3, #8]
    adcc:	e283700c 	add	r7, r3, #12
    add0:	e0080195 	mul	r8, r5, r1
    add4:	e0888000 	add	r8, r8, r0
    add8:	e1a08108 	lsl	r8, r8, #2
    addc:	e7872008 	str	r2, [r7, r8]
    ade0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ade4:	e1a0f00e 	mov	pc, lr

0000ade8 <tetrisClearGridBlock>:
    ade8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    adec:	e3a02000 	mov	r2, #0
    adf0:	e92d0007 	push	{r0, r1, r2}
    adf4:	ebffffee 	bl	adb4 <tetrisSetGridBlockColor>
    adf8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    adfc:	e1a0f00e 	mov	pc, lr

0000ae00 <tetrisDrawGrid>:
    ae00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ae04:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ae08:	e59f7298 	ldr	r7, [pc, #664]	; b0a8 <waitLoop+0x10>
    ae0c:	e5978000 	ldr	r8, [r7]
    ae10:	e5979004 	ldr	r9, [r7, #4]
    ae14:	e597a008 	ldr	sl, [r7, #8]
    ae18:	e287b00c 	add	fp, r7, #12
    ae1c:	e3a04000 	mov	r4, #0
    ae20:	e3a05000 	mov	r5, #0
    ae24:	e3a06000 	mov	r6, #0

0000ae28 <for_curRow_lessThan_rows_loop>:
    ae28:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000ae2c <for_curCol_lessThan_cols_loop>:
    ae2c:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ae30:	e00c0599 	mul	ip, r9, r5
    ae34:	e08cc004 	add	ip, ip, r4
    ae38:	e1a0c10c 	lsl	ip, ip, #2
    ae3c:	e79b600c 	ldr	r6, [fp, ip]
    ae40:	e0000a94 	mul	r0, r4, sl
    ae44:	e0010a95 	mul	r1, r5, sl
    ae48:	e24dd014 	sub	sp, sp, #20
    ae4c:	e58d0000 	str	r0, [sp]
    ae50:	e58d1004 	str	r1, [sp, #4]
    ae54:	e58da008 	str	sl, [sp, #8]
    ae58:	e58da00c 	str	sl, [sp, #12]
    ae5c:	e58d6010 	str	r6, [sp, #16]
    ae60:	eb000076 	bl	b040 <drawRect>
    ae64:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ae68:	e2855001 	add	r5, r5, #1
    ae6c:	e1550009 	cmp	r5, r9
    ae70:	baffffed 	blt	ae2c <for_curCol_lessThan_cols_loop>
    ae74:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    ae78:	e2844001 	add	r4, r4, #1
    ae7c:	e1540008 	cmp	r4, r8
    ae80:	baffffe8 	blt	ae28 <for_curRow_lessThan_rows_loop>
    ae84:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ae88:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ae8c:	e1a0f00e 	mov	pc, lr

0000ae90 <tetrisUpdateGridWithBlock>:
    ae90:	e1a0000d 	mov	r0, sp
    ae94:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ae98:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    ae9c:	e89007f0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl}
    aea0:	e1a04006 	mov	r4, r6
    aea4:	e1a05007 	mov	r5, r7
    aea8:	e5804000 	str	r4, [r0]
    aeac:	e5805004 	str	r5, [r0, #4]
    aeb0:	e92d1800 	push	{fp, ip}
    aeb4:	e3a0b000 	mov	fp, #0
    aeb8:	e3a0c000 	mov	ip, #0

0000aebc <for_i_lessThan_4_loop_>:
    aebc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000aec0 <for_j_lessThan_4_loop_>:
    aec0:	e92d01c0 	push	{r6, r7, r8}
    aec4:	e19920ba 	ldrh	r2, [r9, sl]
    aec8:	e086600b 	add	r6, r6, fp
    aecc:	e087700c 	add	r7, r7, ip
    aed0:	e3a01004 	mov	r1, #4
    aed4:	e0010c91 	mul	r1, r1, ip
    aed8:	e081100b 	add	r1, r1, fp
    aedc:	e1a02112 	lsl	r2, r2, r1
    aee0:	e3a01902 	mov	r1, #32768	; 0x8000
    aee4:	e0011002 	and	r1, r1, r2
    aee8:	e3310000 	teq	r1, #0
    aeec:	01a00006 	moveq	r0, r6
    aef0:	01a01007 	moveq	r1, r7
    aef4:	0bffffbb 	bleq	ade8 <tetrisClearGridBlock>
    aef8:	192d01c0 	pushne	{r6, r7, r8}
    aefc:	1bffffac 	blne	adb4 <tetrisSetGridBlockColor>
    af00:	e8bd01c0 	pop	{r6, r7, r8}
    af04:	e28cc001 	add	ip, ip, #1
    af08:	e35c0004 	cmp	ip, #4
    af0c:	baffffeb 	blt	aec0 <for_j_lessThan_4_loop_>
    af10:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    af14:	e28bb001 	add	fp, fp, #1
    af18:	e35b0004 	cmp	fp, #4
    af1c:	baffffe6 	blt	aebc <for_i_lessThan_4_loop_>
    af20:	e8bd1800 	pop	{fp, ip}
    af24:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    af28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    af2c:	e1a0f00e 	mov	pc, lr

0000af30 <tetrisCreateNewBlock>:
    af30:	e59f0178 	ldr	r0, [pc, #376]	; b0b0 <waitLoop+0x18>
    af34:	e89007f0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl}

0000af38 <initializeTetrisBlock>:
    af38:	e3a04000 	mov	r4, #0
    af3c:	e3a05000 	mov	r5, #0
    af40:	e3a06000 	mov	r6, #0
    af44:	e3a07000 	mov	r7, #0
    af48:	e59f8164 	ldr	r8, [pc, #356]	; b0b4 <waitLoop+0x1c>
    af4c:	e59f9164 	ldr	r9, [pc, #356]	; b0b8 <waitLoop+0x20>
    af50:	e3a0a000 	mov	sl, #0

0000af54 <initializeTetrisBlockEnd>:
    af54:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    af58:	e1a0f00e 	mov	pc, lr

0000af5c <tetrisRotateBlock>:
    af5c:	e89d07f0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl}
    af60:	e3300000 	teq	r0, #0
    af64:	0a000000 	beq	af6c <rotateLeft>
    af68:	1a000004 	bne	af80 <rotateRight>

0000af6c <rotateLeft>:
    af6c:	e28aa002 	add	sl, sl, #2
    af70:	e35a0006 	cmp	sl, #6
    af74:	c3a0a000 	movgt	sl, #0
    af78:	e58da018 	str	sl, [sp, #24]
    af7c:	ea000004 	b	af94 <tetrisRotateBlockEnd>

0000af80 <rotateRight>:
    af80:	e24aa002 	sub	sl, sl, #2
    af84:	e35a0000 	cmp	sl, #0
    af88:	b3a0a006 	movlt	sl, #6
    af8c:	e58da018 	str	sl, [sp, #24]
    af90:	eaffffff 	b	af94 <tetrisRotateBlockEnd>

0000af94 <tetrisRotateBlockEnd>:
    af94:	e1a0f00e 	mov	pc, lr

0000af98 <tetrisTranslateBlock>:
    af98:	e1a0b00e 	mov	fp, lr
    af9c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    afa0:	e1a04006 	mov	r4, r6
    afa4:	e1a05007 	mov	r5, r7
    afa8:	e0866000 	add	r6, r6, r0
    afac:	e0877001 	add	r7, r7, r1
    afb0:	e58d4000 	str	r4, [sp]
    afb4:	e58d5004 	str	r5, [sp, #4]
    afb8:	e58d6008 	str	r6, [sp, #8]
    afbc:	e58d700c 	str	r7, [sp, #12]
    afc0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    afc4:	e1a06004 	mov	r6, r4
    afc8:	e1a07005 	mov	r7, r5
    afcc:	e3a08000 	mov	r8, #0
    afd0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    afd4:	ebffffad 	bl	ae90 <tetrisUpdateGridWithBlock>
    afd8:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    afdc:	ebffffab 	bl	ae90 <tetrisUpdateGridWithBlock>
    afe0:	e1a0f00b 	mov	pc, fp

0000afe4 <clearScreen>:
    afe4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    afe8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    afec:	e3a04000 	mov	r4, #0
    aff0:	e3a05000 	mov	r5, #0
    aff4:	e59f00c0 	ldr	r0, [pc, #192]	; b0bc <waitLoop+0x24>
    aff8:	e5906014 	ldr	r6, [r0, #20]
    affc:	e5907018 	ldr	r7, [r0, #24]
    b000:	e3a08000 	mov	r8, #0
    b004:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b008:	eb00000c 	bl	b040 <drawRect>
    b00c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b010:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b014:	e1a0f00e 	mov	pc, lr

0000b018 <drawPixel>:
    b018:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b01c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    b020:	e0804501 	add	r4, r0, r1, lsl #10
    b024:	e1a04084 	lsl	r4, r4, #1
    b028:	e59f0090 	ldr	r0, [pc, #144]	; b0c0 <waitLoop+0x28>
    b02c:	e5900000 	ldr	r0, [r0]
    b030:	e18020b4 	strh	r2, [r0, r4]
    b034:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    b038:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b03c:	e1a0f00e 	mov	pc, lr

0000b040 <drawRect>:
    b040:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b044:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b048:	e0866004 	add	r6, r6, r4
    b04c:	e0877005 	add	r7, r7, r5

0000b050 <drawRectForLoopX>:
    b050:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000b054 <drawRectForLoopY>:
    b054:	e1a00004 	mov	r0, r4
    b058:	e1a01005 	mov	r1, r5
    b05c:	e1a02008 	mov	r2, r8
    b060:	ebffffec 	bl	b018 <drawPixel>
    b064:	e2855001 	add	r5, r5, #1
    b068:	e1550007 	cmp	r5, r7
    b06c:	bafffff8 	blt	b054 <drawRectForLoopY>
    b070:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    b074:	e2844001 	add	r4, r4, #1
    b078:	e1540006 	cmp	r4, r6
    b07c:	bafffff3 	blt	b050 <drawRectForLoopX>
    b080:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b084:	e1a0f00e 	mov	pc, lr

0000b088 <startTimer>:
    b088:	e1a03000 	mov	r3, r0
    b08c:	e59f0030 	ldr	r0, [pc, #48]	; b0c4 <waitLoop+0x2c>
    b090:	e5901000 	ldr	r1, [r0]
    b094:	e0811003 	add	r1, r1, r3

0000b098 <waitLoop>:
    b098:	e5902000 	ldr	r2, [r0]
    b09c:	e1510002 	cmp	r1, r2
    b0a0:	8afffffc 	bhi	b098 <waitLoop>
    b0a4:	e1a0f00e 	mov	pc, lr
    b0a8:	000090f0 	.word	0x000090f0
    b0ac:	0000a9fc 	.word	0x0000a9fc
    b0b0:	0000a9fc 	.word	0x0000a9fc
    b0b4:	001133ff 	.word	0x001133ff
    b0b8:	0000aa30 	.word	0x0000aa30
    b0bc:	00009080 	.word	0x00009080
    b0c0:	000090e0 	.word	0x000090e0
    b0c4:	3f003004 	.word	0x3f003004
