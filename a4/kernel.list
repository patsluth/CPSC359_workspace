
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea000d6e 	b	b5c0 <main>

Disassembly of section .text:

0000b2d0 <EnableJTAG>:
    b2d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b2d4:	e59f0064 	ldr	r0, [pc, #100]	; b340 <dowaitloop+0xc>
    b2d8:	e0211001 	eor	r1, r1, r1
    b2dc:	e5801000 	str	r1, [r0]
    b2e0:	eb000012 	bl	b330 <dowait>
    b2e4:	e59f0058 	ldr	r0, [pc, #88]	; b344 <dowaitloop+0x10>
    b2e8:	e59f1058 	ldr	r1, [pc, #88]	; b348 <dowaitloop+0x14>
    b2ec:	e5801000 	str	r1, [r0]
    b2f0:	eb00000e 	bl	b330 <dowait>
    b2f4:	e0211001 	eor	r1, r1, r1
    b2f8:	e5801000 	str	r1, [r0]
    b2fc:	e59f0048 	ldr	r0, [pc, #72]	; b34c <dowaitloop+0x18>
    b300:	e5901000 	ldr	r1, [r0]
    b304:	e3c11a07 	bic	r1, r1, #28672	; 0x7000
    b308:	e3811a02 	orr	r1, r1, #8192	; 0x2000
    b30c:	e5801000 	str	r1, [r0]
    b310:	e59f0038 	ldr	r0, [pc, #56]	; b350 <dowaitloop+0x1c>
    b314:	e5901000 	ldr	r1, [r0]
    b318:	e59f2034 	ldr	r2, [pc, #52]	; b354 <dowaitloop+0x20>
    b31c:	e1c11002 	bic	r1, r1, r2
    b320:	e59f2030 	ldr	r2, [pc, #48]	; b358 <dowaitloop+0x24>
    b324:	e1811002 	orr	r1, r1, r2
    b328:	e5801000 	str	r1, [r0]
    b32c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b330 <dowait>:
    b330:	e3a02f4b 	mov	r2, #300	; 0x12c

0000b334 <dowaitloop>:
    b334:	e2522001 	subs	r2, r2, #1
    b338:	1afffffd 	bne	b334 <dowaitloop>
    b33c:	e12fff1e 	bx	lr
    b340:	3f200094 	.word	0x3f200094
    b344:	3f200098 	.word	0x3f200098
    b348:	0bc00010 	.word	0x0bc00010
    b34c:	3f200000 	.word	0x3f200000
    b350:	3f200008 	.word	0x3f200008
    b354:	00e3ffc0 	.word	0x00e3ffc0
    b358:	0061b6c0 	.word	0x0061b6c0

0000b35c <InitFrameBuffer>:
    b35c:	e59f2068 	ldr	r2, [pc, #104]	; b3cc <pointerWaitLoop$+0x1c>
    b360:	e59f3068 	ldr	r3, [pc, #104]	; b3d0 <pointerWaitLoop$+0x20>

0000b364 <mBoxFullLoop$>:
    b364:	e5920018 	ldr	r0, [r2, #24]
    b368:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    b36c:	1afffffc 	bne	b364 <mBoxFullLoop$>
    b370:	e2830101 	add	r0, r3, #1073741824	; 0x40000000
    b374:	e3800008 	orr	r0, r0, #8
    b378:	e5820020 	str	r0, [r2, #32]

0000b37c <mBoxEmptyLoop$>:
    b37c:	e5920018 	ldr	r0, [r2, #24]
    b380:	e3100101 	tst	r0, #1073741824	; 0x40000000
    b384:	1afffffc 	bne	b37c <mBoxEmptyLoop$>
    b388:	e5920000 	ldr	r0, [r2]
    b38c:	e200100f 	and	r1, r0, #15
    b390:	e3310008 	teq	r1, #8
    b394:	1afffff8 	bne	b37c <mBoxEmptyLoop$>
    b398:	e59f0030 	ldr	r0, [pc, #48]	; b3d0 <pointerWaitLoop$+0x20>
    b39c:	e5901004 	ldr	r1, [r0, #4]
    b3a0:	e3310102 	teq	r1, #-2147483648	; 0x80000000
    b3a4:	0a000001 	beq	b3b0 <pointerWaitLoop$>
    b3a8:	13a00000 	movne	r0, #0
    b3ac:	112fff1e 	bxne	lr

0000b3b0 <pointerWaitLoop$>:
    b3b0:	e59f001c 	ldr	r0, [pc, #28]	; b3d4 <pointerWaitLoop$+0x24>
    b3b4:	e5900000 	ldr	r0, [r0]
    b3b8:	e3300000 	teq	r0, #0
    b3bc:	0afffffb 	beq	b3b0 <pointerWaitLoop$>
    b3c0:	e59f3010 	ldr	r3, [pc, #16]	; b3d8 <pointerWaitLoop$+0x28>
    b3c4:	e5830000 	str	r0, [r3]
    b3c8:	e12fff1e 	bx	lr
    b3cc:	3f00b880 	.word	0x3f00b880
    b3d0:	00009080 	.word	0x00009080
    b3d4:	000090cc 	.word	0x000090cc
    b3d8:	000090e0 	.word	0x000090e0

0000b3dc <sampleSNES>:
    b3dc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}

0000b3e0 <initSNES>:
    b3e0:	e3a00001 	mov	r0, #1
    b3e4:	eb000048 	bl	b50c <setCLOCKFunction>
    b3e8:	e3a00001 	mov	r0, #1
    b3ec:	eb00003d 	bl	b4e8 <setLATCHFunction>
    b3f0:	e3a00000 	mov	r0, #0
    b3f4:	eb000034 	bl	b4cc <setDATAFunction>

0000b3f8 <startSamplingSNESButtons>:
    b3f8:	e3a0000b 	mov	r0, #11
    b3fc:	e3a01001 	mov	r1, #1
    b400:	eb000056 	bl	b560 <writeGPIO>
    b404:	e3a00009 	mov	r0, #9
    b408:	e3a01001 	mov	r1, #1
    b40c:	eb000053 	bl	b560 <writeGPIO>
    b410:	e3a0000c 	mov	r0, #12
    b414:	eb000019 	bl	b480 <startTimer>
    b418:	e3a00009 	mov	r0, #9
    b41c:	e3a01000 	mov	r1, #0
    b420:	eb00004e 	bl	b560 <writeGPIO>
    b424:	e3a08000 	mov	r8, #0
    b428:	e3a07000 	mov	r7, #0

0000b42c <pulseLoop>:
    b42c:	e3a00006 	mov	r0, #6
    b430:	eb000012 	bl	b480 <startTimer>
    b434:	e3a0000b 	mov	r0, #11
    b438:	e3a01000 	mov	r1, #0
    b43c:	eb000047 	bl	b560 <writeGPIO>
    b440:	e3a00006 	mov	r0, #6
    b444:	eb00000d 	bl	b480 <startTimer>
    b448:	e3a0000a 	mov	r0, #10
    b44c:	e3a01000 	mov	r1, #0
    b450:	eb000036 	bl	b530 <readGPIO>
    b454:	e1a00710 	lsl	r0, r0, r7
    b458:	e1888000 	orr	r8, r8, r0
    b45c:	e3a0000b 	mov	r0, #11
    b460:	e3a01001 	mov	r1, #1
    b464:	eb00003d 	bl	b560 <writeGPIO>
    b468:	e2877001 	add	r7, r7, #1
    b46c:	e3570010 	cmp	r7, #16
    b470:	baffffed 	blt	b42c <pulseLoop>

0000b474 <pulseLoopEnd>:
    b474:	e1a00008 	mov	r0, r8

0000b478 <mainEnd>:
    b478:	eaffffff 	b	b47c <killProgram>

0000b47c <killProgram>:
    b47c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000b480 <startTimer>:
    b480:	e1a03000 	mov	r3, r0
    b484:	e59f0128 	ldr	r0, [pc, #296]	; b5b4 <newButtonPress+0x14>
    b488:	e5901000 	ldr	r1, [r0]
    b48c:	e0811003 	add	r1, r1, r3

0000b490 <waitLoop>:
    b490:	e5902000 	ldr	r2, [r0]
    b494:	e1510002 	cmp	r1, r2
    b498:	8afffffc 	bhi	b490 <waitLoop>
    b49c:	e1a0f00e 	mov	pc, lr

0000b4a0 <setGPIOFunction>:
    b4a0:	e59f3110 	ldr	r3, [pc, #272]	; b5b8 <newButtonPress+0x18>
    b4a4:	e3a04004 	mov	r4, #4
    b4a8:	e0000094 	mul	r0, r4, r0
    b4ac:	e7934000 	ldr	r4, [r3, r0]
    b4b0:	e3a05007 	mov	r5, #7
    b4b4:	e1a05215 	lsl	r5, r5, r2
    b4b8:	e1c33005 	bic	r3, r3, r5
    b4bc:	e1a01211 	lsl	r1, r1, r2
    b4c0:	e1844001 	orr	r4, r4, r1
    b4c4:	e7834000 	str	r4, [r3, r0]
    b4c8:	e1a0f00e 	mov	pc, lr

0000b4cc <setDATAFunction>:
    b4cc:	e59f10e4 	ldr	r1, [pc, #228]	; b5b8 <newButtonPress+0x18>
    b4d0:	e5912004 	ldr	r2, [r1, #4]
    b4d4:	e3a03007 	mov	r3, #7
    b4d8:	e1c22003 	bic	r2, r2, r3
    b4dc:	e1822000 	orr	r2, r2, r0
    b4e0:	e5812004 	str	r2, [r1, #4]
    b4e4:	e1a0f00e 	mov	pc, lr

0000b4e8 <setLATCHFunction>:
    b4e8:	e59f10c8 	ldr	r1, [pc, #200]	; b5b8 <newButtonPress+0x18>
    b4ec:	e5912000 	ldr	r2, [r1]
    b4f0:	e3a03007 	mov	r3, #7
    b4f4:	e1a03d83 	lsl	r3, r3, #27
    b4f8:	e1c22003 	bic	r2, r2, r3
    b4fc:	e1a00d80 	lsl	r0, r0, #27
    b500:	e1822000 	orr	r2, r2, r0
    b504:	e5812000 	str	r2, [r1]
    b508:	e1a0f00e 	mov	pc, lr

0000b50c <setCLOCKFunction>:
    b50c:	e59f10a4 	ldr	r1, [pc, #164]	; b5b8 <newButtonPress+0x18>
    b510:	e5912004 	ldr	r2, [r1, #4]
    b514:	e3a03007 	mov	r3, #7
    b518:	e1a03183 	lsl	r3, r3, #3
    b51c:	e1c22003 	bic	r2, r2, r3
    b520:	e1a00180 	lsl	r0, r0, #3
    b524:	e1822000 	orr	r2, r2, r0
    b528:	e5812004 	str	r2, [r1, #4]
    b52c:	e1a0f00e 	mov	pc, lr

0000b530 <readGPIO>:
    b530:	e59f1080 	ldr	r1, [pc, #128]	; b5b8 <newButtonPress+0x18>
    b534:	e3500020 	cmp	r0, #32
    b538:	b5912034 	ldrlt	r2, [r1, #52]	; 0x34
    b53c:	a5912038 	ldrge	r2, [r1, #56]	; 0x38
    b540:	a2400020 	subge	r0, r0, #32
    b544:	e3a03001 	mov	r3, #1
    b548:	e1a03013 	lsl	r3, r3, r0
    b54c:	e0022003 	and	r2, r2, r3
    b550:	e3320000 	teq	r2, #0
    b554:	03a00000 	moveq	r0, #0
    b558:	13a00001 	movne	r0, #1
    b55c:	e1a0f00e 	mov	pc, lr

0000b560 <writeGPIO>:
    b560:	e3310000 	teq	r1, #0
    b564:	e59f104c 	ldr	r1, [pc, #76]	; b5b8 <newButtonPress+0x18>
    b568:	1281201c 	addne	r2, r1, #28
    b56c:	02812028 	addeq	r2, r1, #40	; 0x28
    b570:	e3500020 	cmp	r0, #32
    b574:	a2400020 	subge	r0, r0, #32
    b578:	e3a01001 	mov	r1, #1
    b57c:	e1a01011 	lsl	r1, r1, r0
    b580:	b5821000 	strlt	r1, [r2]
    b584:	a5821004 	strge	r1, [r2, #4]
    b588:	e1a0f00e 	mov	pc, lr

0000b58c <areAnySNESButtonsPressed>:
    b58c:	e59f1028 	ldr	r1, [pc, #40]	; b5bc <newButtonPress+0x1c>
    b590:	e0411000 	sub	r1, r1, r0
    b594:	e1500009 	cmp	r0, r9
    b598:	1a000000 	bne	b5a0 <newButtonPress>
    b59c:	e3a01000 	mov	r1, #0

0000b5a0 <newButtonPress>:
    b5a0:	e3310000 	teq	r1, #0
    b5a4:	03a01000 	moveq	r1, #0
    b5a8:	13a01001 	movne	r1, #1
    b5ac:	e1a09000 	mov	r9, r0
    b5b0:	e1a0f00e 	mov	pc, lr
    b5b4:	3f003004 	.word	0x3f003004
    b5b8:	3f200000 	.word	0x3f200000
    b5bc:	0000ffff 	.word	0x0000ffff

0000b5c0 <main>:
    b5c0:	e3a0d902 	mov	sp, #32768	; 0x8000
    b5c4:	ebffff41 	bl	b2d0 <EnableJTAG>
    b5c8:	ebffff63 	bl	b35c <InitFrameBuffer>
    b5cc:	ebffff82 	bl	b3dc <sampleSNES>
    b5d0:	e59f06bc 	ldr	r0, [pc, #1724]	; bc94 <waitLoop+0x10>
    b5d4:	e280000c 	add	r0, r0, #12
    b5d8:	e59f16b8 	ldr	r1, [pc, #1720]	; bc98 <waitLoop+0x14>

0000b5dc <looop>:
    b5dc:	e3a02000 	mov	r2, #0
    b5e0:	e5802000 	str	r2, [r0]
    b5e4:	e2800004 	add	r0, r0, #4
    b5e8:	e0412000 	sub	r2, r1, r0
    b5ec:	e3520000 	cmp	r2, #0
    b5f0:	cafffff9 	bgt	b5dc <looop>
    b5f4:	eb000148 	bl	bb1c <tetrisCreateNewBlock>

0000b5f8 <mainLoop>:
    b5f8:	e3a00001 	mov	r0, #1
    b5fc:	eb000151 	bl	bb48 <tetrisRotateBlock>
    b600:	e3a00000 	mov	r0, #0
    b604:	e3a01001 	mov	r1, #1
    b608:	eb00015d 	bl	bb84 <tetrisTranslateBlock>
    b60c:	eb00011a 	bl	ba7c <tetrisUpdateGridWithBlock>
    b610:	eb0000f5 	bl	b9ec <tetrisDrawGrid>
    b614:	e3a000ff 	mov	r0, #255	; 0xff
    b618:	eb000195 	bl	bc74 <startTimer>
    b61c:	eafffff5 	b	b5f8 <mainLoop>

0000b620 <mainEnd>:
    b620:	eafffffe 	b	b620 <mainEnd>

0000b624 <DrawTitle>:
    b624:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b628:	e3a00000 	mov	r0, #0
    b62c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b630:	e3a0001e 	mov	r0, #30
    b634:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b638:	e3a00064 	mov	r0, #100	; 0x64
    b63c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b640:	e3a0005e 	mov	r0, #94	; 0x5e
    b644:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b648:	e3a000de 	mov	r0, #222	; 0xde
    b64c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b650:	eb000175 	bl	bc2c <drawRect>
    b654:	e3a00000 	mov	r0, #0
    b658:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b65c:	e3a00096 	mov	r0, #150	; 0x96
    b660:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b664:	e3a0001e 	mov	r0, #30
    b668:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b66c:	e3a0007c 	mov	r0, #124	; 0x7c
    b670:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b674:	e59f0620 	ldr	r0, [pc, #1568]	; bc9c <waitLoop+0x18>
    b678:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b67c:	eb00016a 	bl	bc2c <drawRect>
    b680:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b684 <SetMainMenuIndicatorStart>:
    b684:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b688:	e59f0610 	ldr	r0, [pc, #1552]	; bca0 <waitLoop+0x1c>
    b68c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b690:	e3a00014 	mov	r0, #20
    b694:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b698:	e3a00014 	mov	r0, #20
    b69c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b6a0:	e3a00fa5 	mov	r0, #660	; 0x294
    b6a4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b6a8:	e3a00f71 	mov	r0, #452	; 0x1c4
    b6ac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b6b0:	eb00015d 	bl	bc2c <drawRect>
    b6b4:	e3a00000 	mov	r0, #0
    b6b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b6bc:	e3a00014 	mov	r0, #20
    b6c0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b6c4:	e3a00014 	mov	r0, #20
    b6c8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b6cc:	e59f05d0 	ldr	r0, [pc, #1488]	; bca4 <waitLoop+0x20>
    b6d0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b6d4:	e3a00f71 	mov	r0, #452	; 0x1c4
    b6d8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b6dc:	eb000152 	bl	bc2c <drawRect>
    b6e0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b6e4 <SetMainMenuIndicatorQuit>:
    b6e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b6e8:	e59f05b0 	ldr	r0, [pc, #1456]	; bca0 <waitLoop+0x1c>
    b6ec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b6f0:	e3a00014 	mov	r0, #20
    b6f4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b6f8:	e3a00014 	mov	r0, #20
    b6fc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b700:	e59f059c 	ldr	r0, [pc, #1436]	; bca4 <waitLoop+0x20>
    b704:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b708:	e3a00f71 	mov	r0, #452	; 0x1c4
    b70c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b710:	eb000145 	bl	bc2c <drawRect>
    b714:	e3a00000 	mov	r0, #0
    b718:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b71c:	e3a00014 	mov	r0, #20
    b720:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b724:	e3a00014 	mov	r0, #20
    b728:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b72c:	e3a00fa5 	mov	r0, #660	; 0x294
    b730:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b734:	e3a00f71 	mov	r0, #452	; 0x1c4
    b738:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b73c:	eb00013a 	bl	bc2c <drawRect>
    b740:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b744 <ClearScreenBlack>:
    b744:	e92d4600 	push	{r9, sl, lr}
    b748:	e59f0558 	ldr	r0, [pc, #1368]	; bca8 <waitLoop+0x24>
    b74c:	e5909014 	ldr	r9, [r0, #20]
    b750:	e590a018 	ldr	sl, [r0, #24]
    b754:	e3a00000 	mov	r0, #0
    b758:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b75c:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    b760:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    b764:	e3a00000 	mov	r0, #0
    b768:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b76c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b770:	eb00012d 	bl	bc2c <drawRect>
    b774:	e8bd8600 	pop	{r9, sl, pc}

0000b778 <DrawMainMenu>:
    b778:	e92d4600 	push	{r9, sl, lr}
    b77c:	e59f0524 	ldr	r0, [pc, #1316]	; bca8 <waitLoop+0x24>
    b780:	e5909014 	ldr	r9, [r0, #20]
    b784:	e590a018 	ldr	sl, [r0, #24]
    b788:	e59f051c 	ldr	r0, [pc, #1308]	; bcac <waitLoop+0x28>
    b78c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b790:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    b794:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    b798:	e3a00000 	mov	r0, #0
    b79c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b7a0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b7a4:	eb000120 	bl	bc2c <drawRect>
    b7a8:	e59f0500 	ldr	r0, [pc, #1280]	; bcb0 <waitLoop+0x2c>
    b7ac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b7b0:	e3a000c8 	mov	r0, #200	; 0xc8
    b7b4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b7b8:	e3a00f96 	mov	r0, #600	; 0x258
    b7bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b7c0:	e3a00054 	mov	r0, #84	; 0x54
    b7c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b7c8:	e3a000d4 	mov	r0, #212	; 0xd4
    b7cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b7d0:	eb000115 	bl	bc2c <drawRect>
    b7d4:	e59f04d4 	ldr	r0, [pc, #1236]	; bcb0 <waitLoop+0x2c>
    b7d8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b7dc:	e3a000c8 	mov	r0, #200	; 0xc8
    b7e0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b7e4:	e3a000c8 	mov	r0, #200	; 0xc8
    b7e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b7ec:	e3a00f47 	mov	r0, #284	; 0x11c
    b7f0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b7f4:	e3a00f67 	mov	r0, #412	; 0x19c
    b7f8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b7fc:	eb00010a 	bl	bc2c <drawRect>
    b800:	ebffff87 	bl	b624 <DrawTitle>
    b804:	e59f04a8 	ldr	r0, [pc, #1192]	; bcb4 <waitLoop+0x30>
    b808:	e3a01000 	mov	r1, #0
    b80c:	e59f24a4 	ldr	r2, [pc, #1188]	; bcb8 <waitLoop+0x34>
    b810:	e3a03044 	mov	r3, #68	; 0x44
    b814:	eb00003a 	bl	b904 <WriteSentence>
    b818:	e59f049c 	ldr	r0, [pc, #1180]	; bcbc <waitLoop+0x38>
    b81c:	e3a01f8d 	mov	r1, #564	; 0x234
    b820:	eb00000e 	bl	b860 <drawStartMenuButton>
    b824:	e59f0494 	ldr	r0, [pc, #1172]	; bcc0 <waitLoop+0x3c>
    b828:	e3a01000 	mov	r1, #0
    b82c:	e59f2490 	ldr	r2, [pc, #1168]	; bcc4 <waitLoop+0x40>
    b830:	e59f3490 	ldr	r3, [pc, #1168]	; bcc8 <waitLoop+0x44>
    b834:	eb000032 	bl	b904 <WriteSentence>
    b838:	e59f047c 	ldr	r0, [pc, #1148]	; bcbc <waitLoop+0x38>
    b83c:	e59f1488 	ldr	r1, [pc, #1160]	; bccc <waitLoop+0x48>
    b840:	eb000006 	bl	b860 <drawStartMenuButton>
    b844:	e59f0484 	ldr	r0, [pc, #1156]	; bcd0 <waitLoop+0x4c>
    b848:	e3a01000 	mov	r1, #0
    b84c:	e59f2480 	ldr	r2, [pc, #1152]	; bcd4 <waitLoop+0x50>
    b850:	e3a03fa6 	mov	r3, #664	; 0x298
    b854:	eb00002a 	bl	b904 <WriteSentence>
    b858:	ebffff89 	bl	b684 <SetMainMenuIndicatorStart>
    b85c:	e8bd8600 	pop	{r9, sl, pc}

0000b860 <drawStartMenuButton>:
    b860:	e92d4600 	push	{r9, sl, lr}
    b864:	e1a09000 	mov	r9, r0
    b868:	e1a0a001 	mov	sl, r1
    b86c:	e3a00000 	mov	r0, #0
    b870:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b874:	e3a00032 	mov	r0, #50	; 0x32
    b878:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b87c:	e3a00096 	mov	r0, #150	; 0x96
    b880:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b884:	e1a0000a 	mov	r0, sl
    b888:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b88c:	e1a00009 	mov	r0, r9
    b890:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b894:	eb0000e4 	bl	bc2c <drawRect>
    b898:	e2899005 	add	r9, r9, #5
    b89c:	e28aa005 	add	sl, sl, #5
    b8a0:	e59f0430 	ldr	r0, [pc, #1072]	; bcd8 <waitLoop+0x54>
    b8a4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b8a8:	e3a00028 	mov	r0, #40	; 0x28
    b8ac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b8b0:	e3a0008c 	mov	r0, #140	; 0x8c
    b8b4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b8b8:	e1a0000a 	mov	r0, sl
    b8bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b8c0:	e1a00009 	mov	r0, r9
    b8c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b8c8:	eb0000d7 	bl	bc2c <drawRect>
    b8cc:	e2899005 	add	r9, r9, #5
    b8d0:	e28aa005 	add	sl, sl, #5
    b8d4:	e59f03c4 	ldr	r0, [pc, #964]	; bca0 <waitLoop+0x1c>
    b8d8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b8dc:	e3a0001e 	mov	r0, #30
    b8e0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b8e4:	e3a0001e 	mov	r0, #30
    b8e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b8ec:	e1a0000a 	mov	r0, sl
    b8f0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b8f4:	e1a00009 	mov	r0, r9
    b8f8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b8fc:	eb0000ca 	bl	bc2c <drawRect>
    b900:	e8bd8600 	pop	{r9, sl, pc}

0000b904 <WriteSentence>:
    b904:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b908:	e1a05000 	mov	r5, r0
    b90c:	e5954000 	ldr	r4, [r5]
    b910:	e2855004 	add	r5, r5, #4
    b914:	e1a06001 	mov	r6, r1
    b918:	e1a08002 	mov	r8, r2
    b91c:	e1a07003 	mov	r7, r3

0000b920 <LoadChar>:
    b920:	e4d50001 	ldrb	r0, [r5], #1
    b924:	e1a01006 	mov	r1, r6
    b928:	e1a02007 	mov	r2, r7
    b92c:	e1a03008 	mov	r3, r8
    b930:	eb000004 	bl	b948 <DrawChar>
    b934:	e2888008 	add	r8, r8, #8
    b938:	e2444001 	sub	r4, r4, #1
    b93c:	e3540000 	cmp	r4, #0
    b940:	cafffff6 	bgt	b920 <LoadChar>
    b944:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000b948 <DrawChar>:
    b948:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b94c:	e1a09001 	mov	r9, r1
    b950:	e59f4384 	ldr	r4, [pc, #900]	; bcdc <waitLoop+0x58>
    b954:	e0844200 	add	r4, r4, r0, lsl #4
    b958:	e1a06002 	mov	r6, r2

0000b95c <charLoop$>:
    b95c:	e1a05003 	mov	r5, r3
    b960:	e3a08001 	mov	r8, #1
    b964:	e4d47001 	ldrb	r7, [r4], #1

0000b968 <rowLoop$>:
    b968:	e1170008 	tst	r7, r8
    b96c:	0a000003 	beq	b980 <noPixel$>
    b970:	e1a00005 	mov	r0, r5
    b974:	e1a01006 	mov	r1, r6
    b978:	e1a02009 	mov	r2, r9
    b97c:	eb0000a0 	bl	bc04 <drawPixel>

0000b980 <noPixel$>:
    b980:	e2855001 	add	r5, r5, #1
    b984:	e1a08088 	lsl	r8, r8, #1
    b988:	e3180c01 	tst	r8, #256	; 0x100
    b98c:	0afffff5 	beq	b968 <rowLoop$>
    b990:	e2866001 	add	r6, r6, #1
    b994:	e314000f 	tst	r4, #15
    b998:	1affffef 	bne	b95c <charLoop$>
    b99c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000b9a0 <tetrisSetGridBlockColor>:
    b9a0:	e8bd0007 	pop	{r0, r1, r2}
    b9a4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b9a8:	e59f32e4 	ldr	r3, [pc, #740]	; bc94 <waitLoop+0x10>
    b9ac:	e5934000 	ldr	r4, [r3]
    b9b0:	e5935004 	ldr	r5, [r3, #4]
    b9b4:	e5936008 	ldr	r6, [r3, #8]
    b9b8:	e283700c 	add	r7, r3, #12
    b9bc:	e0080195 	mul	r8, r5, r1
    b9c0:	e0888000 	add	r8, r8, r0
    b9c4:	e1a08108 	lsl	r8, r8, #2
    b9c8:	e7872008 	str	r2, [r7, r8]
    b9cc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b9d0:	e1a0f00e 	mov	pc, lr

0000b9d4 <tetrisClearGridBlock>:
    b9d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b9d8:	e3a02000 	mov	r2, #0
    b9dc:	e92d0007 	push	{r0, r1, r2}
    b9e0:	ebffffee 	bl	b9a0 <tetrisSetGridBlockColor>
    b9e4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b9e8:	e1a0f00e 	mov	pc, lr

0000b9ec <tetrisDrawGrid>:
    b9ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b9f0:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    b9f4:	e59f7298 	ldr	r7, [pc, #664]	; bc94 <waitLoop+0x10>
    b9f8:	e5978000 	ldr	r8, [r7]
    b9fc:	e5979004 	ldr	r9, [r7, #4]
    ba00:	e597a008 	ldr	sl, [r7, #8]
    ba04:	e287b00c 	add	fp, r7, #12
    ba08:	e3a04000 	mov	r4, #0
    ba0c:	e3a05000 	mov	r5, #0
    ba10:	e3a06000 	mov	r6, #0

0000ba14 <for_curRow_lessThan_rows_loop>:
    ba14:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000ba18 <for_curCol_lessThan_cols_loop>:
    ba18:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ba1c:	e00c0599 	mul	ip, r9, r5
    ba20:	e08cc004 	add	ip, ip, r4
    ba24:	e1a0c10c 	lsl	ip, ip, #2
    ba28:	e79b600c 	ldr	r6, [fp, ip]
    ba2c:	e0000a94 	mul	r0, r4, sl
    ba30:	e0010a95 	mul	r1, r5, sl
    ba34:	e24dd014 	sub	sp, sp, #20
    ba38:	e58d0000 	str	r0, [sp]
    ba3c:	e58d1004 	str	r1, [sp, #4]
    ba40:	e58da008 	str	sl, [sp, #8]
    ba44:	e58da00c 	str	sl, [sp, #12]
    ba48:	e58d6010 	str	r6, [sp, #16]
    ba4c:	eb000076 	bl	bc2c <drawRect>
    ba50:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ba54:	e2855001 	add	r5, r5, #1
    ba58:	e1550009 	cmp	r5, r9
    ba5c:	baffffed 	blt	ba18 <for_curCol_lessThan_cols_loop>
    ba60:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    ba64:	e2844001 	add	r4, r4, #1
    ba68:	e1540008 	cmp	r4, r8
    ba6c:	baffffe8 	blt	ba14 <for_curRow_lessThan_rows_loop>
    ba70:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ba74:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ba78:	e1a0f00e 	mov	pc, lr

0000ba7c <tetrisUpdateGridWithBlock>:
    ba7c:	e1a0000d 	mov	r0, sp
    ba80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ba84:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    ba88:	e89007f0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl}
    ba8c:	e1a04006 	mov	r4, r6
    ba90:	e1a05007 	mov	r5, r7
    ba94:	e5804000 	str	r4, [r0]
    ba98:	e5805004 	str	r5, [r0, #4]
    ba9c:	e92d1800 	push	{fp, ip}
    baa0:	e3a0b000 	mov	fp, #0
    baa4:	e3a0c000 	mov	ip, #0

0000baa8 <for_i_lessThan_4_loop_>:
    baa8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000baac <for_j_lessThan_4_loop_>:
    baac:	e92d01c0 	push	{r6, r7, r8}
    bab0:	e19920ba 	ldrh	r2, [r9, sl]
    bab4:	e086600b 	add	r6, r6, fp
    bab8:	e087700c 	add	r7, r7, ip
    babc:	e3a01004 	mov	r1, #4
    bac0:	e0010c91 	mul	r1, r1, ip
    bac4:	e081100b 	add	r1, r1, fp
    bac8:	e1a02112 	lsl	r2, r2, r1
    bacc:	e3a01902 	mov	r1, #32768	; 0x8000
    bad0:	e0011002 	and	r1, r1, r2
    bad4:	e3310000 	teq	r1, #0
    bad8:	01a00006 	moveq	r0, r6
    badc:	01a01007 	moveq	r1, r7
    bae0:	0bffffbb 	bleq	b9d4 <tetrisClearGridBlock>
    bae4:	192d01c0 	pushne	{r6, r7, r8}
    bae8:	1bffffac 	blne	b9a0 <tetrisSetGridBlockColor>
    baec:	e8bd01c0 	pop	{r6, r7, r8}
    baf0:	e28cc001 	add	ip, ip, #1
    baf4:	e35c0004 	cmp	ip, #4
    baf8:	baffffeb 	blt	baac <for_j_lessThan_4_loop_>
    bafc:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    bb00:	e28bb001 	add	fp, fp, #1
    bb04:	e35b0004 	cmp	fp, #4
    bb08:	baffffe6 	blt	baa8 <for_i_lessThan_4_loop_>
    bb0c:	e8bd1800 	pop	{fp, ip}
    bb10:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    bb14:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    bb18:	e1a0f00e 	mov	pc, lr

0000bb1c <tetrisCreateNewBlock>:
    bb1c:	e59f01bc 	ldr	r0, [pc, #444]	; bce0 <waitLoop+0x5c>
    bb20:	e89007f0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl}

0000bb24 <initializeTetrisBlock>:
    bb24:	e3a04000 	mov	r4, #0
    bb28:	e3a05000 	mov	r5, #0
    bb2c:	e3a06000 	mov	r6, #0
    bb30:	e3a07000 	mov	r7, #0
    bb34:	e59f81a8 	ldr	r8, [pc, #424]	; bce4 <waitLoop+0x60>
    bb38:	e59f91a8 	ldr	r9, [pc, #424]	; bce8 <waitLoop+0x64>
    bb3c:	e3a0a000 	mov	sl, #0

0000bb40 <initializeTetrisBlockEnd>:
    bb40:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    bb44:	e1a0f00e 	mov	pc, lr

0000bb48 <tetrisRotateBlock>:
    bb48:	e89d07f0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl}
    bb4c:	e3300000 	teq	r0, #0
    bb50:	0a000000 	beq	bb58 <rotateLeft>
    bb54:	1a000004 	bne	bb6c <rotateRight>

0000bb58 <rotateLeft>:
    bb58:	e28aa002 	add	sl, sl, #2
    bb5c:	e35a0006 	cmp	sl, #6
    bb60:	c3a0a000 	movgt	sl, #0
    bb64:	e58da018 	str	sl, [sp, #24]
    bb68:	ea000004 	b	bb80 <tetrisRotateBlockEnd>

0000bb6c <rotateRight>:
    bb6c:	e24aa002 	sub	sl, sl, #2
    bb70:	e35a0000 	cmp	sl, #0
    bb74:	b3a0a006 	movlt	sl, #6
    bb78:	e58da018 	str	sl, [sp, #24]
    bb7c:	eaffffff 	b	bb80 <tetrisRotateBlockEnd>

0000bb80 <tetrisRotateBlockEnd>:
    bb80:	e1a0f00e 	mov	pc, lr

0000bb84 <tetrisTranslateBlock>:
    bb84:	e1a0b00e 	mov	fp, lr
    bb88:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    bb8c:	e1a04006 	mov	r4, r6
    bb90:	e1a05007 	mov	r5, r7
    bb94:	e0866000 	add	r6, r6, r0
    bb98:	e0877001 	add	r7, r7, r1
    bb9c:	e58d4000 	str	r4, [sp]
    bba0:	e58d5004 	str	r5, [sp, #4]
    bba4:	e58d6008 	str	r6, [sp, #8]
    bba8:	e58d700c 	str	r7, [sp, #12]
    bbac:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    bbb0:	e1a06004 	mov	r6, r4
    bbb4:	e1a07005 	mov	r7, r5
    bbb8:	e3a08000 	mov	r8, #0
    bbbc:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    bbc0:	ebffffad 	bl	ba7c <tetrisUpdateGridWithBlock>
    bbc4:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    bbc8:	ebffffab 	bl	ba7c <tetrisUpdateGridWithBlock>
    bbcc:	e1a0f00b 	mov	pc, fp

0000bbd0 <clearScreen>:
    bbd0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    bbd4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    bbd8:	e3a04000 	mov	r4, #0
    bbdc:	e3a05000 	mov	r5, #0
    bbe0:	e59f00c0 	ldr	r0, [pc, #192]	; bca8 <waitLoop+0x24>
    bbe4:	e5906014 	ldr	r6, [r0, #20]
    bbe8:	e5907018 	ldr	r7, [r0, #24]
    bbec:	e3a08000 	mov	r8, #0
    bbf0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    bbf4:	eb00000c 	bl	bc2c <drawRect>
    bbf8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    bbfc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    bc00:	e1a0f00e 	mov	pc, lr

0000bc04 <drawPixel>:
    bc04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    bc08:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    bc0c:	e0804501 	add	r4, r0, r1, lsl #10
    bc10:	e1a04084 	lsl	r4, r4, #1
    bc14:	e59f00d0 	ldr	r0, [pc, #208]	; bcec <waitLoop+0x68>
    bc18:	e5900000 	ldr	r0, [r0]
    bc1c:	e18020b4 	strh	r2, [r0, r4]
    bc20:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    bc24:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    bc28:	e1a0f00e 	mov	pc, lr

0000bc2c <drawRect>:
    bc2c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    bc30:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    bc34:	e0866004 	add	r6, r6, r4
    bc38:	e0877005 	add	r7, r7, r5

0000bc3c <drawRectForLoopX>:
    bc3c:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000bc40 <drawRectForLoopY>:
    bc40:	e1a00004 	mov	r0, r4
    bc44:	e1a01005 	mov	r1, r5
    bc48:	e1a02008 	mov	r2, r8
    bc4c:	ebffffec 	bl	bc04 <drawPixel>
    bc50:	e2855001 	add	r5, r5, #1
    bc54:	e1550007 	cmp	r5, r7
    bc58:	bafffff8 	blt	bc40 <drawRectForLoopY>
    bc5c:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    bc60:	e2844001 	add	r4, r4, #1
    bc64:	e1540006 	cmp	r4, r6
    bc68:	bafffff3 	blt	bc3c <drawRectForLoopX>
    bc6c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    bc70:	e1a0f00e 	mov	pc, lr

0000bc74 <startTimer>:
    bc74:	e1a03000 	mov	r3, r0
    bc78:	e59f0070 	ldr	r0, [pc, #112]	; bcf0 <waitLoop+0x6c>
    bc7c:	e5901000 	ldr	r1, [r0]
    bc80:	e0811003 	add	r1, r1, r3

0000bc84 <waitLoop>:
    bc84:	e5902000 	ldr	r2, [r0]
    bc88:	e1510002 	cmp	r1, r2
    bc8c:	8afffffc 	bhi	bc84 <waitLoop>
    bc90:	e1a0f00e 	mov	pc, lr
    bc94:	000090f0 	.word	0x000090f0
    bc98:	0000a9fc 	.word	0x0000a9fc
    bc9c:	00000101 	.word	0x00000101
    bca0:	0000ffff 	.word	0x0000ffff
    bca4:	00000243 	.word	0x00000243
    bca8:	00009080 	.word	0x00009080
    bcac:	0000967f 	.word	0x0000967f
    bcb0:	0000297e 	.word	0x0000297e
    bcb4:	0000b260 	.word	0x0000b260
    bcb8:	00000172 	.word	0x00000172
    bcbc:	000001b5 	.word	0x000001b5
    bcc0:	0000b2b0 	.word	0x0000b2b0
    bcc4:	000001e7 	.word	0x000001e7
    bcc8:	00000247 	.word	0x00000247
    bccc:	00000285 	.word	0x00000285
    bcd0:	0000b2c0 	.word	0x0000b2c0
    bcd4:	000001eb 	.word	0x000001eb
    bcd8:	00000d7f 	.word	0x00000d7f
    bcdc:	0000aa60 	.word	0x0000aa60
    bce0:	0000a9fc 	.word	0x0000a9fc
    bce4:	001133ff 	.word	0x001133ff
    bce8:	0000aa30 	.word	0x0000aa30
    bcec:	000090e0 	.word	0x000090e0
    bcf0:	3f003004 	.word	0x3f003004
