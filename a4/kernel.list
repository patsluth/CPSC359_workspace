
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea0008ca 	b	a330 <main>

Disassembly of section .text:

0000a330 <main>:
    a330:	e3a0d902 	mov	sp, #32768	; 0x8000
    a334:	eb0001bb 	bl	aa28 <EnableJTAG>
    a338:	eb0001dd 	bl	aab4 <InitFrameBuffer>
    a33c:	eb0001fc 	bl	ab34 <sampleSNES>
    a340:	e59f0680 	ldr	r0, [pc, #1664]	; a9c8 <waitLoop+0x10>
    a344:	e280000c 	add	r0, r0, #12
    a348:	e59f167c 	ldr	r1, [pc, #1660]	; a9cc <waitLoop+0x14>

0000a34c <looop>:
    a34c:	e3a02000 	mov	r2, #0
    a350:	e5802000 	str	r2, [r0]
    a354:	e2800004 	add	r0, r0, #4
    a358:	e0412000 	sub	r2, r1, r0
    a35c:	e3520000 	cmp	r2, #0
    a360:	cafffff9 	bgt	a34c <looop>
    a364:	eb000142 	bl	a874 <tetrisCreateNewBlock>

0000a368 <mainLoop>:
    a368:	eb00014c 	bl	a8a0 <tetrisRotateBlockTest>
    a36c:	e3a00001 	mov	r0, #1
    a370:	e3a01001 	mov	r1, #1
    a374:	eb00014f 	bl	a8b8 <tetrisTranslateBlockTest>
    a378:	eb000115 	bl	a7d4 <tetrisUpdateGridWithBlock>
    a37c:	eb0000f3 	bl	a750 <tetrisDrawGrid>
    a380:	e3a000ff 	mov	r0, #255	; 0xff
    a384:	eb000187 	bl	a9a8 <startTimer>
    a388:	eafffff6 	b	a368 <mainLoop>

0000a38c <mainEnd>:
    a38c:	eafffffe 	b	a38c <mainEnd>

0000a390 <DrawTitle>:
    a390:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a394:	e3a00000 	mov	r0, #0
    a398:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a39c:	e3a0001e 	mov	r0, #30
    a3a0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3a4:	e3a00064 	mov	r0, #100	; 0x64
    a3a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3ac:	e3a0005e 	mov	r0, #94	; 0x5e
    a3b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3b4:	e3a000de 	mov	r0, #222	; 0xde
    a3b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3bc:	eb000167 	bl	a960 <drawRect>
    a3c0:	e3a00000 	mov	r0, #0
    a3c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3c8:	e3a00096 	mov	r0, #150	; 0x96
    a3cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3d0:	e3a0001e 	mov	r0, #30
    a3d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3d8:	e3a0007c 	mov	r0, #124	; 0x7c
    a3dc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3e0:	e59f05e8 	ldr	r0, [pc, #1512]	; a9d0 <waitLoop+0x18>
    a3e4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3e8:	eb00015c 	bl	a960 <drawRect>
    a3ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a3f0 <SetMainMenuIndicatorStart>:
    a3f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a3f4:	e59f05d8 	ldr	r0, [pc, #1496]	; a9d4 <waitLoop+0x1c>
    a3f8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3fc:	e3a00014 	mov	r0, #20
    a400:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a404:	e3a00014 	mov	r0, #20
    a408:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a40c:	e3a00fa5 	mov	r0, #660	; 0x294
    a410:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a414:	e3a00f71 	mov	r0, #452	; 0x1c4
    a418:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a41c:	eb00014f 	bl	a960 <drawRect>
    a420:	e3a00000 	mov	r0, #0
    a424:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a428:	e3a00014 	mov	r0, #20
    a42c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a430:	e3a00014 	mov	r0, #20
    a434:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a438:	e59f0598 	ldr	r0, [pc, #1432]	; a9d8 <waitLoop+0x20>
    a43c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a440:	e3a00f71 	mov	r0, #452	; 0x1c4
    a444:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a448:	eb000144 	bl	a960 <drawRect>
    a44c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a450 <SetMainMenuIndicatorQuit>:
    a450:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a454:	e59f0578 	ldr	r0, [pc, #1400]	; a9d4 <waitLoop+0x1c>
    a458:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a45c:	e3a00014 	mov	r0, #20
    a460:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a464:	e3a00014 	mov	r0, #20
    a468:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a46c:	e59f0564 	ldr	r0, [pc, #1380]	; a9d8 <waitLoop+0x20>
    a470:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a474:	e3a00f71 	mov	r0, #452	; 0x1c4
    a478:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a47c:	eb000137 	bl	a960 <drawRect>
    a480:	e3a00000 	mov	r0, #0
    a484:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a488:	e3a00014 	mov	r0, #20
    a48c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a490:	e3a00014 	mov	r0, #20
    a494:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a498:	e3a00fa5 	mov	r0, #660	; 0x294
    a49c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4a0:	e3a00f71 	mov	r0, #452	; 0x1c4
    a4a4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4a8:	eb00012c 	bl	a960 <drawRect>
    a4ac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a4b0 <ClearScreenBlack>:
    a4b0:	e92d4600 	push	{r9, sl, lr}
    a4b4:	e59f0520 	ldr	r0, [pc, #1312]	; a9dc <waitLoop+0x24>
    a4b8:	e5909014 	ldr	r9, [r0, #20]
    a4bc:	e590a018 	ldr	sl, [r0, #24]
    a4c0:	e3a00000 	mov	r0, #0
    a4c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4c8:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    a4cc:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    a4d0:	e3a00000 	mov	r0, #0
    a4d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4d8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4dc:	eb00011f 	bl	a960 <drawRect>
    a4e0:	e8bd8600 	pop	{r9, sl, pc}

0000a4e4 <DrawMainMenu>:
    a4e4:	e92d4600 	push	{r9, sl, lr}
    a4e8:	e59f04ec 	ldr	r0, [pc, #1260]	; a9dc <waitLoop+0x24>
    a4ec:	e5909014 	ldr	r9, [r0, #20]
    a4f0:	e590a018 	ldr	sl, [r0, #24]
    a4f4:	e59f04e4 	ldr	r0, [pc, #1252]	; a9e0 <waitLoop+0x28>
    a4f8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4fc:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    a500:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    a504:	e3a00000 	mov	r0, #0
    a508:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a50c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a510:	eb000112 	bl	a960 <drawRect>
    a514:	e59f04c8 	ldr	r0, [pc, #1224]	; a9e4 <waitLoop+0x2c>
    a518:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a51c:	e3a000c8 	mov	r0, #200	; 0xc8
    a520:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a524:	e3a00f96 	mov	r0, #600	; 0x258
    a528:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a52c:	e3a00054 	mov	r0, #84	; 0x54
    a530:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a534:	e3a000d4 	mov	r0, #212	; 0xd4
    a538:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a53c:	eb000107 	bl	a960 <drawRect>
    a540:	e59f049c 	ldr	r0, [pc, #1180]	; a9e4 <waitLoop+0x2c>
    a544:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a548:	e3a000c8 	mov	r0, #200	; 0xc8
    a54c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a550:	e3a000c8 	mov	r0, #200	; 0xc8
    a554:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a558:	e3a00f47 	mov	r0, #284	; 0x11c
    a55c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a560:	e3a00f67 	mov	r0, #412	; 0x19c
    a564:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a568:	eb0000fc 	bl	a960 <drawRect>
    a56c:	ebffff87 	bl	a390 <DrawTitle>
    a570:	e59f0470 	ldr	r0, [pc, #1136]	; a9e8 <waitLoop+0x30>
    a574:	e3a01000 	mov	r1, #0
    a578:	e59f246c 	ldr	r2, [pc, #1132]	; a9ec <waitLoop+0x34>
    a57c:	e3a03044 	mov	r3, #68	; 0x44
    a580:	eb00003a 	bl	a670 <WriteSentence>
    a584:	e59f0464 	ldr	r0, [pc, #1124]	; a9f0 <waitLoop+0x38>
    a588:	e3a01f8d 	mov	r1, #564	; 0x234
    a58c:	eb00000e 	bl	a5cc <drawStartMenuButton>
    a590:	e59f045c 	ldr	r0, [pc, #1116]	; a9f4 <waitLoop+0x3c>
    a594:	e3a01000 	mov	r1, #0
    a598:	e59f2458 	ldr	r2, [pc, #1112]	; a9f8 <waitLoop+0x40>
    a59c:	e59f3458 	ldr	r3, [pc, #1112]	; a9fc <waitLoop+0x44>
    a5a0:	eb000032 	bl	a670 <WriteSentence>
    a5a4:	e59f0444 	ldr	r0, [pc, #1092]	; a9f0 <waitLoop+0x38>
    a5a8:	e59f1450 	ldr	r1, [pc, #1104]	; aa00 <waitLoop+0x48>
    a5ac:	eb000006 	bl	a5cc <drawStartMenuButton>
    a5b0:	e59f044c 	ldr	r0, [pc, #1100]	; aa04 <waitLoop+0x4c>
    a5b4:	e3a01000 	mov	r1, #0
    a5b8:	e59f2448 	ldr	r2, [pc, #1096]	; aa08 <waitLoop+0x50>
    a5bc:	e3a03fa6 	mov	r3, #664	; 0x298
    a5c0:	eb00002a 	bl	a670 <WriteSentence>
    a5c4:	ebffff89 	bl	a3f0 <SetMainMenuIndicatorStart>
    a5c8:	e8bd8600 	pop	{r9, sl, pc}

0000a5cc <drawStartMenuButton>:
    a5cc:	e92d4600 	push	{r9, sl, lr}
    a5d0:	e1a09000 	mov	r9, r0
    a5d4:	e1a0a001 	mov	sl, r1
    a5d8:	e3a00000 	mov	r0, #0
    a5dc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5e0:	e3a00032 	mov	r0, #50	; 0x32
    a5e4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5e8:	e3a00096 	mov	r0, #150	; 0x96
    a5ec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5f0:	e1a0000a 	mov	r0, sl
    a5f4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5f8:	e1a00009 	mov	r0, r9
    a5fc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a600:	eb0000d6 	bl	a960 <drawRect>
    a604:	e2899005 	add	r9, r9, #5
    a608:	e28aa005 	add	sl, sl, #5
    a60c:	e59f03f8 	ldr	r0, [pc, #1016]	; aa0c <waitLoop+0x54>
    a610:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a614:	e3a00028 	mov	r0, #40	; 0x28
    a618:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a61c:	e3a0008c 	mov	r0, #140	; 0x8c
    a620:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a624:	e1a0000a 	mov	r0, sl
    a628:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a62c:	e1a00009 	mov	r0, r9
    a630:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a634:	eb0000c9 	bl	a960 <drawRect>
    a638:	e2899005 	add	r9, r9, #5
    a63c:	e28aa005 	add	sl, sl, #5
    a640:	e59f038c 	ldr	r0, [pc, #908]	; a9d4 <waitLoop+0x1c>
    a644:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a648:	e3a0001e 	mov	r0, #30
    a64c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a650:	e3a0001e 	mov	r0, #30
    a654:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a658:	e1a0000a 	mov	r0, sl
    a65c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a660:	e1a00009 	mov	r0, r9
    a664:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a668:	eb0000bc 	bl	a960 <drawRect>
    a66c:	e8bd8600 	pop	{r9, sl, pc}

0000a670 <WriteSentence>:
    a670:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a674:	e1a05000 	mov	r5, r0
    a678:	e5954000 	ldr	r4, [r5]
    a67c:	e2855004 	add	r5, r5, #4
    a680:	e1a06001 	mov	r6, r1
    a684:	e1a08002 	mov	r8, r2
    a688:	e1a07003 	mov	r7, r3

0000a68c <LoadChar>:
    a68c:	e4d50001 	ldrb	r0, [r5], #1
    a690:	e1a01006 	mov	r1, r6
    a694:	e1a02007 	mov	r2, r7
    a698:	e1a03008 	mov	r3, r8
    a69c:	eb000004 	bl	a6b4 <DrawChar>
    a6a0:	e2888008 	add	r8, r8, #8
    a6a4:	e2444001 	sub	r4, r4, #1
    a6a8:	e3540000 	cmp	r4, #0
    a6ac:	cafffff6 	bgt	a68c <LoadChar>
    a6b0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000a6b4 <DrawChar>:
    a6b4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a6b8:	e1a09001 	mov	r9, r1
    a6bc:	e59f434c 	ldr	r4, [pc, #844]	; aa10 <waitLoop+0x58>
    a6c0:	e0844200 	add	r4, r4, r0, lsl #4
    a6c4:	e1a06002 	mov	r6, r2

0000a6c8 <charLoop$>:
    a6c8:	e1a05003 	mov	r5, r3
    a6cc:	e3a08001 	mov	r8, #1
    a6d0:	e4d47001 	ldrb	r7, [r4], #1

0000a6d4 <rowLoop$>:
    a6d4:	e1170008 	tst	r7, r8
    a6d8:	0a000003 	beq	a6ec <noPixel$>
    a6dc:	e1a00005 	mov	r0, r5
    a6e0:	e1a01006 	mov	r1, r6
    a6e4:	e1a02009 	mov	r2, r9
    a6e8:	eb000092 	bl	a938 <drawPixel>

0000a6ec <noPixel$>:
    a6ec:	e2855001 	add	r5, r5, #1
    a6f0:	e1a08088 	lsl	r8, r8, #1
    a6f4:	e3180c01 	tst	r8, #256	; 0x100
    a6f8:	0afffff5 	beq	a6d4 <rowLoop$>
    a6fc:	e2866001 	add	r6, r6, #1
    a700:	e314000f 	tst	r4, #15
    a704:	1affffef 	bne	a6c8 <charLoop$>
    a708:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000a70c <tetrisSetGridBlockColor>:
    a70c:	e8bd0007 	pop	{r0, r1, r2}
    a710:	e92d0380 	push	{r7, r8, r9}
    a714:	e59f72ac 	ldr	r7, [pc, #684]	; a9c8 <waitLoop+0x10>
    a718:	e5978008 	ldr	r8, [r7, #8]
    a71c:	e287700c 	add	r7, r7, #12
    a720:	e0090198 	mul	r9, r8, r1
    a724:	e0899000 	add	r9, r9, r0
    a728:	e1a09109 	lsl	r9, r9, #2
    a72c:	e7872009 	str	r2, [r7, r9]
    a730:	e8bd0380 	pop	{r7, r8, r9}
    a734:	e1a0f00e 	mov	pc, lr

0000a738 <tetrisClearGridBlock>:
    a738:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a73c:	e3a02000 	mov	r2, #0
    a740:	e92d0007 	push	{r0, r1, r2}
    a744:	ebfffff0 	bl	a70c <tetrisSetGridBlockColor>
    a748:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a74c:	e1a0f00e 	mov	pc, lr

0000a750 <tetrisDrawGrid>:
    a750:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a754:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
    a758:	e59f0268 	ldr	r0, [pc, #616]	; a9c8 <waitLoop+0x10>
    a75c:	e8b00070 	ldm	r0!, {r4, r5, r6}
    a760:	e1a0a000 	mov	sl, r0
    a764:	e3a07000 	mov	r7, #0
    a768:	e3a08000 	mov	r8, #0

0000a76c <for_curRow_lessThan_rows_loop>:
    a76c:	e52d8004 	push	{r8}		; (str r8, [sp, #-4]!)

0000a770 <for_curCol_lessThan_cols_loop>:
    a770:	e92d03f0 	push	{r4, r5, r6, r7, r8, r9}
    a774:	e00b0894 	mul	fp, r4, r8
    a778:	e08bb007 	add	fp, fp, r7
    a77c:	e1a0b10b 	lsl	fp, fp, #2
    a780:	e79a900b 	ldr	r9, [sl, fp]
    a784:	e0000697 	mul	r0, r7, r6
    a788:	e0010698 	mul	r1, r8, r6
    a78c:	e24dd014 	sub	sp, sp, #20
    a790:	e58d0000 	str	r0, [sp]
    a794:	e58d1004 	str	r1, [sp, #4]
    a798:	e58d6008 	str	r6, [sp, #8]
    a79c:	e58d600c 	str	r6, [sp, #12]
    a7a0:	e58d9010 	str	r9, [sp, #16]
    a7a4:	eb00006d 	bl	a960 <drawRect>
    a7a8:	e8bd03f0 	pop	{r4, r5, r6, r7, r8, r9}
    a7ac:	e2888001 	add	r8, r8, #1
    a7b0:	e1580005 	cmp	r8, r5
    a7b4:	baffffed 	blt	a770 <for_curCol_lessThan_cols_loop>
    a7b8:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    a7bc:	e2877001 	add	r7, r7, #1
    a7c0:	e1570004 	cmp	r7, r4
    a7c4:	baffffe8 	blt	a76c <for_curRow_lessThan_rows_loop>
    a7c8:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
    a7cc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a7d0:	e1a0f00e 	mov	pc, lr

0000a7d4 <tetrisUpdateGridWithBlock>:
    a7d4:	e1a0000d 	mov	r0, sp
    a7d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a7dc:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a7e0:	e89007f0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl}
    a7e4:	e1a04006 	mov	r4, r6
    a7e8:	e1a05007 	mov	r5, r7
    a7ec:	e5804000 	str	r4, [r0]
    a7f0:	e5805004 	str	r5, [r0, #4]
    a7f4:	e92d1800 	push	{fp, ip}
    a7f8:	e3a0b000 	mov	fp, #0
    a7fc:	e3a0c000 	mov	ip, #0

0000a800 <for_i_lessThan_4_loop_>:
    a800:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000a804 <for_j_lessThan_4_loop_>:
    a804:	e92d01c0 	push	{r6, r7, r8}
    a808:	e19920ba 	ldrh	r2, [r9, sl]
    a80c:	e086600b 	add	r6, r6, fp
    a810:	e087700c 	add	r7, r7, ip
    a814:	e3a01004 	mov	r1, #4
    a818:	e0010c91 	mul	r1, r1, ip
    a81c:	e081100b 	add	r1, r1, fp
    a820:	e1a02112 	lsl	r2, r2, r1
    a824:	e3a01902 	mov	r1, #32768	; 0x8000
    a828:	e0011002 	and	r1, r1, r2
    a82c:	e3310000 	teq	r1, #0
    a830:	01a00006 	moveq	r0, r6
    a834:	01a01007 	moveq	r1, r7
    a838:	0bffffbe 	bleq	a738 <tetrisClearGridBlock>
    a83c:	192d01c0 	pushne	{r6, r7, r8}
    a840:	1bffffb1 	blne	a70c <tetrisSetGridBlockColor>
    a844:	e8bd01c0 	pop	{r6, r7, r8}
    a848:	e28cc001 	add	ip, ip, #1
    a84c:	e35c0004 	cmp	ip, #4
    a850:	baffffeb 	blt	a804 <for_j_lessThan_4_loop_>
    a854:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    a858:	e28bb001 	add	fp, fp, #1
    a85c:	e35b0004 	cmp	fp, #4
    a860:	baffffe6 	blt	a800 <for_i_lessThan_4_loop_>
    a864:	e8bd1800 	pop	{fp, ip}
    a868:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a86c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a870:	e1a0f00e 	mov	pc, lr

0000a874 <tetrisCreateNewBlock>:
    a874:	e59f0198 	ldr	r0, [pc, #408]	; aa14 <waitLoop+0x5c>
    a878:	e89007f0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl}

0000a87c <initializeTetrisBlock>:
    a87c:	e3a04000 	mov	r4, #0
    a880:	e3a05000 	mov	r5, #0
    a884:	e3a06000 	mov	r6, #0
    a888:	e3a07000 	mov	r7, #0
    a88c:	e59f8184 	ldr	r8, [pc, #388]	; aa18 <waitLoop+0x60>
    a890:	e59f9184 	ldr	r9, [pc, #388]	; aa1c <waitLoop+0x64>
    a894:	e3a0a000 	mov	sl, #0

0000a898 <initializeTetrisBlockEnd>:
    a898:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a89c:	e1a0f00e 	mov	pc, lr

0000a8a0 <tetrisRotateBlockTest>:
    a8a0:	e89d07f0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl}
    a8a4:	e28aa002 	add	sl, sl, #2
    a8a8:	e35a0006 	cmp	sl, #6
    a8ac:	c3a0a000 	movgt	sl, #0
    a8b0:	e58da018 	str	sl, [sp, #24]
    a8b4:	e1a0f00e 	mov	pc, lr

0000a8b8 <tetrisTranslateBlockTest>:
    a8b8:	e1a0b00e 	mov	fp, lr
    a8bc:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a8c0:	e1a04006 	mov	r4, r6
    a8c4:	e1a05007 	mov	r5, r7
    a8c8:	e0866000 	add	r6, r6, r0
    a8cc:	e0877001 	add	r7, r7, r1
    a8d0:	e58d4000 	str	r4, [sp]
    a8d4:	e58d5004 	str	r5, [sp, #4]
    a8d8:	e58d6008 	str	r6, [sp, #8]
    a8dc:	e58d700c 	str	r7, [sp, #12]
    a8e0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a8e4:	e1a06004 	mov	r6, r4
    a8e8:	e1a07005 	mov	r7, r5
    a8ec:	e3a08000 	mov	r8, #0
    a8f0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a8f4:	ebffffb6 	bl	a7d4 <tetrisUpdateGridWithBlock>
    a8f8:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a8fc:	ebffffb4 	bl	a7d4 <tetrisUpdateGridWithBlock>
    a900:	e1a0f00b 	mov	pc, fp

0000a904 <clearScreen>:
    a904:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a908:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a90c:	e3a04000 	mov	r4, #0
    a910:	e3a05000 	mov	r5, #0
    a914:	e59f00c0 	ldr	r0, [pc, #192]	; a9dc <waitLoop+0x24>
    a918:	e5906014 	ldr	r6, [r0, #20]
    a91c:	e5907018 	ldr	r7, [r0, #24]
    a920:	e3a08000 	mov	r8, #0
    a924:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a928:	eb00000c 	bl	a960 <drawRect>
    a92c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    a930:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a934:	e1a0f00e 	mov	pc, lr

0000a938 <drawPixel>:
    a938:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a93c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    a940:	e0804501 	add	r4, r0, r1, lsl #10
    a944:	e1a04084 	lsl	r4, r4, #1
    a948:	e59f00d0 	ldr	r0, [pc, #208]	; aa20 <waitLoop+0x68>
    a94c:	e5900000 	ldr	r0, [r0]
    a950:	e18020b4 	strh	r2, [r0, r4]
    a954:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    a958:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a95c:	e1a0f00e 	mov	pc, lr

0000a960 <drawRect>:
    a960:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    a964:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a968:	e0866004 	add	r6, r6, r4
    a96c:	e0877005 	add	r7, r7, r5

0000a970 <drawRectForLoopX>:
    a970:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000a974 <drawRectForLoopY>:
    a974:	e1a00004 	mov	r0, r4
    a978:	e1a01005 	mov	r1, r5
    a97c:	e1a02008 	mov	r2, r8
    a980:	ebffffec 	bl	a938 <drawPixel>
    a984:	e2855001 	add	r5, r5, #1
    a988:	e1550007 	cmp	r5, r7
    a98c:	bafffff8 	blt	a974 <drawRectForLoopY>
    a990:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    a994:	e2844001 	add	r4, r4, #1
    a998:	e1540006 	cmp	r4, r6
    a99c:	bafffff3 	blt	a970 <drawRectForLoopX>
    a9a0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a9a4:	e1a0f00e 	mov	pc, lr

0000a9a8 <startTimer>:
    a9a8:	e1a03000 	mov	r3, r0
    a9ac:	e59f0070 	ldr	r0, [pc, #112]	; aa24 <waitLoop+0x6c>
    a9b0:	e5901000 	ldr	r1, [r0]
    a9b4:	e0811003 	add	r1, r1, r3

0000a9b8 <waitLoop>:
    a9b8:	e5902000 	ldr	r2, [r0]
    a9bc:	e1510002 	cmp	r1, r2
    a9c0:	8afffffc 	bhi	a9b8 <waitLoop>
    a9c4:	e1a0f00e 	mov	pc, lr
    a9c8:	00009080 	.word	0x00009080
    a9cc:	000099ec 	.word	0x000099ec
    a9d0:	00000101 	.word	0x00000101
    a9d4:	0000ffff 	.word	0x0000ffff
    a9d8:	00000243 	.word	0x00000243
    a9dc:	0000a2c0 	.word	0x0000a2c0
    a9e0:	0000967f 	.word	0x0000967f
    a9e4:	0000297e 	.word	0x0000297e
    a9e8:	0000a250 	.word	0x0000a250
    a9ec:	00000172 	.word	0x00000172
    a9f0:	000001b5 	.word	0x000001b5
    a9f4:	0000a2a0 	.word	0x0000a2a0
    a9f8:	000001e7 	.word	0x000001e7
    a9fc:	00000247 	.word	0x00000247
    aa00:	00000285 	.word	0x00000285
    aa04:	0000a2b0 	.word	0x0000a2b0
    aa08:	000001eb 	.word	0x000001eb
    aa0c:	00000d7f 	.word	0x00000d7f
    aa10:	00009a50 	.word	0x00009a50
    aa14:	000099ec 	.word	0x000099ec
    aa18:	001133ff 	.word	0x001133ff
    aa1c:	00009a20 	.word	0x00009a20
    aa20:	0000a320 	.word	0x0000a320
    aa24:	3f003004 	.word	0x3f003004

0000aa28 <EnableJTAG>:
    aa28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aa2c:	e59f0064 	ldr	r0, [pc, #100]	; aa98 <dowaitloop+0xc>
    aa30:	e0211001 	eor	r1, r1, r1
    aa34:	e5801000 	str	r1, [r0]
    aa38:	eb000012 	bl	aa88 <dowait>
    aa3c:	e59f0058 	ldr	r0, [pc, #88]	; aa9c <dowaitloop+0x10>
    aa40:	e59f1058 	ldr	r1, [pc, #88]	; aaa0 <dowaitloop+0x14>
    aa44:	e5801000 	str	r1, [r0]
    aa48:	eb00000e 	bl	aa88 <dowait>
    aa4c:	e0211001 	eor	r1, r1, r1
    aa50:	e5801000 	str	r1, [r0]
    aa54:	e59f0048 	ldr	r0, [pc, #72]	; aaa4 <dowaitloop+0x18>
    aa58:	e5901000 	ldr	r1, [r0]
    aa5c:	e3c11a07 	bic	r1, r1, #28672	; 0x7000
    aa60:	e3811a02 	orr	r1, r1, #8192	; 0x2000
    aa64:	e5801000 	str	r1, [r0]
    aa68:	e59f0038 	ldr	r0, [pc, #56]	; aaa8 <dowaitloop+0x1c>
    aa6c:	e5901000 	ldr	r1, [r0]
    aa70:	e59f2034 	ldr	r2, [pc, #52]	; aaac <dowaitloop+0x20>
    aa74:	e1c11002 	bic	r1, r1, r2
    aa78:	e59f2030 	ldr	r2, [pc, #48]	; aab0 <dowaitloop+0x24>
    aa7c:	e1811002 	orr	r1, r1, r2
    aa80:	e5801000 	str	r1, [r0]
    aa84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000aa88 <dowait>:
    aa88:	e3a02f4b 	mov	r2, #300	; 0x12c

0000aa8c <dowaitloop>:
    aa8c:	e2522001 	subs	r2, r2, #1
    aa90:	1afffffd 	bne	aa8c <dowaitloop>
    aa94:	e12fff1e 	bx	lr
    aa98:	3f200094 	.word	0x3f200094
    aa9c:	3f200098 	.word	0x3f200098
    aaa0:	0bc00010 	.word	0x0bc00010
    aaa4:	3f200000 	.word	0x3f200000
    aaa8:	3f200008 	.word	0x3f200008
    aaac:	00e3ffc0 	.word	0x00e3ffc0
    aab0:	0061b6c0 	.word	0x0061b6c0

0000aab4 <InitFrameBuffer>:
    aab4:	e59f2068 	ldr	r2, [pc, #104]	; ab24 <pointerWaitLoop$+0x1c>
    aab8:	e59f3068 	ldr	r3, [pc, #104]	; ab28 <pointerWaitLoop$+0x20>

0000aabc <mBoxFullLoop$>:
    aabc:	e5920018 	ldr	r0, [r2, #24]
    aac0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    aac4:	1afffffc 	bne	aabc <mBoxFullLoop$>
    aac8:	e2830101 	add	r0, r3, #1073741824	; 0x40000000
    aacc:	e3800008 	orr	r0, r0, #8
    aad0:	e5820020 	str	r0, [r2, #32]

0000aad4 <mBoxEmptyLoop$>:
    aad4:	e5920018 	ldr	r0, [r2, #24]
    aad8:	e3100101 	tst	r0, #1073741824	; 0x40000000
    aadc:	1afffffc 	bne	aad4 <mBoxEmptyLoop$>
    aae0:	e5920000 	ldr	r0, [r2]
    aae4:	e200100f 	and	r1, r0, #15
    aae8:	e3310008 	teq	r1, #8
    aaec:	1afffff8 	bne	aad4 <mBoxEmptyLoop$>
    aaf0:	e59f0030 	ldr	r0, [pc, #48]	; ab28 <pointerWaitLoop$+0x20>
    aaf4:	e5901004 	ldr	r1, [r0, #4]
    aaf8:	e3310102 	teq	r1, #-2147483648	; 0x80000000
    aafc:	0a000001 	beq	ab08 <pointerWaitLoop$>
    ab00:	13a00000 	movne	r0, #0
    ab04:	112fff1e 	bxne	lr

0000ab08 <pointerWaitLoop$>:
    ab08:	e59f001c 	ldr	r0, [pc, #28]	; ab2c <pointerWaitLoop$+0x24>
    ab0c:	e5900000 	ldr	r0, [r0]
    ab10:	e3300000 	teq	r0, #0
    ab14:	0afffffb 	beq	ab08 <pointerWaitLoop$>
    ab18:	e59f3010 	ldr	r3, [pc, #16]	; ab30 <pointerWaitLoop$+0x28>
    ab1c:	e5830000 	str	r0, [r3]
    ab20:	e12fff1e 	bx	lr
    ab24:	3f00b880 	.word	0x3f00b880
    ab28:	0000a2c0 	.word	0x0000a2c0
    ab2c:	0000a30c 	.word	0x0000a30c
    ab30:	0000a320 	.word	0x0000a320

0000ab34 <sampleSNES>:
    ab34:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}

0000ab38 <initSNES>:
    ab38:	e3a00001 	mov	r0, #1
    ab3c:	eb000048 	bl	ac64 <setCLOCKFunction>
    ab40:	e3a00001 	mov	r0, #1
    ab44:	eb00003d 	bl	ac40 <setLATCHFunction>
    ab48:	e3a00000 	mov	r0, #0
    ab4c:	eb000034 	bl	ac24 <setDATAFunction>

0000ab50 <startSamplingSNESButtons>:
    ab50:	e3a0000b 	mov	r0, #11
    ab54:	e3a01001 	mov	r1, #1
    ab58:	eb000056 	bl	acb8 <writeGPIO>
    ab5c:	e3a00009 	mov	r0, #9
    ab60:	e3a01001 	mov	r1, #1
    ab64:	eb000053 	bl	acb8 <writeGPIO>
    ab68:	e3a0000c 	mov	r0, #12
    ab6c:	eb000019 	bl	abd8 <startTimer>
    ab70:	e3a00009 	mov	r0, #9
    ab74:	e3a01000 	mov	r1, #0
    ab78:	eb00004e 	bl	acb8 <writeGPIO>
    ab7c:	e3a08000 	mov	r8, #0
    ab80:	e3a07000 	mov	r7, #0

0000ab84 <pulseLoop>:
    ab84:	e3a00006 	mov	r0, #6
    ab88:	eb000012 	bl	abd8 <startTimer>
    ab8c:	e3a0000b 	mov	r0, #11
    ab90:	e3a01000 	mov	r1, #0
    ab94:	eb000047 	bl	acb8 <writeGPIO>
    ab98:	e3a00006 	mov	r0, #6
    ab9c:	eb00000d 	bl	abd8 <startTimer>
    aba0:	e3a0000a 	mov	r0, #10
    aba4:	e3a01000 	mov	r1, #0
    aba8:	eb000036 	bl	ac88 <readGPIO>
    abac:	e1a00710 	lsl	r0, r0, r7
    abb0:	e1888000 	orr	r8, r8, r0
    abb4:	e3a0000b 	mov	r0, #11
    abb8:	e3a01001 	mov	r1, #1
    abbc:	eb00003d 	bl	acb8 <writeGPIO>
    abc0:	e2877001 	add	r7, r7, #1
    abc4:	e3570010 	cmp	r7, #16
    abc8:	baffffed 	blt	ab84 <pulseLoop>

0000abcc <pulseLoopEnd>:
    abcc:	e1a00008 	mov	r0, r8

0000abd0 <mainEnd>:
    abd0:	eaffffff 	b	abd4 <killProgram>

0000abd4 <killProgram>:
    abd4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000abd8 <startTimer>:
    abd8:	e1a03000 	mov	r3, r0
    abdc:	e59f0128 	ldr	r0, [pc, #296]	; ad0c <newButtonPress+0x14>
    abe0:	e5901000 	ldr	r1, [r0]
    abe4:	e0811003 	add	r1, r1, r3

0000abe8 <waitLoop>:
    abe8:	e5902000 	ldr	r2, [r0]
    abec:	e1510002 	cmp	r1, r2
    abf0:	8afffffc 	bhi	abe8 <waitLoop>
    abf4:	e1a0f00e 	mov	pc, lr

0000abf8 <setGPIOFunction>:
    abf8:	e59f3110 	ldr	r3, [pc, #272]	; ad10 <newButtonPress+0x18>
    abfc:	e3a04004 	mov	r4, #4
    ac00:	e0000094 	mul	r0, r4, r0
    ac04:	e7934000 	ldr	r4, [r3, r0]
    ac08:	e3a05007 	mov	r5, #7
    ac0c:	e1a05215 	lsl	r5, r5, r2
    ac10:	e1c33005 	bic	r3, r3, r5
    ac14:	e1a01211 	lsl	r1, r1, r2
    ac18:	e1844001 	orr	r4, r4, r1
    ac1c:	e7834000 	str	r4, [r3, r0]
    ac20:	e1a0f00e 	mov	pc, lr

0000ac24 <setDATAFunction>:
    ac24:	e59f10e4 	ldr	r1, [pc, #228]	; ad10 <newButtonPress+0x18>
    ac28:	e5912004 	ldr	r2, [r1, #4]
    ac2c:	e3a03007 	mov	r3, #7
    ac30:	e1c22003 	bic	r2, r2, r3
    ac34:	e1822000 	orr	r2, r2, r0
    ac38:	e5812004 	str	r2, [r1, #4]
    ac3c:	e1a0f00e 	mov	pc, lr

0000ac40 <setLATCHFunction>:
    ac40:	e59f10c8 	ldr	r1, [pc, #200]	; ad10 <newButtonPress+0x18>
    ac44:	e5912000 	ldr	r2, [r1]
    ac48:	e3a03007 	mov	r3, #7
    ac4c:	e1a03d83 	lsl	r3, r3, #27
    ac50:	e1c22003 	bic	r2, r2, r3
    ac54:	e1a00d80 	lsl	r0, r0, #27
    ac58:	e1822000 	orr	r2, r2, r0
    ac5c:	e5812000 	str	r2, [r1]
    ac60:	e1a0f00e 	mov	pc, lr

0000ac64 <setCLOCKFunction>:
    ac64:	e59f10a4 	ldr	r1, [pc, #164]	; ad10 <newButtonPress+0x18>
    ac68:	e5912004 	ldr	r2, [r1, #4]
    ac6c:	e3a03007 	mov	r3, #7
    ac70:	e1a03183 	lsl	r3, r3, #3
    ac74:	e1c22003 	bic	r2, r2, r3
    ac78:	e1a00180 	lsl	r0, r0, #3
    ac7c:	e1822000 	orr	r2, r2, r0
    ac80:	e5812004 	str	r2, [r1, #4]
    ac84:	e1a0f00e 	mov	pc, lr

0000ac88 <readGPIO>:
    ac88:	e59f1080 	ldr	r1, [pc, #128]	; ad10 <newButtonPress+0x18>
    ac8c:	e3500020 	cmp	r0, #32
    ac90:	b5912034 	ldrlt	r2, [r1, #52]	; 0x34
    ac94:	a5912038 	ldrge	r2, [r1, #56]	; 0x38
    ac98:	a2400020 	subge	r0, r0, #32
    ac9c:	e3a03001 	mov	r3, #1
    aca0:	e1a03013 	lsl	r3, r3, r0
    aca4:	e0022003 	and	r2, r2, r3
    aca8:	e3320000 	teq	r2, #0
    acac:	03a00000 	moveq	r0, #0
    acb0:	13a00001 	movne	r0, #1
    acb4:	e1a0f00e 	mov	pc, lr

0000acb8 <writeGPIO>:
    acb8:	e3310000 	teq	r1, #0
    acbc:	e59f104c 	ldr	r1, [pc, #76]	; ad10 <newButtonPress+0x18>
    acc0:	1281201c 	addne	r2, r1, #28
    acc4:	02812028 	addeq	r2, r1, #40	; 0x28
    acc8:	e3500020 	cmp	r0, #32
    accc:	a2400020 	subge	r0, r0, #32
    acd0:	e3a01001 	mov	r1, #1
    acd4:	e1a01011 	lsl	r1, r1, r0
    acd8:	b5821000 	strlt	r1, [r2]
    acdc:	a5821004 	strge	r1, [r2, #4]
    ace0:	e1a0f00e 	mov	pc, lr

0000ace4 <areAnySNESButtonsPressed>:
    ace4:	e59f1028 	ldr	r1, [pc, #40]	; ad14 <newButtonPress+0x1c>
    ace8:	e0411000 	sub	r1, r1, r0
    acec:	e1500009 	cmp	r0, r9
    acf0:	1a000000 	bne	acf8 <newButtonPress>
    acf4:	e3a01000 	mov	r1, #0

0000acf8 <newButtonPress>:
    acf8:	e3310000 	teq	r1, #0
    acfc:	03a01000 	moveq	r1, #0
    ad00:	13a01001 	movne	r1, #1
    ad04:	e1a09000 	mov	r9, r0
    ad08:	e1a0f00e 	mov	pc, lr
    ad0c:	3f003004 	.word	0x3f003004
    ad10:	3f200000 	.word	0x3f200000
    ad14:	0000ffff 	.word	0x0000ffff
