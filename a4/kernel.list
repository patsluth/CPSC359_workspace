
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea000a26 	b	a8a0 <main>

Disassembly of section .text:

0000a560 <randomNumber>:
    a560:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a564:	e59f1040 	ldr	r1, [pc, #64]	; a5ac <top+0x34>
    a568:	e5914000 	ldr	r4, [r1]
    a56c:	e5915000 	ldr	r5, [r1]
    a570:	e5916000 	ldr	r6, [r1]
    a574:	e5912000 	ldr	r2, [r1]

0000a578 <top>:
    a578:	e1a07004 	mov	r7, r4
    a57c:	e0277587 	eor	r7, r7, r7, lsl #11
    a580:	e0277427 	eor	r7, r7, r7, lsr #8
    a584:	e1a04005 	mov	r4, r5
    a588:	e1a05006 	mov	r5, r6
    a58c:	e1a06002 	mov	r6, r2
    a590:	e02229a2 	eor	r2, r2, r2, lsr #19
    a594:	e0222007 	eor	r2, r2, r7
    a598:	e3e01007 	mvn	r1, #7
    a59c:	e1c20001 	bic	r0, r2, r1
    a5a0:	e3500007 	cmp	r0, #7
    a5a4:	0afffff3 	beq	a578 <top>
    a5a8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a5ac:	3f003004 	.word	0x3f003004

0000a5b0 <EnableJTAG>:
    a5b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a5b4:	e59f0064 	ldr	r0, [pc, #100]	; a620 <dowaitloop+0xc>
    a5b8:	e0211001 	eor	r1, r1, r1
    a5bc:	e5801000 	str	r1, [r0]
    a5c0:	eb000012 	bl	a610 <dowait>
    a5c4:	e59f0058 	ldr	r0, [pc, #88]	; a624 <dowaitloop+0x10>
    a5c8:	e59f1058 	ldr	r1, [pc, #88]	; a628 <dowaitloop+0x14>
    a5cc:	e5801000 	str	r1, [r0]
    a5d0:	eb00000e 	bl	a610 <dowait>
    a5d4:	e0211001 	eor	r1, r1, r1
    a5d8:	e5801000 	str	r1, [r0]
    a5dc:	e59f0048 	ldr	r0, [pc, #72]	; a62c <dowaitloop+0x18>
    a5e0:	e5901000 	ldr	r1, [r0]
    a5e4:	e3c11a07 	bic	r1, r1, #28672	; 0x7000
    a5e8:	e3811a02 	orr	r1, r1, #8192	; 0x2000
    a5ec:	e5801000 	str	r1, [r0]
    a5f0:	e59f0038 	ldr	r0, [pc, #56]	; a630 <dowaitloop+0x1c>
    a5f4:	e5901000 	ldr	r1, [r0]
    a5f8:	e59f2034 	ldr	r2, [pc, #52]	; a634 <dowaitloop+0x20>
    a5fc:	e1c11002 	bic	r1, r1, r2
    a600:	e59f2030 	ldr	r2, [pc, #48]	; a638 <dowaitloop+0x24>
    a604:	e1811002 	orr	r1, r1, r2
    a608:	e5801000 	str	r1, [r0]
    a60c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a610 <dowait>:
    a610:	e3a02f4b 	mov	r2, #300	; 0x12c

0000a614 <dowaitloop>:
    a614:	e2522001 	subs	r2, r2, #1
    a618:	1afffffd 	bne	a614 <dowaitloop>
    a61c:	e12fff1e 	bx	lr
    a620:	3f200094 	.word	0x3f200094
    a624:	3f200098 	.word	0x3f200098
    a628:	0bc00010 	.word	0x0bc00010
    a62c:	3f200000 	.word	0x3f200000
    a630:	3f200008 	.word	0x3f200008
    a634:	00e3ffc0 	.word	0x00e3ffc0
    a638:	0061b6c0 	.word	0x0061b6c0

0000a63c <InitFrameBuffer>:
    a63c:	e59f2068 	ldr	r2, [pc, #104]	; a6ac <pointerWaitLoop$+0x1c>
    a640:	e59f3068 	ldr	r3, [pc, #104]	; a6b0 <pointerWaitLoop$+0x20>

0000a644 <mBoxFullLoop$>:
    a644:	e5920018 	ldr	r0, [r2, #24]
    a648:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    a64c:	1afffffc 	bne	a644 <mBoxFullLoop$>
    a650:	e2830101 	add	r0, r3, #1073741824	; 0x40000000
    a654:	e3800008 	orr	r0, r0, #8
    a658:	e5820020 	str	r0, [r2, #32]

0000a65c <mBoxEmptyLoop$>:
    a65c:	e5920018 	ldr	r0, [r2, #24]
    a660:	e3100101 	tst	r0, #1073741824	; 0x40000000
    a664:	1afffffc 	bne	a65c <mBoxEmptyLoop$>
    a668:	e5920000 	ldr	r0, [r2]
    a66c:	e200100f 	and	r1, r0, #15
    a670:	e3310008 	teq	r1, #8
    a674:	1afffff8 	bne	a65c <mBoxEmptyLoop$>
    a678:	e59f0030 	ldr	r0, [pc, #48]	; a6b0 <pointerWaitLoop$+0x20>
    a67c:	e5901004 	ldr	r1, [r0, #4]
    a680:	e3310102 	teq	r1, #-2147483648	; 0x80000000
    a684:	0a000001 	beq	a690 <pointerWaitLoop$>
    a688:	13a00000 	movne	r0, #0
    a68c:	112fff1e 	bxne	lr

0000a690 <pointerWaitLoop$>:
    a690:	e59f001c 	ldr	r0, [pc, #28]	; a6b4 <pointerWaitLoop$+0x24>
    a694:	e5900000 	ldr	r0, [r0]
    a698:	e3300000 	teq	r0, #0
    a69c:	0afffffb 	beq	a690 <pointerWaitLoop$>
    a6a0:	e59f3010 	ldr	r3, [pc, #16]	; a6b8 <pointerWaitLoop$+0x28>
    a6a4:	e5830000 	str	r0, [r3]
    a6a8:	e12fff1e 	bx	lr
    a6ac:	3f00b880 	.word	0x3f00b880
    a6b0:	00009080 	.word	0x00009080
    a6b4:	000090cc 	.word	0x000090cc
    a6b8:	000090e0 	.word	0x000090e0

0000a6bc <sampleSNES>:
    a6bc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}

0000a6c0 <initSNES>:
    a6c0:	e3a00001 	mov	r0, #1
    a6c4:	eb000048 	bl	a7ec <setCLOCKFunction>
    a6c8:	e3a00001 	mov	r0, #1
    a6cc:	eb00003d 	bl	a7c8 <setLATCHFunction>
    a6d0:	e3a00000 	mov	r0, #0
    a6d4:	eb000034 	bl	a7ac <setDATAFunction>

0000a6d8 <startSamplingSNESButtons>:
    a6d8:	e3a0000b 	mov	r0, #11
    a6dc:	e3a01001 	mov	r1, #1
    a6e0:	eb000056 	bl	a840 <writeGPIO>
    a6e4:	e3a00009 	mov	r0, #9
    a6e8:	e3a01001 	mov	r1, #1
    a6ec:	eb000053 	bl	a840 <writeGPIO>
    a6f0:	e3a0000c 	mov	r0, #12
    a6f4:	eb000019 	bl	a760 <startTimer>
    a6f8:	e3a00009 	mov	r0, #9
    a6fc:	e3a01000 	mov	r1, #0
    a700:	eb00004e 	bl	a840 <writeGPIO>
    a704:	e3a08000 	mov	r8, #0
    a708:	e3a07000 	mov	r7, #0

0000a70c <pulseLoop>:
    a70c:	e3a00006 	mov	r0, #6
    a710:	eb000012 	bl	a760 <startTimer>
    a714:	e3a0000b 	mov	r0, #11
    a718:	e3a01000 	mov	r1, #0
    a71c:	eb000047 	bl	a840 <writeGPIO>
    a720:	e3a00006 	mov	r0, #6
    a724:	eb00000d 	bl	a760 <startTimer>
    a728:	e3a0000a 	mov	r0, #10
    a72c:	e3a01000 	mov	r1, #0
    a730:	eb000036 	bl	a810 <readGPIO>
    a734:	e1a00710 	lsl	r0, r0, r7
    a738:	e1888000 	orr	r8, r8, r0
    a73c:	e3a0000b 	mov	r0, #11
    a740:	e3a01001 	mov	r1, #1
    a744:	eb00003d 	bl	a840 <writeGPIO>
    a748:	e2877001 	add	r7, r7, #1
    a74c:	e3570010 	cmp	r7, #16
    a750:	baffffed 	blt	a70c <pulseLoop>

0000a754 <pulseLoopEnd>:
    a754:	e1a00008 	mov	r0, r8

0000a758 <mainEnd>:
    a758:	eaffffff 	b	a75c <killProgram>

0000a75c <killProgram>:
    a75c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000a760 <startTimer>:
    a760:	e1a03000 	mov	r3, r0
    a764:	e59f0128 	ldr	r0, [pc, #296]	; a894 <newButtonPress+0x14>
    a768:	e5901000 	ldr	r1, [r0]
    a76c:	e0811003 	add	r1, r1, r3

0000a770 <waitLoop>:
    a770:	e5902000 	ldr	r2, [r0]
    a774:	e1510002 	cmp	r1, r2
    a778:	8afffffc 	bhi	a770 <waitLoop>
    a77c:	e1a0f00e 	mov	pc, lr

0000a780 <setGPIOFunction>:
    a780:	e59f3110 	ldr	r3, [pc, #272]	; a898 <newButtonPress+0x18>
    a784:	e3a04004 	mov	r4, #4
    a788:	e0000094 	mul	r0, r4, r0
    a78c:	e7934000 	ldr	r4, [r3, r0]
    a790:	e3a05007 	mov	r5, #7
    a794:	e1a05215 	lsl	r5, r5, r2
    a798:	e1c33005 	bic	r3, r3, r5
    a79c:	e1a01211 	lsl	r1, r1, r2
    a7a0:	e1844001 	orr	r4, r4, r1
    a7a4:	e7834000 	str	r4, [r3, r0]
    a7a8:	e1a0f00e 	mov	pc, lr

0000a7ac <setDATAFunction>:
    a7ac:	e59f10e4 	ldr	r1, [pc, #228]	; a898 <newButtonPress+0x18>
    a7b0:	e5912004 	ldr	r2, [r1, #4]
    a7b4:	e3a03007 	mov	r3, #7
    a7b8:	e1c22003 	bic	r2, r2, r3
    a7bc:	e1822000 	orr	r2, r2, r0
    a7c0:	e5812004 	str	r2, [r1, #4]
    a7c4:	e1a0f00e 	mov	pc, lr

0000a7c8 <setLATCHFunction>:
    a7c8:	e59f10c8 	ldr	r1, [pc, #200]	; a898 <newButtonPress+0x18>
    a7cc:	e5912000 	ldr	r2, [r1]
    a7d0:	e3a03007 	mov	r3, #7
    a7d4:	e1a03d83 	lsl	r3, r3, #27
    a7d8:	e1c22003 	bic	r2, r2, r3
    a7dc:	e1a00d80 	lsl	r0, r0, #27
    a7e0:	e1822000 	orr	r2, r2, r0
    a7e4:	e5812000 	str	r2, [r1]
    a7e8:	e1a0f00e 	mov	pc, lr

0000a7ec <setCLOCKFunction>:
    a7ec:	e59f10a4 	ldr	r1, [pc, #164]	; a898 <newButtonPress+0x18>
    a7f0:	e5912004 	ldr	r2, [r1, #4]
    a7f4:	e3a03007 	mov	r3, #7
    a7f8:	e1a03183 	lsl	r3, r3, #3
    a7fc:	e1c22003 	bic	r2, r2, r3
    a800:	e1a00180 	lsl	r0, r0, #3
    a804:	e1822000 	orr	r2, r2, r0
    a808:	e5812004 	str	r2, [r1, #4]
    a80c:	e1a0f00e 	mov	pc, lr

0000a810 <readGPIO>:
    a810:	e59f1080 	ldr	r1, [pc, #128]	; a898 <newButtonPress+0x18>
    a814:	e3500020 	cmp	r0, #32
    a818:	b5912034 	ldrlt	r2, [r1, #52]	; 0x34
    a81c:	a5912038 	ldrge	r2, [r1, #56]	; 0x38
    a820:	a2400020 	subge	r0, r0, #32
    a824:	e3a03001 	mov	r3, #1
    a828:	e1a03013 	lsl	r3, r3, r0
    a82c:	e0022003 	and	r2, r2, r3
    a830:	e3320000 	teq	r2, #0
    a834:	03a00000 	moveq	r0, #0
    a838:	13a00001 	movne	r0, #1
    a83c:	e1a0f00e 	mov	pc, lr

0000a840 <writeGPIO>:
    a840:	e3310000 	teq	r1, #0
    a844:	e59f104c 	ldr	r1, [pc, #76]	; a898 <newButtonPress+0x18>
    a848:	1281201c 	addne	r2, r1, #28
    a84c:	02812028 	addeq	r2, r1, #40	; 0x28
    a850:	e3500020 	cmp	r0, #32
    a854:	a2400020 	subge	r0, r0, #32
    a858:	e3a01001 	mov	r1, #1
    a85c:	e1a01011 	lsl	r1, r1, r0
    a860:	b5821000 	strlt	r1, [r2]
    a864:	a5821004 	strge	r1, [r2, #4]
    a868:	e1a0f00e 	mov	pc, lr

0000a86c <areAnySNESButtonsPressed>:
    a86c:	e59f1028 	ldr	r1, [pc, #40]	; a89c <newButtonPress+0x1c>
    a870:	e0411000 	sub	r1, r1, r0
    a874:	e1500009 	cmp	r0, r9
    a878:	1a000000 	bne	a880 <newButtonPress>
    a87c:	e3a01000 	mov	r1, #0

0000a880 <newButtonPress>:
    a880:	e3310000 	teq	r1, #0
    a884:	03a01000 	moveq	r1, #0
    a888:	13a01001 	movne	r1, #1
    a88c:	e1a09000 	mov	r9, r0
    a890:	e1a0f00e 	mov	pc, lr
    a894:	3f003004 	.word	0x3f003004
    a898:	3f200000 	.word	0x3f200000
    a89c:	0000ffff 	.word	0x0000ffff

0000a8a0 <main>:
    a8a0:	e3a0d902 	mov	sp, #32768	; 0x8000
    a8a4:	ebffff41 	bl	a5b0 <EnableJTAG>
    a8a8:	ebffff63 	bl	a63c <InitFrameBuffer>
    a8ac:	eb0006a8 	bl	c354 <clearScreen>

0000a8b0 <MainMenu>:
    a8b0:	eb000161 	bl	ae3c <ClearScreenBlack>
    a8b4:	eb00033c 	bl	b5ac <drawMainMenu>
    a8b8:	e3a09000 	mov	r9, #0

0000a8bc <MainMenuPrompt>:
    a8bc:	e59f0bac 	ldr	r0, [pc, #2988]	; b470 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x70>
    a8c0:	eb0006d5 	bl	c41c <startTimer>
    a8c4:	ebffff7c 	bl	a6bc <sampleSNES>
    a8c8:	e1a0a000 	mov	sl, r0
    a8cc:	e3e01c01 	mvn	r1, #256	; 0x100
    a8d0:	e1c00001 	bic	r0, r0, r1
    a8d4:	e3500000 	cmp	r0, #0
    a8d8:	0a00000a 	beq	a908 <MainMenuAPressed>
    a8dc:	e1a0000a 	mov	r0, sl
    a8e0:	e3e01010 	mvn	r1, #16
    a8e4:	e1c00001 	bic	r0, r0, r1
    a8e8:	e3500000 	cmp	r0, #0
    a8ec:	0a000009 	beq	a918 <MainMenuUpPressed>
    a8f0:	e1a0000a 	mov	r0, sl
    a8f4:	e3e01020 	mvn	r1, #32
    a8f8:	e1c00001 	bic	r0, r0, r1
    a8fc:	e3500000 	cmp	r0, #0
    a900:	0a00000b 	beq	a934 <MainMenuDownPressed>
    a904:	eaffffec 	b	a8bc <MainMenuPrompt>

0000a908 <MainMenuAPressed>:
    a908:	e3590000 	cmp	r9, #0
    a90c:	0a00000f 	beq	a950 <StartGame>
    a910:	eb000149 	bl	ae3c <ClearScreenBlack>
    a914:	ea00004c 	b	aa4c <mainEnd>

0000a918 <MainMenuUpPressed>:
    a918:	e3590000 	cmp	r9, #0
    a91c:	0affffe6 	beq	a8bc <MainMenuPrompt>
    a920:	e3a09000 	mov	r9, #0
    a924:	eb000383 	bl	b738 <setMainMenuIndicatorStart>
    a928:	e3a00801 	mov	r0, #65536	; 0x10000
    a92c:	eb0006ba 	bl	c41c <startTimer>
    a930:	eaffffe1 	b	a8bc <MainMenuPrompt>

0000a934 <MainMenuDownPressed>:
    a934:	e3590001 	cmp	r9, #1
    a938:	0affffdf 	beq	a8bc <MainMenuPrompt>
    a93c:	e3a09001 	mov	r9, #1
    a940:	eb00038c 	bl	b778 <setMainMenuIndicatorQuit>
    a944:	e3a00801 	mov	r0, #65536	; 0x10000
    a948:	eb0006b3 	bl	c41c <startTimer>
    a94c:	eaffffda 	b	a8bc <MainMenuPrompt>

0000a950 <StartGame>:
    a950:	ebffff59 	bl	a6bc <sampleSNES>
    a954:	eb000145 	bl	ae70 <tetrisInitGrid>
    a958:	eb000099 	bl	abc4 <DrawBoard>
    a95c:	eb000066 	bl	aafc <PauseMenuStart>
    a960:	eb0001b7 	bl	b044 <tetrisCreateNewBlock>
    a964:	e3a00003 	mov	r0, #3
    a968:	e3a01012 	mov	r1, #18
    a96c:	e59f2b00 	ldr	r2, [pc, #2816]	; b474 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x74>
    a970:	e92d0007 	push	{r0, r1, r2}
    a974:	eb000147 	bl	ae98 <tetrisSetGridBlockColor>
    a978:	e3a00004 	mov	r0, #4
    a97c:	e3a01012 	mov	r1, #18
    a980:	e59f2aec 	ldr	r2, [pc, #2796]	; b474 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x74>
    a984:	e92d0007 	push	{r0, r1, r2}
    a988:	eb000142 	bl	ae98 <tetrisSetGridBlockColor>
    a98c:	e3a00005 	mov	r0, #5
    a990:	e3a01012 	mov	r1, #18
    a994:	e59f2ad8 	ldr	r2, [pc, #2776]	; b474 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x74>
    a998:	e92d0007 	push	{r0, r1, r2}
    a99c:	eb00013d 	bl	ae98 <tetrisSetGridBlockColor>
    a9a0:	e3a00006 	mov	r0, #6
    a9a4:	e3a01012 	mov	r1, #18
    a9a8:	e59f2ac4 	ldr	r2, [pc, #2756]	; b474 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x74>
    a9ac:	e92d0007 	push	{r0, r1, r2}
    a9b0:	eb000138 	bl	ae98 <tetrisSetGridBlockColor>
    a9b4:	e3a00007 	mov	r0, #7
    a9b8:	e3a01012 	mov	r1, #18
    a9bc:	e59f2ab0 	ldr	r2, [pc, #2736]	; b474 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x74>
    a9c0:	e92d0007 	push	{r0, r1, r2}
    a9c4:	eb000133 	bl	ae98 <tetrisSetGridBlockColor>
    a9c8:	e3a00008 	mov	r0, #8
    a9cc:	e3a01012 	mov	r1, #18
    a9d0:	e59f2a9c 	ldr	r2, [pc, #2716]	; b474 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x74>
    a9d4:	e92d0007 	push	{r0, r1, r2}
    a9d8:	eb00012e 	bl	ae98 <tetrisSetGridBlockColor>
    a9dc:	e3a00009 	mov	r0, #9
    a9e0:	e3a01012 	mov	r1, #18
    a9e4:	e59f2a88 	ldr	r2, [pc, #2696]	; b474 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x74>
    a9e8:	e92d0007 	push	{r0, r1, r2}
    a9ec:	eb000129 	bl	ae98 <tetrisSetGridBlockColor>

0000a9f0 <mainLoop>:
    a9f0:	eb000157 	bl	af54 <tetrisDrawGrid>
    a9f4:	eb00019b 	bl	b068 <tetrisDrawBlock>

0000a9f8 <applyUserTranslation>:
    a9f8:	e3a00000 	mov	r0, #0
    a9fc:	e3a01000 	mov	r1, #0
    aa00:	eb000224 	bl	b298 <tetrisTranslateBlock>

0000aa04 <applyUserRotation>:
    aa04:	e3a00001 	mov	r0, #1
    aa08:	eb000203 	bl	b21c <tetrisRotateBlock>

0000aa0c <applyGravityTranslation>:
    aa0c:	e3a00000 	mov	r0, #0
    aa10:	e3a01001 	mov	r1, #1
    aa14:	eb00021f 	bl	b298 <tetrisTranslateBlock>
    aa18:	e3a00012 	mov	r0, #18
    aa1c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa20:	eb00000a 	bl	aa50 <tetrisGridIsRowComplete>
    aa24:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    aa28:	e3300000 	teq	r0, #0
    aa2c:	1a000000 	bne	aa34 <rowClear>
    aa30:	0a000002 	beq	aa40 <rowNotClear>

0000aa34 <rowClear>:
    aa34:	e3a00012 	mov	r0, #18
    aa38:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa3c:	eb00001e 	bl	aabc <tetrisGridClearRow>

0000aa40 <rowNotClear>:
    aa40:	e59f0a30 	ldr	r0, [pc, #2608]	; b478 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x78>
    aa44:	eb000674 	bl	c41c <startTimer>
    aa48:	eaffffe8 	b	a9f0 <mainLoop>

0000aa4c <mainEnd>:
    aa4c:	eafffffe 	b	aa4c <mainEnd>

0000aa50 <tetrisGridIsRowComplete>:
    aa50:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    aa54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aa58:	e92d00f0 	push	{r4, r5, r6, r7}
    aa5c:	e59f4a18 	ldr	r4, [pc, #2584]	; b47c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x7c>
    aa60:	e89400e0 	ldm	r4, {r5, r6, r7}
    aa64:	e59f8a14 	ldr	r8, [pc, #2580]	; b480 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x80>
    aa68:	e3a00000 	mov	r0, #0
    aa6c:	e3a03001 	mov	r3, #1
    aa70:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

0000aa74 <tetrisGridIsRowComplete_for_x_lessThan_cols_loop>:
    aa74:	e92d0003 	push	{r0, r1}
    aa78:	e92d0003 	push	{r0, r1}
    aa7c:	eb000115 	bl	aed8 <tetrisGetGridBlockColor>
    aa80:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)
    aa84:	e3330000 	teq	r3, #0
    aa88:	e8bd0003 	pop	{r0, r1}
    aa8c:	049d3004 	popeq	{r3}		; (ldreq r3, [sp], #4)
    aa90:	03a03000 	moveq	r3, #0
    aa94:	052d3004 	pusheq	{r3}		; (streq r3, [sp, #-4]!)
    aa98:	0a000002 	beq	aaa8 <tetrisGridIsRowCompleteEnd>
    aa9c:	e2800001 	add	r0, r0, #1
    aaa0:	e1500005 	cmp	r0, r5
    aaa4:	bafffff2 	blt	aa74 <tetrisGridIsRowComplete_for_x_lessThan_cols_loop>

0000aaa8 <tetrisGridIsRowCompleteEnd>:
    aaa8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    aaac:	e8bd00f0 	pop	{r4, r5, r6, r7}
    aab0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    aab4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aab8:	e1a0f00e 	mov	pc, lr

0000aabc <tetrisGridClearRow>:
    aabc:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    aac0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aac4:	e92d0070 	push	{r4, r5, r6}
    aac8:	e59f49ac 	ldr	r4, [pc, #2476]	; b47c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x7c>
    aacc:	e8940060 	ldm	r4, {r5, r6}
    aad0:	e3a00000 	mov	r0, #0

0000aad4 <tetrisGridClearRow_for_x_lessThan_cols_loop>:
    aad4:	e92d0003 	push	{r0, r1}
    aad8:	eb000117 	bl	af3c <tetrisClearGridBlock>
    aadc:	e8bd0003 	pop	{r0, r1}
    aae0:	0a000002 	beq	aaf0 <tetrisGridClearRowEnd>
    aae4:	e2800001 	add	r0, r0, #1
    aae8:	e1500005 	cmp	r0, r5
    aaec:	bafffff8 	blt	aad4 <tetrisGridClearRow_for_x_lessThan_cols_loop>

0000aaf0 <tetrisGridClearRowEnd>:
    aaf0:	e8bd0070 	pop	{r4, r5, r6}
    aaf4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    aaf8:	e1a0f00e 	mov	pc, lr

0000aafc <PauseMenuStart>:
    aafc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ab00:	eb000272 	bl	b4d0 <drawPauseMenu>
    ab04:	e3a09000 	mov	r9, #0

0000ab08 <PauseMenuPrompt>:
    ab08:	e59f0960 	ldr	r0, [pc, #2400]	; b470 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x70>
    ab0c:	eb000642 	bl	c41c <startTimer>
    ab10:	ebfffee9 	bl	a6bc <sampleSNES>
    ab14:	e1a0a000 	mov	sl, r0
    ab18:	e3e01008 	mvn	r1, #8
    ab1c:	e1c00001 	bic	r0, r0, r1
    ab20:	e3500000 	cmp	r0, #0
    ab24:	0a00000f 	beq	ab68 <PauseMenuStartPressed>
    ab28:	e1a0000a 	mov	r0, sl
    ab2c:	e3e01c01 	mvn	r1, #256	; 0x100
    ab30:	e1c00001 	bic	r0, r0, r1
    ab34:	e3500000 	cmp	r0, #0
    ab38:	0a00000c 	beq	ab70 <PauseMenuAPressed>
    ab3c:	e1a0000a 	mov	r0, sl
    ab40:	e3e01010 	mvn	r1, #16
    ab44:	e1c00001 	bic	r0, r0, r1
    ab48:	e3500000 	cmp	r0, #0
    ab4c:	0a00000d 	beq	ab88 <PauseMenuUpPressed>
    ab50:	e1a0000a 	mov	r0, sl
    ab54:	e3e01020 	mvn	r1, #32
    ab58:	e1c00001 	bic	r0, r0, r1
    ab5c:	e3500000 	cmp	r0, #0
    ab60:	0a00000f 	beq	aba4 <PauseMenuDownPressed>
    ab64:	eaffffe7 	b	ab08 <PauseMenuPrompt>

0000ab68 <PauseMenuStartPressed>:
    ab68:	eb000015 	bl	abc4 <DrawBoard>
    ab6c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ab70 <PauseMenuAPressed>:
    ab70:	e3590000 	cmp	r9, #0
    ab74:	e3a01000 	mov	r1, #0
    ab78:	e59f0904 	ldr	r0, [pc, #2308]	; b484 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x84>
    ab7c:	e5801000 	str	r1, [r0]
    ab80:	0affff72 	beq	a950 <StartGame>
    ab84:	eaffff49 	b	a8b0 <MainMenu>

0000ab88 <PauseMenuUpPressed>:
    ab88:	e3590000 	cmp	r9, #0
    ab8c:	0affffdd 	beq	ab08 <PauseMenuPrompt>
    ab90:	e3a09000 	mov	r9, #0
    ab94:	eb0002c7 	bl	b6b8 <setPauseMenuIndicatorRestart>
    ab98:	e3a00801 	mov	r0, #65536	; 0x10000
    ab9c:	eb00061e 	bl	c41c <startTimer>
    aba0:	eaffffd8 	b	ab08 <PauseMenuPrompt>

0000aba4 <PauseMenuDownPressed>:
    aba4:	e3590001 	cmp	r9, #1
    aba8:	0affffd6 	beq	ab08 <PauseMenuPrompt>
    abac:	e3a09001 	mov	r9, #1
    abb0:	eb0002d0 	bl	b6f8 <setPauseMenuIndicatorQuit>
    abb4:	e3a00801 	mov	r0, #65536	; 0x10000
    abb8:	eb000617 	bl	c41c <startTimer>
    abbc:	eaffffd1 	b	ab08 <PauseMenuPrompt>
    abc0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000abc4 <DrawBoard>:
    abc4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    abc8:	eb00009b 	bl	ae3c <ClearScreenBlack>
    abcc:	e3a00a0e 	mov	r0, #57344	; 0xe000
    abd0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abd4:	e3a00004 	mov	r0, #4
    abd8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abdc:	e3a00fa2 	mov	r0, #648	; 0x288
    abe0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abe4:	e3a0004c 	mov	r0, #76	; 0x4c
    abe8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abec:	e3a000bc 	mov	r0, #188	; 0xbc
    abf0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abf4:	eb0005ed 	bl	c3b0 <drawRect>
    abf8:	e3a00a0e 	mov	r0, #57344	; 0xe000
    abfc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac00:	e3a00004 	mov	r0, #4
    ac04:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac08:	e3a00fa2 	mov	r0, #648	; 0x288
    ac0c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac10:	e3a00e2b 	mov	r0, #688	; 0x2b0
    ac14:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac18:	e3a000bc 	mov	r0, #188	; 0xbc
    ac1c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac20:	eb0005e2 	bl	c3b0 <drawRect>
    ac24:	e3a00a0e 	mov	r0, #57344	; 0xe000
    ac28:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac2c:	e3a00e26 	mov	r0, #608	; 0x260
    ac30:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac34:	e3a00004 	mov	r0, #4
    ac38:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac3c:	e3a00050 	mov	r0, #80	; 0x50
    ac40:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac44:	e3a000bc 	mov	r0, #188	; 0xbc
    ac48:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac4c:	eb0005d7 	bl	c3b0 <drawRect>
    ac50:	e3a00a0e 	mov	r0, #57344	; 0xe000
    ac54:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac58:	e3a00e26 	mov	r0, #608	; 0x260
    ac5c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac60:	e3a00004 	mov	r0, #4
    ac64:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac68:	e3a00050 	mov	r0, #80	; 0x50
    ac6c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac70:	e3a00c02 	mov	r0, #512	; 0x200
    ac74:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac78:	eb0005cc 	bl	c3b0 <drawRect>
    ac7c:	e3a00a0e 	mov	r0, #57344	; 0xe000
    ac80:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac84:	e3a00e26 	mov	r0, #608	; 0x260
    ac88:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac8c:	e3a00004 	mov	r0, #4
    ac90:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac94:	e3a00050 	mov	r0, #80	; 0x50
    ac98:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac9c:	e3a00d0d 	mov	r0, #832	; 0x340
    aca0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aca4:	eb0005c1 	bl	c3b0 <drawRect>
    aca8:	e59f07d8 	ldr	r0, [pc, #2008]	; b488 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x88>
    acac:	e59f17d8 	ldr	r1, [pc, #2008]	; b48c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x8c>
    acb0:	e59f27d8 	ldr	r2, [pc, #2008]	; b490 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x90>
    acb4:	e3a030e6 	mov	r3, #230	; 0xe6
    acb8:	eb00026d 	bl	b674 <WriteSentence>
    acbc:	e59f07c8 	ldr	r0, [pc, #1992]	; b48c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x8c>
    acc0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    acc4:	e3a00036 	mov	r0, #54	; 0x36
    acc8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    accc:	e3a00036 	mov	r0, #54	; 0x36
    acd0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    acd4:	e3a000d3 	mov	r0, #211	; 0xd3
    acd8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    acdc:	e59f07b0 	ldr	r0, [pc, #1968]	; b494 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x94>
    ace0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ace4:	eb0005b1 	bl	c3b0 <drawRect>
    ace8:	e59f07a8 	ldr	r0, [pc, #1960]	; b498 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x98>
    acec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    acf0:	e3a00032 	mov	r0, #50	; 0x32
    acf4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    acf8:	e3a00032 	mov	r0, #50	; 0x32
    acfc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad00:	e3a000d5 	mov	r0, #213	; 0xd5
    ad04:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad08:	e59f078c 	ldr	r0, [pc, #1932]	; b49c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x9c>
    ad0c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad10:	eb0005a6 	bl	c3b0 <drawRect>
    ad14:	e59f0784 	ldr	r0, [pc, #1924]	; b4a0 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xa0>
    ad18:	e59f1784 	ldr	r1, [pc, #1924]	; b4a4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xa4>
    ad1c:	e59f2784 	ldr	r2, [pc, #1924]	; b4a8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xa8>
    ad20:	e59f3784 	ldr	r3, [pc, #1924]	; b4ac <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xac>
    ad24:	eb000252 	bl	b674 <WriteSentence>
    ad28:	e59f0774 	ldr	r0, [pc, #1908]	; b4a4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xa4>
    ad2c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad30:	e3a00088 	mov	r0, #136	; 0x88
    ad34:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad38:	e3a00088 	mov	r0, #136	; 0x88
    ad3c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad40:	e3a00e21 	mov	r0, #528	; 0x210
    ad44:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad48:	e3a00fa1 	mov	r0, #644	; 0x284
    ad4c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad50:	eb000596 	bl	c3b0 <drawRect>
    ad54:	e59f073c 	ldr	r0, [pc, #1852]	; b498 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x98>
    ad58:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad5c:	e3a00084 	mov	r0, #132	; 0x84
    ad60:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad64:	e3a00084 	mov	r0, #132	; 0x84
    ad68:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad6c:	e59f073c 	ldr	r0, [pc, #1852]	; b4b0 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xb0>
    ad70:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad74:	e59f0738 	ldr	r0, [pc, #1848]	; b4b4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xb4>
    ad78:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad7c:	eb00058b 	bl	c3b0 <drawRect>
    ad80:	eb000000 	bl	ad88 <UpdateScore>
    ad84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ad88 <UpdateScore>:
    ad88:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ad8c:	e59f0704 	ldr	r0, [pc, #1796]	; b498 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x98>
    ad90:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad94:	e3a00014 	mov	r0, #20
    ad98:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ad9c:	e3a00018 	mov	r0, #24
    ada0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ada4:	e3a000e4 	mov	r0, #228	; 0xe4
    ada8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    adac:	e59f0704 	ldr	r0, [pc, #1796]	; b4b8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xb8>
    adb0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    adb4:	eb00057d 	bl	c3b0 <drawRect>
    adb8:	e59f06c4 	ldr	r0, [pc, #1732]	; b484 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x84>
    adbc:	e5901000 	ldr	r1, [r0]
    adc0:	e3510063 	cmp	r1, #99	; 0x63
    adc4:	ca000011 	bgt	ae10 <threeDigitScore>
    adc8:	e3510009 	cmp	r1, #9
    adcc:	ca000003 	bgt	ade0 <twoDigitScore>

0000add0 <oneDigitScore>:
    add0:	e59f06e4 	ldr	r0, [pc, #1764]	; b4bc <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xbc>
    add4:	e2811030 	add	r1, r1, #48	; 0x30
    add8:	e5c01006 	strb	r1, [r0, #6]
    addc:	ea000010 	b	ae24 <PrintScore>

0000ade0 <twoDigitScore>:
    ade0:	e59f06d4 	ldr	r0, [pc, #1748]	; b4bc <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xbc>
    ade4:	e3a02000 	mov	r2, #0

0000ade8 <twoDigitScoreLoop>:
    ade8:	e351000a 	cmp	r1, #10
    adec:	ba000002 	blt	adfc <twoDigitScoreLoopDone>
    adf0:	e241100a 	sub	r1, r1, #10
    adf4:	e2822001 	add	r2, r2, #1
    adf8:	eafffffa 	b	ade8 <twoDigitScoreLoop>

0000adfc <twoDigitScoreLoopDone>:
    adfc:	e2811030 	add	r1, r1, #48	; 0x30
    ae00:	e2822030 	add	r2, r2, #48	; 0x30
    ae04:	e5c02005 	strb	r2, [r0, #5]
    ae08:	e5c01006 	strb	r1, [r0, #6]
    ae0c:	ea000004 	b	ae24 <PrintScore>

0000ae10 <threeDigitScore>:
    ae10:	e2411064 	sub	r1, r1, #100	; 0x64
    ae14:	e59f06a0 	ldr	r0, [pc, #1696]	; b4bc <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xbc>
    ae18:	e3a02031 	mov	r2, #49	; 0x31
    ae1c:	e5c02004 	strb	r2, [r0, #4]
    ae20:	eaffffee 	b	ade0 <twoDigitScore>

0000ae24 <PrintScore>:
    ae24:	e59f0690 	ldr	r0, [pc, #1680]	; b4bc <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xbc>
    ae28:	e3a01000 	mov	r1, #0
    ae2c:	e59f2684 	ldr	r2, [pc, #1668]	; b4b8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xb8>
    ae30:	e3a030e6 	mov	r3, #230	; 0xe6
    ae34:	eb00020e 	bl	b674 <WriteSentence>
    ae38:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ae3c <ClearScreenBlack>:
    ae3c:	e92d4600 	push	{r9, sl, lr}
    ae40:	e59f0678 	ldr	r0, [pc, #1656]	; b4c0 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xc0>
    ae44:	e5909014 	ldr	r9, [r0, #20]
    ae48:	e590a018 	ldr	sl, [r0, #24]
    ae4c:	e3a00000 	mov	r0, #0
    ae50:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ae54:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    ae58:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    ae5c:	e3a00000 	mov	r0, #0
    ae60:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ae64:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ae68:	eb000550 	bl	c3b0 <drawRect>
    ae6c:	e8bd8600 	pop	{r9, sl, pc}

0000ae70 <tetrisInitGrid>:
    ae70:	e59f0604 	ldr	r0, [pc, #1540]	; b47c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x7c>
    ae74:	e280100c 	add	r1, r0, #12
    ae78:	e59f2600 	ldr	r2, [pc, #1536]	; b480 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x80>
    ae7c:	e3a03000 	mov	r3, #0

0000ae80 <forEach_block_in_tetrisGrid_loop>:
    ae80:	e5813000 	str	r3, [r1]
    ae84:	e2811004 	add	r1, r1, #4
    ae88:	e1510002 	cmp	r1, r2
    ae8c:	aa000000 	bge	ae94 <forEach_block_in_tetrisGrid_loopEnd>
    ae90:	bafffffa 	blt	ae80 <forEach_block_in_tetrisGrid_loop>

0000ae94 <forEach_block_in_tetrisGrid_loopEnd>:
    ae94:	e1a0f00e 	mov	pc, lr

0000ae98 <tetrisSetGridBlockColor>:
    ae98:	e8bd0007 	pop	{r0, r1, r2}
    ae9c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aea0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aea4:	e59f35d0 	ldr	r3, [pc, #1488]	; b47c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x7c>
    aea8:	e8930070 	ldm	r3, {r4, r5, r6}
    aeac:	e283700c 	add	r7, r3, #12
    aeb0:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    aeb4:	e92d0013 	push	{r0, r1, r4}
    aeb8:	eb000552 	bl	c408 <positionToArrayOffset>
    aebc:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    aec0:	e1a08108 	lsl	r8, r8, #2
    aec4:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
    aec8:	e7872008 	str	r2, [r7, r8]
    aecc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    aed0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    aed4:	e1a0f00e 	mov	pc, lr

0000aed8 <tetrisGetGridBlockColor>:
    aed8:	e8bd0006 	pop	{r1, r2}
    aedc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aee0:	e92d03f0 	push	{r4, r5, r6, r7, r8, r9}
    aee4:	e59f3590 	ldr	r3, [pc, #1424]	; b47c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x7c>
    aee8:	e8930070 	ldm	r3, {r4, r5, r6}
    aeec:	e283700c 	add	r7, r3, #12
    aef0:	e3e094ff 	mvn	r9, #-16777216	; 0xff000000
    aef4:	e3510000 	cmp	r1, #0
    aef8:	ba00000a 	blt	af28 <tetrisGetGridBlockColorEnd>
    aefc:	e1510004 	cmp	r1, r4
    af00:	aa000008 	bge	af28 <tetrisGetGridBlockColorEnd>
    af04:	e3520000 	cmp	r2, #0
    af08:	ba000006 	blt	af28 <tetrisGetGridBlockColorEnd>
    af0c:	e1520005 	cmp	r2, r5
    af10:	aa000004 	bge	af28 <tetrisGetGridBlockColorEnd>

0000af14 <tetrisGetGridBlockColor_validInput>:
    af14:	e92d0016 	push	{r1, r2, r4}
    af18:	eb00053a 	bl	c408 <positionToArrayOffset>
    af1c:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    af20:	e1a08108 	lsl	r8, r8, #2
    af24:	e7979008 	ldr	r9, [r7, r8]

0000af28 <tetrisGetGridBlockColorEnd>:
    af28:	e1a00009 	mov	r0, r9
    af2c:	e8bd03f0 	pop	{r4, r5, r6, r7, r8, r9}
    af30:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    af34:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    af38:	e1a0f00e 	mov	pc, lr

0000af3c <tetrisClearGridBlock>:
    af3c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    af40:	e3a02000 	mov	r2, #0
    af44:	e92d0007 	push	{r0, r1, r2}
    af48:	ebffffd2 	bl	ae98 <tetrisSetGridBlockColor>
    af4c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    af50:	e1a0f00e 	mov	pc, lr

0000af54 <tetrisDrawGrid>:
    af54:	e1a0000d 	mov	r0, sp
    af58:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    af5c:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    af60:	e59f7514 	ldr	r7, [pc, #1300]	; b47c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x7c>
    af64:	e8970700 	ldm	r7, {r8, r9, sl}
    af68:	e287b00c 	add	fp, r7, #12
    af6c:	e1a07000 	mov	r7, r0
    af70:	e3a04000 	mov	r4, #0
    af74:	e3a05000 	mov	r5, #0
    af78:	e3a06000 	mov	r6, #0

0000af7c <tetrisDrawGrid_for_curCol_lessThan_cols_loop>:
    af7c:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000af80 <tetrisDrawGrid_for_curRow_lessThan_rows_loop>:
    af80:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    af84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    af88:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    af8c:	e89707c0 	ldm	r7, {r6, r7, r8, r9, sl}
    af90:	e92d07c0 	push	{r6, r7, r8, r9, sl}
    af94:	e92d0030 	push	{r4, r5}
    af98:	eb0000e1 	bl	b324 <tetrisBlockHasDataForGridPoint>
    af9c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    afa0:	e3300000 	teq	r0, #0
    afa4:	e8bd07c0 	pop	{r6, r7, r8, r9, sl}
    afa8:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    afac:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    afb0:	1a00000d 	bne	afec <tetrisDrawGridBlockEnd>

0000afb4 <tetrisDrawGridBlock>:
    afb4:	e92d0130 	push	{r4, r5, r8}
    afb8:	eb000512 	bl	c408 <positionToArrayOffset>
    afbc:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    afc0:	e1a0c10c 	lsl	ip, ip, #2
    afc4:	e79b600c 	ldr	r6, [fp, ip]
    afc8:	e92d000f 	push	{r0, r1, r2, r3}
    afcc:	e92d0030 	push	{r4, r5}
    afd0:	eb000010 	bl	b018 <tetrisGetRectForGridPosition>
    afd4:	e8bd000f 	pop	{r0, r1, r2, r3}
    afd8:	e28000c0 	add	r0, r0, #192	; 0xc0
    afdc:	e2811050 	add	r1, r1, #80	; 0x50
    afe0:	e92d004f 	push	{r0, r1, r2, r3, r6}
    afe4:	eb0004f1 	bl	c3b0 <drawRect>
    afe8:	e8bd000f 	pop	{r0, r1, r2, r3}

0000afec <tetrisDrawGridBlockEnd>:
    afec:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    aff0:	e2855001 	add	r5, r5, #1
    aff4:	e1550009 	cmp	r5, r9
    aff8:	baffffe0 	blt	af80 <tetrisDrawGrid_for_curRow_lessThan_rows_loop>
    affc:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    b000:	e2844001 	add	r4, r4, #1
    b004:	e1540008 	cmp	r4, r8
    b008:	baffffdb 	blt	af7c <tetrisDrawGrid_for_curCol_lessThan_cols_loop>
    b00c:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    b010:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b014:	e1a0f00e 	mov	pc, lr

0000b018 <tetrisGetRectForGridPosition>:
    b018:	e8bd0003 	pop	{r0, r1}
    b01c:	e92d00f0 	push	{r4, r5, r6, r7}
    b020:	e59f4454 	ldr	r4, [pc, #1108]	; b47c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x7c>
    b024:	e89400e0 	ldm	r4, {r5, r6, r7}
    b028:	e1a02007 	mov	r2, r7
    b02c:	e1a03007 	mov	r3, r7
    b030:	e0000092 	mul	r0, r2, r0
    b034:	e0010193 	mul	r1, r3, r1
    b038:	e8bd00f0 	pop	{r4, r5, r6, r7}
    b03c:	e92d000f 	push	{r0, r1, r2, r3}
    b040:	e1a0f00e 	mov	pc, lr

0000b044 <tetrisCreateNewBlock>:
    b044:	e59f0478 	ldr	r0, [pc, #1144]	; b4c4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xc4>
    b048:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}

0000b04c <initializeTetrisBlock>:
    b04c:	e3a04000 	mov	r4, #0
    b050:	e3a05000 	mov	r5, #0
    b054:	e59f646c 	ldr	r6, [pc, #1132]	; b4c8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xc8>
    b058:	e59f746c 	ldr	r7, [pc, #1132]	; b4cc <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xcc>
    b05c:	e3a08000 	mov	r8, #0

0000b060 <initializeTetrisBlockEnd>:
    b060:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b064:	e1a0f00e 	mov	pc, lr

0000b068 <tetrisDrawBlock>:
    b068:	e1a0000d 	mov	r0, sp
    b06c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b070:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b074:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b078:	e92d1800 	push	{fp, ip}
    b07c:	e3a0b000 	mov	fp, #0
    b080:	e3a0c000 	mov	ip, #0

0000b084 <for_i_lessThan_4_loop>:
    b084:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000b088 <for_j_lessThan_4_loop>:
    b088:	e92d0070 	push	{r4, r5, r6}
    b08c:	e19720b8 	ldrh	r2, [r7, r8]
    b090:	e084400b 	add	r4, r4, fp
    b094:	e085500c 	add	r5, r5, ip
    b098:	e3a01004 	mov	r1, #4
    b09c:	e0010c91 	mul	r1, r1, ip
    b0a0:	e081100b 	add	r1, r1, fp
    b0a4:	e1a02112 	lsl	r2, r2, r1
    b0a8:	e3a01902 	mov	r1, #32768	; 0x8000
    b0ac:	e0011002 	and	r1, r1, r2
    b0b0:	e3310000 	teq	r1, #0
    b0b4:	e52d6004 	push	{r6}		; (str r6, [sp, #-4]!)
    b0b8:	03a06000 	moveq	r6, #0
    b0bc:	0a00000a 	beq	b0ec <blockHasNoData>

0000b0c0 <blockHasData>:
    b0c0:	e92d000f 	push	{r0, r1, r2, r3}
    b0c4:	e320f000 	nop	{0}
    b0c8:	e92d0030 	push	{r4, r5}
    b0cc:	ebffffd1 	bl	b018 <tetrisGetRectForGridPosition>
    b0d0:	e8bd000f 	pop	{r0, r1, r2, r3}
    b0d4:	e320f000 	nop	{0}
    b0d8:	e28000c0 	add	r0, r0, #192	; 0xc0
    b0dc:	e2811050 	add	r1, r1, #80	; 0x50
    b0e0:	e92d004f 	push	{r0, r1, r2, r3, r6}
    b0e4:	eb0004b1 	bl	c3b0 <drawRect>
    b0e8:	e8bd000f 	pop	{r0, r1, r2, r3}

0000b0ec <blockHasNoData>:
    b0ec:	e49d6004 	pop	{r6}		; (ldr r6, [sp], #4)
    b0f0:	e8bd0070 	pop	{r4, r5, r6}
    b0f4:	e28cc001 	add	ip, ip, #1
    b0f8:	e35c0004 	cmp	ip, #4
    b0fc:	baffffe1 	blt	b088 <for_j_lessThan_4_loop>
    b100:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    b104:	e28bb001 	add	fp, fp, #1
    b108:	e35b0004 	cmp	fp, #4
    b10c:	baffffdc 	blt	b084 <for_i_lessThan_4_loop>
    b110:	e8bd1800 	pop	{fp, ip}
    b114:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b118:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b11c:	e1a0f00e 	mov	pc, lr

0000b120 <tetrisCheckBlockGridCollisions>:
    b120:	e1a0000d 	mov	r0, sp
    b124:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b128:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b12c:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b130:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b134:	eb0000a8 	bl	b3dc <tetrisGetGridBitmaskForBlock>
    b138:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b13c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b140:	e320f000 	nop	{0}
    b144:	e19710b8 	ldrh	r1, [r7, r8]
    b148:	e0000001 	and	r0, r0, r1
    b14c:	e3500000 	cmp	r0, #0
    b150:	13a00001 	movne	r0, #1
    b154:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b158:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b15c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b160:	e1a0f00e 	mov	pc, lr

0000b164 <tetrisOnBlockCollision>:
    b164:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b168:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b16c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b170:	e19730b8 	ldrh	r3, [r7, r8]
    b174:	e320f000 	nop	{0}
    b178:	eb000005 	bl	b194 <writeBlockToGrid>
    b17c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b180:	ebffffaf 	bl	b044 <tetrisCreateNewBlock>
    b184:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b188:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b18c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b190:	e1a0f00e 	mov	pc, lr

0000b194 <writeBlockToGrid>:
    b194:	e1a0000d 	mov	r0, sp
    b198:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b19c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b1a0:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b1a4:	e92d1800 	push	{fp, ip}
    b1a8:	e3a0b000 	mov	fp, #0
    b1ac:	e3a0c000 	mov	ip, #0

0000b1b0 <writeBlockToGrid_for_i_lessThan_4_loop>:
    b1b0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000b1b4 <writeBlockToGrid_for_j_lessThan_4_loop>:
    b1b4:	e92d0070 	push	{r4, r5, r6}
    b1b8:	e19720b8 	ldrh	r2, [r7, r8]
    b1bc:	e084400b 	add	r4, r4, fp
    b1c0:	e085500c 	add	r5, r5, ip
    b1c4:	e3a01004 	mov	r1, #4
    b1c8:	e0010c91 	mul	r1, r1, ip
    b1cc:	e081100b 	add	r1, r1, fp
    b1d0:	e1a02112 	lsl	r2, r2, r1
    b1d4:	e3a01902 	mov	r1, #32768	; 0x8000
    b1d8:	e0011002 	and	r1, r1, r2
    b1dc:	e3310000 	teq	r1, #0
    b1e0:	0a000001 	beq	b1ec <writeBlockToGrid_blockHasNoData>

0000b1e4 <writeBlockToGrid_blockHasData>:
    b1e4:	e92d0070 	push	{r4, r5, r6}
    b1e8:	ebffff2a 	bl	ae98 <tetrisSetGridBlockColor>

0000b1ec <writeBlockToGrid_blockHasNoData>:
    b1ec:	e8bd0070 	pop	{r4, r5, r6}
    b1f0:	e28cc001 	add	ip, ip, #1
    b1f4:	e35c0004 	cmp	ip, #4
    b1f8:	baffffed 	blt	b1b4 <writeBlockToGrid_for_j_lessThan_4_loop>
    b1fc:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    b200:	e28bb001 	add	fp, fp, #1
    b204:	e35b0004 	cmp	fp, #4
    b208:	baffffe8 	blt	b1b0 <writeBlockToGrid_for_i_lessThan_4_loop>
    b20c:	e8bd1800 	pop	{fp, ip}
    b210:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b214:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b218:	e1a0f00e 	mov	pc, lr

0000b21c <tetrisRotateBlock>:
    b21c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b220:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b224:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b228:	e3300000 	teq	r0, #0
    b22c:	0a000000 	beq	b234 <handleRotateLeft>
    b230:	1a000003 	bne	b244 <handleRotateRight>

0000b234 <handleRotateLeft>:
    b234:	e2888002 	add	r8, r8, #2
    b238:	e3580006 	cmp	r8, #6
    b23c:	c3a08000 	movgt	r8, #0
    b240:	ea000003 	b	b254 <handleRotateEnd>

0000b244 <handleRotateRight>:
    b244:	e2488002 	sub	r8, r8, #2
    b248:	e3580000 	cmp	r8, #0
    b24c:	b3a08006 	movlt	r8, #6
    b250:	eaffffff 	b	b254 <handleRotateEnd>

0000b254 <handleRotateEnd>:
    b254:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b258:	ebffffb0 	bl	b120 <tetrisCheckBlockGridCollisions>
    b25c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b260:	e3300000 	teq	r0, #0
    b264:	1a000000 	bne	b26c <onRotationCollision>
    b268:	0a000004 	beq	b280 <onNoRotationCollision>

0000b26c <onRotationCollision>:
    b26c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b270:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b274:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b278:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b27c:	ea000004 	b	b294 <tetrisRotateBlockEnd>

0000b280 <onNoRotationCollision>:
    b280:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b284:	028dd014 	addeq	sp, sp, #20
    b288:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b28c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b290:	eaffffff 	b	b294 <tetrisRotateBlockEnd>

0000b294 <tetrisRotateBlockEnd>:
    b294:	e1a0f00e 	mov	pc, lr

0000b298 <tetrisTranslateBlock>:
    b298:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b29c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b2a0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b2a4:	e0844000 	add	r4, r4, r0
    b2a8:	e0855001 	add	r5, r5, r1
    b2ac:	e92d0003 	push	{r0, r1}
    b2b0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b2b4:	ebffff99 	bl	b120 <tetrisCheckBlockGridCollisions>
    b2b8:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)
    b2bc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b2c0:	e8bd0003 	pop	{r0, r1}
    b2c4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b2c8:	e3330000 	teq	r3, #0
    b2cc:	1a000000 	bne	b2d4 <onTranslationCollision>
    b2d0:	0a00000d 	beq	b30c <onNoTranslationCollision>

0000b2d4 <onTranslationCollision>:
    b2d4:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b2d8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b2dc:	e3310000 	teq	r1, #0
    b2e0:	0a000000 	beq	b2e8 <onTranslationCollision_Horizontal>
    b2e4:	1a000002 	bne	b2f4 <onTranslationCollision_Vertical>

0000b2e8 <onTranslationCollision_Horizontal>:
    b2e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b2ec:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b2f0:	ea00000a 	b	b320 <tetrisTranslateBlockEnd>

0000b2f4 <onTranslationCollision_Vertical>:
    b2f4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b2f8:	ebffff99 	bl	b164 <tetrisOnBlockCollision>
    b2fc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b300:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b304:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b308:	ea000004 	b	b320 <tetrisTranslateBlockEnd>

0000b30c <onNoTranslationCollision>:
    b30c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b310:	028dd014 	addeq	sp, sp, #20
    b314:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b318:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b31c:	eaffffff 	b	b320 <tetrisTranslateBlockEnd>

0000b320 <tetrisTranslateBlockEnd>:
    b320:	e1a0f00e 	mov	pc, lr

0000b324 <tetrisBlockHasDataForGridPoint>:
    b324:	e8bd0003 	pop	{r0, r1}
    b328:	e89d01f0 	ldm	sp, {r4, r5, r6, r7, r8}
    b32c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b330:	e92d0003 	push	{r0, r1}
    b334:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b338:	e92d0003 	push	{r0, r1}
    b33c:	eb000013 	bl	b390 <tetrisBlockContainsGridPoint>
    b340:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
    b344:	e3320000 	teq	r2, #0
    b348:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b34c:	e8bd0003 	pop	{r0, r1}
    b350:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b354:	052d2004 	pusheq	{r2}		; (streq r2, [sp, #-4]!)
    b358:	0a00000b 	beq	b38c <tetrisBlockHasDataForGridLocationEnd>
    b35c:	e0440000 	sub	r0, r4, r0
    b360:	e0451001 	sub	r1, r5, r1
    b364:	e19730b8 	ldrh	r3, [r7, r8]
    b368:	e3a02004 	mov	r2, #4
    b36c:	e0020192 	mul	r2, r2, r1
    b370:	e0822000 	add	r2, r2, r0
    b374:	e1a03213 	lsl	r3, r3, r2
    b378:	e3a02902 	mov	r2, #32768	; 0x8000
    b37c:	e0022003 	and	r2, r2, r3
    b380:	e3320000 	teq	r2, #0
    b384:	13a02001 	movne	r2, #1
    b388:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)

0000b38c <tetrisBlockHasDataForGridLocationEnd>:
    b38c:	e1a0f00e 	mov	pc, lr

0000b390 <tetrisBlockContainsGridPoint>:
    b390:	e8bd0003 	pop	{r0, r1}
    b394:	e89d01f0 	ldm	sp, {r4, r5, r6, r7, r8}
    b398:	e3a02001 	mov	r2, #1
    b39c:	e1500004 	cmp	r0, r4
    b3a0:	b3a02000 	movlt	r2, #0
    b3a4:	ba00000a 	blt	b3d4 <tetrisBlockContainsGridPointEnd>
    b3a8:	e2844004 	add	r4, r4, #4
    b3ac:	e1500004 	cmp	r0, r4
    b3b0:	a3a02000 	movge	r2, #0
    b3b4:	aa000006 	bge	b3d4 <tetrisBlockContainsGridPointEnd>
    b3b8:	e1510005 	cmp	r1, r5
    b3bc:	b3a02000 	movlt	r2, #0
    b3c0:	ba000003 	blt	b3d4 <tetrisBlockContainsGridPointEnd>
    b3c4:	e2855004 	add	r5, r5, #4
    b3c8:	e1510005 	cmp	r1, r5
    b3cc:	a3a02000 	movge	r2, #0
    b3d0:	aaffffff 	bge	b3d4 <tetrisBlockContainsGridPointEnd>

0000b3d4 <tetrisBlockContainsGridPointEnd>:
    b3d4:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    b3d8:	e1a0f00e 	mov	pc, lr

0000b3dc <tetrisGetGridBitmaskForBlock>:
    b3dc:	e1a0000d 	mov	r0, sp
    b3e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b3e4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b3e8:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b3ec:	e92d1800 	push	{fp, ip}
    b3f0:	e3a00000 	mov	r0, #0
    b3f4:	e3a0b000 	mov	fp, #0
    b3f8:	e3a0c000 	mov	ip, #0

0000b3fc <tetrisGetGridBitmaskForBlock_for_i_lessThan_4_loop>:
    b3fc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000b400 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop>:
    b400:	e92d0070 	push	{r4, r5, r6}
    b404:	e084400b 	add	r4, r4, fp
    b408:	e085500c 	add	r5, r5, ip
    b40c:	e92d1801 	push	{r0, fp, ip}
    b410:	e92d0030 	push	{r4, r5}
    b414:	ebfffeaf 	bl	aed8 <tetrisGetGridBlockColor>
    b418:	e49d6004 	pop	{r6}		; (ldr r6, [sp], #4)
    b41c:	e8bd1801 	pop	{r0, fp, ip}
    b420:	e3360000 	teq	r6, #0
    b424:	13a01004 	movne	r1, #4
    b428:	1001019c 	mulne	r1, ip, r1
    b42c:	1081100b 	addne	r1, r1, fp
    b430:	13a02902 	movne	r2, #32768	; 0x8000
    b434:	11a02132 	lsrne	r2, r2, r1
    b438:	11800002 	orrne	r0, r0, r2
    b43c:	e8bd0070 	pop	{r4, r5, r6}
    b440:	e28cc001 	add	ip, ip, #1
    b444:	e35c0004 	cmp	ip, #4
    b448:	baffffec 	blt	b400 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop>
    b44c:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    b450:	e28bb001 	add	fp, fp, #1
    b454:	e35b0004 	cmp	fp, #4
    b458:	baffffe7 	blt	b3fc <tetrisGetGridBitmaskForBlock_for_i_lessThan_4_loop>
    b45c:	e8bd1800 	pop	{fp, ip}
    b460:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b464:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b468:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b46c:	e1a0f00e 	mov	pc, lr
    b470:	00002710 	.word	0x00002710
    b474:	00abc777 	.word	0x00abc777
    b478:	000fffff 	.word	0x000fffff
    b47c:	000090f0 	.word	0x000090f0
    b480:	000093f4 	.word	0x000093f4
    b484:	00009cb0 	.word	0x00009cb0
    b488:	00009c90 	.word	0x00009c90
    b48c:	000034a0 	.word	0x000034a0
    b490:	00000269 	.word	0x00000269
    b494:	00000297 	.word	0x00000297
    b498:	0000adb5 	.word	0x0000adb5
    b49c:	00000299 	.word	0x00000299
    b4a0:	00009cb4 	.word	0x00009cb4
    b4a4:	00000618 	.word	0x00000618
    b4a8:	0000023e 	.word	0x0000023e
    b4ac:	0000024a 	.word	0x0000024a
    b4b0:	00000212 	.word	0x00000212
    b4b4:	00000286 	.word	0x00000286
    b4b8:	000002a6 	.word	0x000002a6
    b4bc:	00009ca0 	.word	0x00009ca0
    b4c0:	00009080 	.word	0x00009080
    b4c4:	000093f4 	.word	0x000093f4
    b4c8:	009999ff 	.word	0x009999ff
    b4cc:	00009430 	.word	0x00009430

0000b4d0 <drawPauseMenu>:
    b4d0:	e92d4010 	push	{r4, lr}
    b4d4:	e59f4d84 	ldr	r4, [pc, #3460]	; c260 <noPixel$+0x20>
    b4d8:	e3a03f7d 	mov	r3, #500	; 0x1f4
    b4dc:	e3a02f96 	mov	r2, #600	; 0x258
    b4e0:	e3a01086 	mov	r1, #134	; 0x86
    b4e4:	e3a000d0 	mov	r0, #208	; 0xd0
    b4e8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b4ec:	eb0003af 	bl	c3b0 <drawRect>
    b4f0:	e3a04902 	mov	r4, #32768	; 0x8000
    b4f4:	e3a03004 	mov	r3, #4
    b4f8:	e3a02e26 	mov	r2, #608	; 0x260
    b4fc:	e3a01082 	mov	r1, #130	; 0x82
    b500:	e3a000cc 	mov	r0, #204	; 0xcc
    b504:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b508:	eb0003a8 	bl	c3b0 <drawRect>
    b50c:	e3a04902 	mov	r4, #32768	; 0x8000
    b510:	e3a03004 	mov	r3, #4
    b514:	e3a02e26 	mov	r2, #608	; 0x260
    b518:	e59f1d44 	ldr	r1, [pc, #3396]	; c264 <noPixel$+0x24>
    b51c:	e3a000cc 	mov	r0, #204	; 0xcc
    b520:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b524:	eb0003a1 	bl	c3b0 <drawRect>
    b528:	e3a04902 	mov	r4, #32768	; 0x8000
    b52c:	e3a03f7d 	mov	r3, #500	; 0x1f4
    b530:	e3a02004 	mov	r2, #4
    b534:	e3a01086 	mov	r1, #134	; 0x86
    b538:	e3a000cc 	mov	r0, #204	; 0xcc
    b53c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b540:	eb00039a 	bl	c3b0 <drawRect>
    b544:	e3a04902 	mov	r4, #32768	; 0x8000
    b548:	e3a03f7d 	mov	r3, #500	; 0x1f4
    b54c:	e3a02004 	mov	r2, #4
    b550:	e3a01086 	mov	r1, #134	; 0x86
    b554:	e3a00fca 	mov	r0, #808	; 0x328
    b558:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b55c:	eb000393 	bl	c3b0 <drawRect>
    b560:	eb000213 	bl	bdb4 <drawPaused>
    b564:	e59f0cfc 	ldr	r0, [pc, #3324]	; c268 <noPixel$+0x28>
    b568:	e3a01e1d 	mov	r1, #464	; 0x1d0
    b56c:	eb0001f3 	bl	bd40 <drawMenuButton>
    b570:	e59f0cf4 	ldr	r0, [pc, #3316]	; c26c <noPixel$+0x2c>
    b574:	e3a01000 	mov	r1, #0
    b578:	e59f2cf0 	ldr	r2, [pc, #3312]	; c270 <noPixel$+0x30>
    b57c:	e59f3cec 	ldr	r3, [pc, #3308]	; c270 <noPixel$+0x30>
    b580:	eb00003b 	bl	b674 <WriteSentence>
    b584:	e59f0cdc 	ldr	r0, [pc, #3292]	; c268 <noPixel$+0x28>
    b588:	e59f1ce4 	ldr	r1, [pc, #3300]	; c274 <noPixel$+0x34>
    b58c:	eb0001eb 	bl	bd40 <drawMenuButton>
    b590:	e59f0ce0 	ldr	r0, [pc, #3296]	; c278 <noPixel$+0x38>
    b594:	e3a01000 	mov	r1, #0
    b598:	e59f2cdc 	ldr	r2, [pc, #3292]	; c27c <noPixel$+0x3c>
    b59c:	e3a03f8d 	mov	r3, #564	; 0x234
    b5a0:	eb000033 	bl	b674 <WriteSentence>
    b5a4:	eb000043 	bl	b6b8 <setPauseMenuIndicatorRestart>
    b5a8:	e8bd8010 	pop	{r4, pc}

0000b5ac <drawMainMenu>:
    b5ac:	e92d4610 	push	{r4, r9, sl, lr}
    b5b0:	e59f0cc8 	ldr	r0, [pc, #3272]	; c280 <noPixel$+0x40>
    b5b4:	e5909014 	ldr	r9, [r0, #20]
    b5b8:	e590a018 	ldr	sl, [r0, #24]
    b5bc:	e59f0c9c 	ldr	r0, [pc, #3228]	; c260 <noPixel$+0x20>
    b5c0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b5c4:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    b5c8:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    b5cc:	e3a00000 	mov	r0, #0
    b5d0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b5d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b5d8:	eb000374 	bl	c3b0 <drawRect>
    b5dc:	e59f4ca0 	ldr	r4, [pc, #3232]	; c284 <noPixel$+0x44>
    b5e0:	e3a030c8 	mov	r3, #200	; 0xc8
    b5e4:	e3a02f96 	mov	r2, #600	; 0x258
    b5e8:	e3a01054 	mov	r1, #84	; 0x54
    b5ec:	e3a000d4 	mov	r0, #212	; 0xd4
    b5f0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b5f4:	eb00036d 	bl	c3b0 <drawRect>
    b5f8:	e59f4c84 	ldr	r4, [pc, #3204]	; c284 <noPixel$+0x44>
    b5fc:	e3a030c8 	mov	r3, #200	; 0xc8
    b600:	e3a020c8 	mov	r2, #200	; 0xc8
    b604:	e3a01f47 	mov	r1, #284	; 0x11c
    b608:	e3a00f67 	mov	r0, #412	; 0x19c
    b60c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b610:	eb000366 	bl	c3b0 <drawRect>
    b614:	eb00027b 	bl	c008 <drawTitle>
    b618:	e59f0c68 	ldr	r0, [pc, #3176]	; c288 <noPixel$+0x48>
    b61c:	e3a01000 	mov	r1, #0
    b620:	e59f2c64 	ldr	r2, [pc, #3172]	; c28c <noPixel$+0x4c>
    b624:	e3a03044 	mov	r3, #68	; 0x44
    b628:	eb000011 	bl	b674 <WriteSentence>
    b62c:	e59f0c34 	ldr	r0, [pc, #3124]	; c268 <noPixel$+0x28>
    b630:	e3a01f8d 	mov	r1, #564	; 0x234
    b634:	eb0001c1 	bl	bd40 <drawMenuButton>
    b638:	e59f0c50 	ldr	r0, [pc, #3152]	; c290 <noPixel$+0x50>
    b63c:	e3a01000 	mov	r1, #0
    b640:	e59f2c4c 	ldr	r2, [pc, #3148]	; c294 <noPixel$+0x54>
    b644:	e59f3c4c 	ldr	r3, [pc, #3148]	; c298 <noPixel$+0x58>
    b648:	eb000009 	bl	b674 <WriteSentence>
    b64c:	e59f0c14 	ldr	r0, [pc, #3092]	; c268 <noPixel$+0x28>
    b650:	e59f1c44 	ldr	r1, [pc, #3140]	; c29c <noPixel$+0x5c>
    b654:	eb0001b9 	bl	bd40 <drawMenuButton>
    b658:	e59f0c18 	ldr	r0, [pc, #3096]	; c278 <noPixel$+0x38>
    b65c:	e3a01000 	mov	r1, #0
    b660:	e59f2c14 	ldr	r2, [pc, #3092]	; c27c <noPixel$+0x3c>
    b664:	e3a03fa6 	mov	r3, #664	; 0x298
    b668:	eb000001 	bl	b674 <WriteSentence>
    b66c:	eb000031 	bl	b738 <setMainMenuIndicatorStart>
    b670:	e8bd8610 	pop	{r4, r9, sl, pc}

0000b674 <WriteSentence>:
    b674:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b678:	e1a05000 	mov	r5, r0
    b67c:	e5954000 	ldr	r4, [r5]
    b680:	e2855004 	add	r5, r5, #4
    b684:	e1a06001 	mov	r6, r1
    b688:	e1a08002 	mov	r8, r2
    b68c:	e1a07003 	mov	r7, r3

0000b690 <LoadChar>:
    b690:	e4d50001 	ldrb	r0, [r5], #1
    b694:	e1a01006 	mov	r1, r6
    b698:	e1a02007 	mov	r2, r7
    b69c:	e1a03008 	mov	r3, r8
    b6a0:	eb0002d8 	bl	c208 <DrawChar>
    b6a4:	e2888008 	add	r8, r8, #8
    b6a8:	e2444001 	sub	r4, r4, #1
    b6ac:	e3540000 	cmp	r4, #0
    b6b0:	cafffff6 	bgt	b690 <LoadChar>
    b6b4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000b6b8 <setPauseMenuIndicatorRestart>:
    b6b8:	e92d4010 	push	{r4, lr}
    b6bc:	e59f4bdc 	ldr	r4, [pc, #3036]	; c2a0 <noPixel$+0x60>
    b6c0:	e3a03014 	mov	r3, #20
    b6c4:	e3a02014 	mov	r2, #20
    b6c8:	e3a01e23 	mov	r1, #560	; 0x230
    b6cc:	e3a00f71 	mov	r0, #452	; 0x1c4
    b6d0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b6d4:	eb000335 	bl	c3b0 <drawRect>
    b6d8:	e3a04000 	mov	r4, #0
    b6dc:	e3a03014 	mov	r3, #20
    b6e0:	e3a02014 	mov	r2, #20
    b6e4:	e59f1bb8 	ldr	r1, [pc, #3000]	; c2a4 <noPixel$+0x64>
    b6e8:	e3a00f71 	mov	r0, #452	; 0x1c4
    b6ec:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b6f0:	eb00032e 	bl	c3b0 <drawRect>
    b6f4:	e8bd8010 	pop	{r4, pc}

0000b6f8 <setPauseMenuIndicatorQuit>:
    b6f8:	e92d4010 	push	{r4, lr}
    b6fc:	e59f4b9c 	ldr	r4, [pc, #2972]	; c2a0 <noPixel$+0x60>
    b700:	e3a03014 	mov	r3, #20
    b704:	e3a02014 	mov	r2, #20
    b708:	e59f1b94 	ldr	r1, [pc, #2964]	; c2a4 <noPixel$+0x64>
    b70c:	e3a00f71 	mov	r0, #452	; 0x1c4
    b710:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b714:	eb000325 	bl	c3b0 <drawRect>
    b718:	e3a04000 	mov	r4, #0
    b71c:	e3a03014 	mov	r3, #20
    b720:	e3a02014 	mov	r2, #20
    b724:	e3a01e23 	mov	r1, #560	; 0x230
    b728:	e3a00f71 	mov	r0, #452	; 0x1c4
    b72c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b730:	eb00031e 	bl	c3b0 <drawRect>
    b734:	e8bd8010 	pop	{r4, pc}

0000b738 <setMainMenuIndicatorStart>:
    b738:	e92d4010 	push	{r4, lr}
    b73c:	e59f4b5c 	ldr	r4, [pc, #2908]	; c2a0 <noPixel$+0x60>
    b740:	e3a03014 	mov	r3, #20
    b744:	e3a02014 	mov	r2, #20
    b748:	e3a01fa5 	mov	r1, #660	; 0x294
    b74c:	e3a00f71 	mov	r0, #452	; 0x1c4
    b750:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b754:	eb000315 	bl	c3b0 <drawRect>
    b758:	e3a04000 	mov	r4, #0
    b75c:	e3a03014 	mov	r3, #20
    b760:	e3a02014 	mov	r2, #20
    b764:	e59f1b3c 	ldr	r1, [pc, #2876]	; c2a8 <noPixel$+0x68>
    b768:	e3a00f71 	mov	r0, #452	; 0x1c4
    b76c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b770:	eb00030e 	bl	c3b0 <drawRect>
    b774:	e8bd8010 	pop	{r4, pc}

0000b778 <setMainMenuIndicatorQuit>:
    b778:	e92d4010 	push	{r4, lr}
    b77c:	e59f4b1c 	ldr	r4, [pc, #2844]	; c2a0 <noPixel$+0x60>
    b780:	e3a03014 	mov	r3, #20
    b784:	e3a02014 	mov	r2, #20
    b788:	e59f1b18 	ldr	r1, [pc, #2840]	; c2a8 <noPixel$+0x68>
    b78c:	e3a00f71 	mov	r0, #452	; 0x1c4
    b790:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b794:	eb000305 	bl	c3b0 <drawRect>
    b798:	e3a04000 	mov	r4, #0
    b79c:	e3a03014 	mov	r3, #20
    b7a0:	e3a02014 	mov	r2, #20
    b7a4:	e3a01fa5 	mov	r1, #660	; 0x294
    b7a8:	e3a00f71 	mov	r0, #452	; 0x1c4
    b7ac:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b7b0:	eb0002fe 	bl	c3b0 <drawRect>
    b7b4:	e8bd8010 	pop	{r4, pc}

0000b7b8 <drawVictoryScreen>:
    b7b8:	e92d4010 	push	{r4, lr}
    b7bc:	e59f4ae8 	ldr	r4, [pc, #2792]	; c2ac <noPixel$+0x6c>
    b7c0:	e3a0305a 	mov	r3, #90	; 0x5a
    b7c4:	e3a0201e 	mov	r2, #30
    b7c8:	e3a010c8 	mov	r1, #200	; 0xc8
    b7cc:	e3a00057 	mov	r0, #87	; 0x57
    b7d0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b7d4:	eb0002f5 	bl	c3b0 <drawRect>
    b7d8:	e59f4acc 	ldr	r4, [pc, #2764]	; c2ac <noPixel$+0x6c>
    b7dc:	e3a0305a 	mov	r3, #90	; 0x5a
    b7e0:	e3a0201e 	mov	r2, #30
    b7e4:	e3a010c8 	mov	r1, #200	; 0xc8
    b7e8:	e3a00093 	mov	r0, #147	; 0x93
    b7ec:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b7f0:	eb0002ee 	bl	c3b0 <drawRect>
    b7f4:	e59f4ab0 	ldr	r4, [pc, #2736]	; c2ac <noPixel$+0x6c>
    b7f8:	e3a0305a 	mov	r3, #90	; 0x5a
    b7fc:	e3a0201e 	mov	r2, #30
    b800:	e3a01f41 	mov	r1, #260	; 0x104
    b804:	e3a00075 	mov	r0, #117	; 0x75
    b808:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b80c:	eb0002e7 	bl	c3b0 <drawRect>
    b810:	e59f4a94 	ldr	r4, [pc, #2708]	; c2ac <noPixel$+0x6c>
    b814:	e3a0305a 	mov	r3, #90	; 0x5a
    b818:	e3a0201e 	mov	r2, #30
    b81c:	e3a010e6 	mov	r1, #230	; 0xe6
    b820:	e3a000bb 	mov	r0, #187	; 0xbb
    b824:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b828:	eb0002e0 	bl	c3b0 <drawRect>
    b82c:	e59f4a78 	ldr	r4, [pc, #2680]	; c2ac <noPixel$+0x6c>
    b830:	e3a0305a 	mov	r3, #90	; 0x5a
    b834:	e3a0201e 	mov	r2, #30
    b838:	e3a010e6 	mov	r1, #230	; 0xe6
    b83c:	e3a000f7 	mov	r0, #247	; 0xf7
    b840:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b844:	eb0002d9 	bl	c3b0 <drawRect>
    b848:	e59f4a5c 	ldr	r4, [pc, #2652]	; c2ac <noPixel$+0x6c>
    b84c:	e3a0301e 	mov	r3, #30
    b850:	e3a0201e 	mov	r2, #30
    b854:	e3a010c8 	mov	r1, #200	; 0xc8
    b858:	e3a000d9 	mov	r0, #217	; 0xd9
    b85c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b860:	eb0002d2 	bl	c3b0 <drawRect>
    b864:	e59f4a40 	ldr	r4, [pc, #2624]	; c2ac <noPixel$+0x6c>
    b868:	e3a0301e 	mov	r3, #30
    b86c:	e3a0201e 	mov	r2, #30
    b870:	e3a01d05 	mov	r1, #320	; 0x140
    b874:	e3a000d9 	mov	r0, #217	; 0xd9
    b878:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b87c:	eb0002cb 	bl	c3b0 <drawRect>
    b880:	e59f4a24 	ldr	r4, [pc, #2596]	; c2ac <noPixel$+0x6c>
    b884:	e3a03078 	mov	r3, #120	; 0x78
    b888:	e3a0201e 	mov	r2, #30
    b88c:	e3a010c8 	mov	r1, #200	; 0xc8
    b890:	e59f0a18 	ldr	r0, [pc, #2584]	; c2b0 <noPixel$+0x70>
    b894:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b898:	eb0002c4 	bl	c3b0 <drawRect>
    b89c:	e59f4a08 	ldr	r4, [pc, #2568]	; c2ac <noPixel$+0x6c>
    b8a0:	e3a03078 	mov	r3, #120	; 0x78
    b8a4:	e3a0201e 	mov	r2, #30
    b8a8:	e3a010c8 	mov	r1, #200	; 0xc8
    b8ac:	e59f0a00 	ldr	r0, [pc, #2560]	; c2b4 <noPixel$+0x74>
    b8b0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b8b4:	eb0002bd 	bl	c3b0 <drawRect>
    b8b8:	e59f49ec 	ldr	r4, [pc, #2540]	; c2ac <noPixel$+0x6c>
    b8bc:	e3a0301e 	mov	r3, #30
    b8c0:	e3a0201e 	mov	r2, #30
    b8c4:	e3a01d05 	mov	r1, #320	; 0x140
    b8c8:	e59f09e8 	ldr	r0, [pc, #2536]	; c2b8 <noPixel$+0x78>
    b8cc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b8d0:	eb0002b6 	bl	c3b0 <drawRect>
    b8d4:	e59f49d0 	ldr	r4, [pc, #2512]	; c2ac <noPixel$+0x6c>
    b8d8:	e3a03078 	mov	r3, #120	; 0x78
    b8dc:	e3a0201e 	mov	r2, #30
    b8e0:	e3a010c8 	mov	r1, #200	; 0xc8
    b8e4:	e59f09a8 	ldr	r0, [pc, #2472]	; c294 <noPixel$+0x54>
    b8e8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b8ec:	eb0002af 	bl	c3b0 <drawRect>
    b8f0:	e59f49b4 	ldr	r4, [pc, #2484]	; c2ac <noPixel$+0x6c>
    b8f4:	e3a03078 	mov	r3, #120	; 0x78
    b8f8:	e3a0201e 	mov	r2, #30
    b8fc:	e3a010c8 	mov	r1, #200	; 0xc8
    b900:	e59f09b4 	ldr	r0, [pc, #2484]	; c2bc <noPixel$+0x7c>
    b904:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b908:	eb0002a8 	bl	c3b0 <drawRect>
    b90c:	e59f4998 	ldr	r4, [pc, #2456]	; c2ac <noPixel$+0x6c>
    b910:	e3a03078 	mov	r3, #120	; 0x78
    b914:	e3a0201e 	mov	r2, #30
    b918:	e3a010c8 	mov	r1, #200	; 0xc8
    b91c:	e59f099c 	ldr	r0, [pc, #2460]	; c2c0 <noPixel$+0x80>
    b920:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b924:	eb0002a1 	bl	c3b0 <drawRect>
    b928:	e59f497c 	ldr	r4, [pc, #2428]	; c2ac <noPixel$+0x6c>
    b92c:	e3a0301e 	mov	r3, #30
    b930:	e3a0201e 	mov	r2, #30
    b934:	e3a01d05 	mov	r1, #320	; 0x140
    b938:	e59f0984 	ldr	r0, [pc, #2436]	; c2c4 <noPixel$+0x84>
    b93c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b940:	eb00029a 	bl	c3b0 <drawRect>
    b944:	e59f4960 	ldr	r4, [pc, #2400]	; c2ac <noPixel$+0x6c>
    b948:	e3a0301e 	mov	r3, #30
    b94c:	e3a0201e 	mov	r2, #30
    b950:	e3a01d05 	mov	r1, #320	; 0x140
    b954:	e59f096c 	ldr	r0, [pc, #2412]	; c2c8 <noPixel$+0x88>
    b958:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b95c:	eb000293 	bl	c3b0 <drawRect>
    b960:	e59f4944 	ldr	r4, [pc, #2372]	; c2ac <noPixel$+0x6c>
    b964:	e3a0301e 	mov	r3, #30
    b968:	e3a0205a 	mov	r2, #90	; 0x5a
    b96c:	e3a010c8 	mov	r1, #200	; 0xc8
    b970:	e59f0954 	ldr	r0, [pc, #2388]	; c2cc <noPixel$+0x8c>
    b974:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b978:	eb00028c 	bl	c3b0 <drawRect>
    b97c:	e59f4928 	ldr	r4, [pc, #2344]	; c2ac <noPixel$+0x6c>
    b980:	e3a0301e 	mov	r3, #30
    b984:	e3a0205a 	mov	r2, #90	; 0x5a
    b988:	e3a01d05 	mov	r1, #320	; 0x140
    b98c:	e59f0938 	ldr	r0, [pc, #2360]	; c2cc <noPixel$+0x8c>
    b990:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b994:	eb000285 	bl	c3b0 <drawRect>
    b998:	e59f490c 	ldr	r4, [pc, #2316]	; c2ac <noPixel$+0x6c>
    b99c:	e3a0305a 	mov	r3, #90	; 0x5a
    b9a0:	e3a0201e 	mov	r2, #30
    b9a4:	e3a010e6 	mov	r1, #230	; 0xe6
    b9a8:	e59f0920 	ldr	r0, [pc, #2336]	; c2d0 <noPixel$+0x90>
    b9ac:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b9b0:	eb00027e 	bl	c3b0 <drawRect>
    b9b4:	e59f48f0 	ldr	r4, [pc, #2288]	; c2ac <noPixel$+0x6c>
    b9b8:	e3a03096 	mov	r3, #150	; 0x96
    b9bc:	e3a0201e 	mov	r2, #30
    b9c0:	e3a010c8 	mov	r1, #200	; 0xc8
    b9c4:	e59f0908 	ldr	r0, [pc, #2312]	; c2d4 <noPixel$+0x94>
    b9c8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b9cc:	eb000277 	bl	c3b0 <drawRect>
    b9d0:	e59f48d4 	ldr	r4, [pc, #2260]	; c2ac <noPixel$+0x6c>
    b9d4:	e3a0301e 	mov	r3, #30
    b9d8:	e3a0201e 	mov	r2, #30
    b9dc:	e3a010e6 	mov	r1, #230	; 0xe6
    b9e0:	e59f08f0 	ldr	r0, [pc, #2288]	; c2d8 <noPixel$+0x98>
    b9e4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b9e8:	eb000270 	bl	c3b0 <drawRect>
    b9ec:	e59f48b8 	ldr	r4, [pc, #2232]	; c2ac <noPixel$+0x6c>
    b9f0:	e3a0301e 	mov	r3, #30
    b9f4:	e3a0201e 	mov	r2, #30
    b9f8:	e3a01f41 	mov	r1, #260	; 0x104
    b9fc:	e59f08d8 	ldr	r0, [pc, #2264]	; c2dc <noPixel$+0x9c>
    ba00:	e92d001f 	push	{r0, r1, r2, r3, r4}
    ba04:	eb000269 	bl	c3b0 <drawRect>
    ba08:	e59f489c 	ldr	r4, [pc, #2204]	; c2ac <noPixel$+0x6c>
    ba0c:	e3a0301e 	mov	r3, #30
    ba10:	e3a0201e 	mov	r2, #30
    ba14:	e59f18c4 	ldr	r1, [pc, #2244]	; c2e0 <noPixel$+0xa0>
    ba18:	e59f08c4 	ldr	r0, [pc, #2244]	; c2e4 <noPixel$+0xa4>
    ba1c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    ba20:	eb000262 	bl	c3b0 <drawRect>
    ba24:	e59f4880 	ldr	r4, [pc, #2176]	; c2ac <noPixel$+0x6c>
    ba28:	e3a03096 	mov	r3, #150	; 0x96
    ba2c:	e3a0201e 	mov	r2, #30
    ba30:	e3a010c8 	mov	r1, #200	; 0xc8
    ba34:	e59f08ac 	ldr	r0, [pc, #2220]	; c2e8 <noPixel$+0xa8>
    ba38:	e92d001f 	push	{r0, r1, r2, r3, r4}
    ba3c:	eb00025b 	bl	c3b0 <drawRect>
    ba40:	e59f4864 	ldr	r4, [pc, #2148]	; c2ac <noPixel$+0x6c>
    ba44:	e3a0305a 	mov	r3, #90	; 0x5a
    ba48:	e3a0201e 	mov	r2, #30
    ba4c:	e3a010c8 	mov	r1, #200	; 0xc8
    ba50:	e59f0894 	ldr	r0, [pc, #2196]	; c2ec <noPixel$+0xac>
    ba54:	e92d001f 	push	{r0, r1, r2, r3, r4}
    ba58:	eb000254 	bl	c3b0 <drawRect>
    ba5c:	e59f4848 	ldr	r4, [pc, #2120]	; c2ac <noPixel$+0x6c>
    ba60:	e3a0301e 	mov	r3, #30
    ba64:	e3a0201e 	mov	r2, #30
    ba68:	e3a01d05 	mov	r1, #320	; 0x140
    ba6c:	e59f0878 	ldr	r0, [pc, #2168]	; c2ec <noPixel$+0xac>
    ba70:	e92d001f 	push	{r0, r1, r2, r3, r4}
    ba74:	eb00024d 	bl	c3b0 <drawRect>
    ba78:	e8bd8010 	pop	{r4, pc}

0000ba7c <drawLossScreen>:
    ba7c:	e92d4010 	push	{r4, lr}
    ba80:	e59f4868 	ldr	r4, [pc, #2152]	; c2f0 <noPixel$+0xb0>
    ba84:	e3a0305a 	mov	r3, #90	; 0x5a
    ba88:	e3a0201e 	mov	r2, #30
    ba8c:	e3a010c8 	mov	r1, #200	; 0xc8
    ba90:	e3a00075 	mov	r0, #117	; 0x75
    ba94:	e92d001f 	push	{r0, r1, r2, r3, r4}
    ba98:	eb000244 	bl	c3b0 <drawRect>
    ba9c:	e59f484c 	ldr	r4, [pc, #2124]	; c2f0 <noPixel$+0xb0>
    baa0:	e3a0305a 	mov	r3, #90	; 0x5a
    baa4:	e3a0201e 	mov	r2, #30
    baa8:	e3a010c8 	mov	r1, #200	; 0xc8
    baac:	e3a000b1 	mov	r0, #177	; 0xb1
    bab0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bab4:	eb00023d 	bl	c3b0 <drawRect>
    bab8:	e59f4830 	ldr	r4, [pc, #2096]	; c2f0 <noPixel$+0xb0>
    babc:	e3a0305a 	mov	r3, #90	; 0x5a
    bac0:	e3a0201e 	mov	r2, #30
    bac4:	e3a01f41 	mov	r1, #260	; 0x104
    bac8:	e3a00093 	mov	r0, #147	; 0x93
    bacc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bad0:	eb000236 	bl	c3b0 <drawRect>
    bad4:	e59f4814 	ldr	r4, [pc, #2068]	; c2f0 <noPixel$+0xb0>
    bad8:	e3a0305a 	mov	r3, #90	; 0x5a
    badc:	e3a0201e 	mov	r2, #30
    bae0:	e3a010e6 	mov	r1, #230	; 0xe6
    bae4:	e3a000d9 	mov	r0, #217	; 0xd9
    bae8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    baec:	eb00022f 	bl	c3b0 <drawRect>
    baf0:	e59f47f8 	ldr	r4, [pc, #2040]	; c2f0 <noPixel$+0xb0>
    baf4:	e3a0305a 	mov	r3, #90	; 0x5a
    baf8:	e3a0201e 	mov	r2, #30
    bafc:	e3a010e6 	mov	r1, #230	; 0xe6
    bb00:	e59f07ec 	ldr	r0, [pc, #2028]	; c2f4 <noPixel$+0xb4>
    bb04:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bb08:	eb000228 	bl	c3b0 <drawRect>
    bb0c:	e59f47dc 	ldr	r4, [pc, #2012]	; c2f0 <noPixel$+0xb0>
    bb10:	e3a0301e 	mov	r3, #30
    bb14:	e3a0201e 	mov	r2, #30
    bb18:	e3a010c8 	mov	r1, #200	; 0xc8
    bb1c:	e3a000f7 	mov	r0, #247	; 0xf7
    bb20:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bb24:	eb000221 	bl	c3b0 <drawRect>
    bb28:	e59f47c0 	ldr	r4, [pc, #1984]	; c2f0 <noPixel$+0xb0>
    bb2c:	e3a0301e 	mov	r3, #30
    bb30:	e3a0201e 	mov	r2, #30
    bb34:	e3a01d05 	mov	r1, #320	; 0x140
    bb38:	e3a000f7 	mov	r0, #247	; 0xf7
    bb3c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bb40:	eb00021a 	bl	c3b0 <drawRect>
    bb44:	e59f47a4 	ldr	r4, [pc, #1956]	; c2f0 <noPixel$+0xb0>
    bb48:	e3a03078 	mov	r3, #120	; 0x78
    bb4c:	e3a0201e 	mov	r2, #30
    bb50:	e3a010c8 	mov	r1, #200	; 0xc8
    bb54:	e59f075c 	ldr	r0, [pc, #1884]	; c2b8 <noPixel$+0x78>
    bb58:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bb5c:	eb000213 	bl	c3b0 <drawRect>
    bb60:	e59f4788 	ldr	r4, [pc, #1928]	; c2f0 <noPixel$+0xb0>
    bb64:	e3a03078 	mov	r3, #120	; 0x78
    bb68:	e3a0201e 	mov	r2, #30
    bb6c:	e3a010c8 	mov	r1, #200	; 0xc8
    bb70:	e59f0780 	ldr	r0, [pc, #1920]	; c2f8 <noPixel$+0xb8>
    bb74:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bb78:	eb00020c 	bl	c3b0 <drawRect>
    bb7c:	e59f476c 	ldr	r4, [pc, #1900]	; c2f0 <noPixel$+0xb0>
    bb80:	e3a0301e 	mov	r3, #30
    bb84:	e3a0201e 	mov	r2, #30
    bb88:	e3a01d05 	mov	r1, #320	; 0x140
    bb8c:	e59f0720 	ldr	r0, [pc, #1824]	; c2b4 <noPixel$+0x74>
    bb90:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bb94:	eb000205 	bl	c3b0 <drawRect>
    bb98:	e59f4750 	ldr	r4, [pc, #1872]	; c2f0 <noPixel$+0xb0>
    bb9c:	e3a03096 	mov	r3, #150	; 0x96
    bba0:	e3a0201e 	mov	r2, #30
    bba4:	e3a010c8 	mov	r1, #200	; 0xc8
    bba8:	e59f0714 	ldr	r0, [pc, #1812]	; c2c4 <noPixel$+0x84>
    bbac:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bbb0:	eb0001fe 	bl	c3b0 <drawRect>
    bbb4:	e59f4734 	ldr	r4, [pc, #1844]	; c2f0 <noPixel$+0xb0>
    bbb8:	e3a0301e 	mov	r3, #30
    bbbc:	e3a0203c 	mov	r2, #60	; 0x3c
    bbc0:	e3a01d05 	mov	r1, #320	; 0x140
    bbc4:	e59f06f0 	ldr	r0, [pc, #1776]	; c2bc <noPixel$+0x7c>
    bbc8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bbcc:	eb0001f7 	bl	c3b0 <drawRect>
    bbd0:	e59f4718 	ldr	r4, [pc, #1816]	; c2f0 <noPixel$+0xb0>
    bbd4:	e3a0305a 	mov	r3, #90	; 0x5a
    bbd8:	e3a0201e 	mov	r2, #30
    bbdc:	e3a010e6 	mov	r1, #230	; 0xe6
    bbe0:	e59f0714 	ldr	r0, [pc, #1812]	; c2fc <noPixel$+0xbc>
    bbe4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bbe8:	eb0001f0 	bl	c3b0 <drawRect>
    bbec:	e59f46fc 	ldr	r4, [pc, #1788]	; c2f0 <noPixel$+0xb0>
    bbf0:	e3a0305a 	mov	r3, #90	; 0x5a
    bbf4:	e3a0201e 	mov	r2, #30
    bbf8:	e3a010e6 	mov	r1, #230	; 0xe6
    bbfc:	e59f06cc 	ldr	r0, [pc, #1740]	; c2d0 <noPixel$+0x90>
    bc00:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc04:	eb0001e9 	bl	c3b0 <drawRect>
    bc08:	e59f46e0 	ldr	r4, [pc, #1760]	; c2f0 <noPixel$+0xb0>
    bc0c:	e3a0301e 	mov	r3, #30
    bc10:	e3a0201e 	mov	r2, #30
    bc14:	e3a010c8 	mov	r1, #200	; 0xc8
    bc18:	e59f06ac 	ldr	r0, [pc, #1708]	; c2cc <noPixel$+0x8c>
    bc1c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc20:	eb0001e2 	bl	c3b0 <drawRect>
    bc24:	e59f46c4 	ldr	r4, [pc, #1732]	; c2f0 <noPixel$+0xb0>
    bc28:	e3a0301e 	mov	r3, #30
    bc2c:	e3a0201e 	mov	r2, #30
    bc30:	e3a01d05 	mov	r1, #320	; 0x140
    bc34:	e59f0690 	ldr	r0, [pc, #1680]	; c2cc <noPixel$+0x8c>
    bc38:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc3c:	eb0001db 	bl	c3b0 <drawRect>
    bc40:	e59f46a8 	ldr	r4, [pc, #1704]	; c2f0 <noPixel$+0xb0>
    bc44:	e3a0301e 	mov	r3, #30
    bc48:	e3a0205a 	mov	r2, #90	; 0x5a
    bc4c:	e3a010c8 	mov	r1, #200	; 0xc8
    bc50:	e59f06a8 	ldr	r0, [pc, #1704]	; c300 <noPixel$+0xc0>
    bc54:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc58:	eb0001d4 	bl	c3b0 <drawRect>
    bc5c:	e59f468c 	ldr	r4, [pc, #1676]	; c2f0 <noPixel$+0xb0>
    bc60:	e3a0301e 	mov	r3, #30
    bc64:	e3a0201e 	mov	r2, #30
    bc68:	e3a010e6 	mov	r1, #230	; 0xe6
    bc6c:	e59f068c 	ldr	r0, [pc, #1676]	; c300 <noPixel$+0xc0>
    bc70:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc74:	eb0001cd 	bl	c3b0 <drawRect>
    bc78:	e59f4670 	ldr	r4, [pc, #1648]	; c2f0 <noPixel$+0xb0>
    bc7c:	e3a0301e 	mov	r3, #30
    bc80:	e3a0205a 	mov	r2, #90	; 0x5a
    bc84:	e3a01f41 	mov	r1, #260	; 0x104
    bc88:	e59f0670 	ldr	r0, [pc, #1648]	; c300 <noPixel$+0xc0>
    bc8c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc90:	eb0001c6 	bl	c3b0 <drawRect>
    bc94:	e59f4654 	ldr	r4, [pc, #1620]	; c2f0 <noPixel$+0xb0>
    bc98:	e3a0301e 	mov	r3, #30
    bc9c:	e3a0201e 	mov	r2, #30
    bca0:	e59f1638 	ldr	r1, [pc, #1592]	; c2e0 <noPixel$+0xa0>
    bca4:	e59f062c 	ldr	r0, [pc, #1580]	; c2d8 <noPixel$+0x98>
    bca8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bcac:	eb0001bf 	bl	c3b0 <drawRect>
    bcb0:	e59f4638 	ldr	r4, [pc, #1592]	; c2f0 <noPixel$+0xb0>
    bcb4:	e3a0301e 	mov	r3, #30
    bcb8:	e3a0205a 	mov	r2, #90	; 0x5a
    bcbc:	e3a01d05 	mov	r1, #320	; 0x140
    bcc0:	e59f0638 	ldr	r0, [pc, #1592]	; c300 <noPixel$+0xc0>
    bcc4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bcc8:	eb0001b8 	bl	c3b0 <drawRect>
    bccc:	e59f461c 	ldr	r4, [pc, #1564]	; c2f0 <noPixel$+0xb0>
    bcd0:	e3a03096 	mov	r3, #150	; 0x96
    bcd4:	e3a0201e 	mov	r2, #30
    bcd8:	e3a010c8 	mov	r1, #200	; 0xc8
    bcdc:	e59f0620 	ldr	r0, [pc, #1568]	; c304 <noPixel$+0xc4>
    bce0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bce4:	eb0001b1 	bl	c3b0 <drawRect>
    bce8:	e59f4600 	ldr	r4, [pc, #1536]	; c2f0 <noPixel$+0xb0>
    bcec:	e3a0301e 	mov	r3, #30
    bcf0:	e3a0203c 	mov	r2, #60	; 0x3c
    bcf4:	e3a010c8 	mov	r1, #200	; 0xc8
    bcf8:	e59f0608 	ldr	r0, [pc, #1544]	; c308 <noPixel$+0xc8>
    bcfc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd00:	eb0001aa 	bl	c3b0 <drawRect>
    bd04:	e59f45e4 	ldr	r4, [pc, #1508]	; c2f0 <noPixel$+0xb0>
    bd08:	e3a0301e 	mov	r3, #30
    bd0c:	e3a0203c 	mov	r2, #60	; 0x3c
    bd10:	e3a01f41 	mov	r1, #260	; 0x104
    bd14:	e59f05ec 	ldr	r0, [pc, #1516]	; c308 <noPixel$+0xc8>
    bd18:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd1c:	eb0001a3 	bl	c3b0 <drawRect>
    bd20:	e59f45c8 	ldr	r4, [pc, #1480]	; c2f0 <noPixel$+0xb0>
    bd24:	e3a0301e 	mov	r3, #30
    bd28:	e3a0203c 	mov	r2, #60	; 0x3c
    bd2c:	e3a01d05 	mov	r1, #320	; 0x140
    bd30:	e59f05d0 	ldr	r0, [pc, #1488]	; c308 <noPixel$+0xc8>
    bd34:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd38:	eb00019c 	bl	c3b0 <drawRect>
    bd3c:	e8bd8010 	pop	{r4, pc}

0000bd40 <drawMenuButton>:
    bd40:	e92d4610 	push	{r4, r9, sl, lr}
    bd44:	e1a09000 	mov	r9, r0
    bd48:	e1a0a001 	mov	sl, r1
    bd4c:	e3a04000 	mov	r4, #0
    bd50:	e3a03032 	mov	r3, #50	; 0x32
    bd54:	e3a02096 	mov	r2, #150	; 0x96
    bd58:	e1a0100a 	mov	r1, sl
    bd5c:	e1a00009 	mov	r0, r9
    bd60:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd64:	eb000191 	bl	c3b0 <drawRect>
    bd68:	e2899005 	add	r9, r9, #5
    bd6c:	e28aa005 	add	sl, sl, #5
    bd70:	e59f4594 	ldr	r4, [pc, #1428]	; c30c <noPixel$+0xcc>
    bd74:	e3a03028 	mov	r3, #40	; 0x28
    bd78:	e3a0208c 	mov	r2, #140	; 0x8c
    bd7c:	e1a0100a 	mov	r1, sl
    bd80:	e1a00009 	mov	r0, r9
    bd84:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd88:	eb000188 	bl	c3b0 <drawRect>
    bd8c:	e2899005 	add	r9, r9, #5
    bd90:	e28aa005 	add	sl, sl, #5
    bd94:	e59f4504 	ldr	r4, [pc, #1284]	; c2a0 <noPixel$+0x60>
    bd98:	e3a0301e 	mov	r3, #30
    bd9c:	e3a0201e 	mov	r2, #30
    bda0:	e1a0100a 	mov	r1, sl
    bda4:	e1a00009 	mov	r0, r9
    bda8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bdac:	eb00017f 	bl	c3b0 <drawRect>
    bdb0:	e8bd8610 	pop	{r4, r9, sl, pc}

0000bdb4 <drawPaused>:
    bdb4:	e92d4010 	push	{r4, lr}
    bdb8:	e3a04000 	mov	r4, #0
    bdbc:	e3a03096 	mov	r3, #150	; 0x96
    bdc0:	e3a0201e 	mov	r2, #30
    bdc4:	e3a010ae 	mov	r1, #174	; 0xae
    bdc8:	e3a000e4 	mov	r0, #228	; 0xe4
    bdcc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bdd0:	eb000176 	bl	c3b0 <drawRect>
    bdd4:	e3a04000 	mov	r4, #0
    bdd8:	e3a0301e 	mov	r3, #30
    bddc:	e3a0203c 	mov	r2, #60	; 0x3c
    bde0:	e3a010ae 	mov	r1, #174	; 0xae
    bde4:	e59f0524 	ldr	r0, [pc, #1316]	; c310 <noPixel$+0xd0>
    bde8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bdec:	eb00016f 	bl	c3b0 <drawRect>
    bdf0:	e3a04000 	mov	r4, #0
    bdf4:	e3a0301e 	mov	r3, #30
    bdf8:	e3a0203c 	mov	r2, #60	; 0x3c
    bdfc:	e3a010ea 	mov	r1, #234	; 0xea
    be00:	e59f0508 	ldr	r0, [pc, #1288]	; c310 <noPixel$+0xd0>
    be04:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be08:	eb000168 	bl	c3b0 <drawRect>
    be0c:	e3a04000 	mov	r4, #0
    be10:	e3a0301e 	mov	r3, #30
    be14:	e3a0201e 	mov	r2, #30
    be18:	e3a010cc 	mov	r1, #204	; 0xcc
    be1c:	e3a00e12 	mov	r0, #288	; 0x120
    be20:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be24:	eb000161 	bl	c3b0 <drawRect>
    be28:	e3a04000 	mov	r4, #0
    be2c:	e3a03078 	mov	r3, #120	; 0x78
    be30:	e3a0201e 	mov	r2, #30
    be34:	e3a010cc 	mov	r1, #204	; 0xcc
    be38:	e3a00f52 	mov	r0, #328	; 0x148
    be3c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be40:	eb00015a 	bl	c3b0 <drawRect>
    be44:	e3a04000 	mov	r4, #0
    be48:	e3a03078 	mov	r3, #120	; 0x78
    be4c:	e3a0201e 	mov	r2, #30
    be50:	e3a010cc 	mov	r1, #204	; 0xcc
    be54:	e3a00f61 	mov	r0, #388	; 0x184
    be58:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be5c:	eb000153 	bl	c3b0 <drawRect>
    be60:	e3a04000 	mov	r4, #0
    be64:	e3a0301e 	mov	r3, #30
    be68:	e3a0201e 	mov	r2, #30
    be6c:	e3a010ae 	mov	r1, #174	; 0xae
    be70:	e59f049c 	ldr	r0, [pc, #1180]	; c314 <noPixel$+0xd4>
    be74:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be78:	eb00014c 	bl	c3b0 <drawRect>
    be7c:	e3a04000 	mov	r4, #0
    be80:	e3a0301e 	mov	r3, #30
    be84:	e3a0201e 	mov	r2, #30
    be88:	e3a010ea 	mov	r1, #234	; 0xea
    be8c:	e59f0480 	ldr	r0, [pc, #1152]	; c314 <noPixel$+0xd4>
    be90:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be94:	eb000145 	bl	c3b0 <drawRect>
    be98:	e3a04000 	mov	r4, #0
    be9c:	e3a03078 	mov	r3, #120	; 0x78
    bea0:	e3a0201e 	mov	r2, #30
    bea4:	e3a010ae 	mov	r1, #174	; 0xae
    bea8:	e3a00f6b 	mov	r0, #428	; 0x1ac
    beac:	e92d001f 	push	{r0, r1, r2, r3, r4}
    beb0:	eb00013e 	bl	c3b0 <drawRect>
    beb4:	e3a04000 	mov	r4, #0
    beb8:	e3a03078 	mov	r3, #120	; 0x78
    bebc:	e3a0201e 	mov	r2, #30
    bec0:	e3a010ae 	mov	r1, #174	; 0xae
    bec4:	e3a00f7a 	mov	r0, #488	; 0x1e8
    bec8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    becc:	eb000137 	bl	c3b0 <drawRect>
    bed0:	e3a04000 	mov	r4, #0
    bed4:	e3a0301e 	mov	r3, #30
    bed8:	e3a0201e 	mov	r2, #30
    bedc:	e59f1434 	ldr	r1, [pc, #1076]	; c318 <noPixel$+0xd8>
    bee0:	e59f0434 	ldr	r0, [pc, #1076]	; c31c <noPixel$+0xdc>
    bee4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bee8:	eb000130 	bl	c3b0 <drawRect>
    beec:	e3a04000 	mov	r4, #0
    bef0:	e3a03096 	mov	r3, #150	; 0x96
    bef4:	e3a0204b 	mov	r2, #75	; 0x4b
    bef8:	e3a010ae 	mov	r1, #174	; 0xae
    befc:	e3a00e21 	mov	r0, #528	; 0x210
    bf00:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf04:	eb000129 	bl	c3b0 <drawRect>
    bf08:	e59f4350 	ldr	r4, [pc, #848]	; c260 <noPixel$+0x20>
    bf0c:	e3a0301e 	mov	r3, #30
    bf10:	e3a0202d 	mov	r2, #45	; 0x2d
    bf14:	e3a01f42 	mov	r1, #264	; 0x108
    bf18:	e3a00e21 	mov	r0, #528	; 0x210
    bf1c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf20:	eb000122 	bl	c3b0 <drawRect>
    bf24:	e59f4334 	ldr	r4, [pc, #820]	; c260 <noPixel$+0x20>
    bf28:	e3a0301e 	mov	r3, #30
    bf2c:	e3a0202d 	mov	r2, #45	; 0x2d
    bf30:	e3a010cc 	mov	r1, #204	; 0xcc
    bf34:	e59f03e4 	ldr	r0, [pc, #996]	; c320 <noPixel$+0xe0>
    bf38:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf3c:	eb00011b 	bl	c3b0 <drawRect>
    bf40:	e3a04000 	mov	r4, #0
    bf44:	e3a03096 	mov	r3, #150	; 0x96
    bf48:	e3a0204b 	mov	r2, #75	; 0x4b
    bf4c:	e3a010ae 	mov	r1, #174	; 0xae
    bf50:	e59f03cc 	ldr	r0, [pc, #972]	; c324 <noPixel$+0xe4>
    bf54:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf58:	eb000114 	bl	c3b0 <drawRect>
    bf5c:	e59f42fc 	ldr	r4, [pc, #764]	; c260 <noPixel$+0x20>
    bf60:	e3a0301e 	mov	r3, #30
    bf64:	e3a0202d 	mov	r2, #45	; 0x2d
    bf68:	e3a01f42 	mov	r1, #264	; 0x108
    bf6c:	e59f03b4 	ldr	r0, [pc, #948]	; c328 <noPixel$+0xe8>
    bf70:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf74:	eb00010d 	bl	c3b0 <drawRect>
    bf78:	e59f42e0 	ldr	r4, [pc, #736]	; c260 <noPixel$+0x20>
    bf7c:	e3a0301e 	mov	r3, #30
    bf80:	e3a0202d 	mov	r2, #45	; 0x2d
    bf84:	e3a010cc 	mov	r1, #204	; 0xcc
    bf88:	e59f0398 	ldr	r0, [pc, #920]	; c328 <noPixel$+0xe8>
    bf8c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf90:	eb000106 	bl	c3b0 <drawRect>
    bf94:	e3a04000 	mov	r4, #0
    bf98:	e3a03096 	mov	r3, #150	; 0x96
    bf9c:	e3a0201e 	mov	r2, #30
    bfa0:	e3a010ae 	mov	r1, #174	; 0xae
    bfa4:	e59f0380 	ldr	r0, [pc, #896]	; c32c <noPixel$+0xec>
    bfa8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bfac:	eb0000ff 	bl	c3b0 <drawRect>
    bfb0:	e3a04000 	mov	r4, #0
    bfb4:	e3a0301e 	mov	r3, #30
    bfb8:	e3a0201e 	mov	r2, #30
    bfbc:	e3a010ae 	mov	r1, #174	; 0xae
    bfc0:	e3a00fb6 	mov	r0, #728	; 0x2d8
    bfc4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bfc8:	eb0000f8 	bl	c3b0 <drawRect>
    bfcc:	e3a04000 	mov	r4, #0
    bfd0:	e3a0301e 	mov	r3, #30
    bfd4:	e3a0201e 	mov	r2, #30
    bfd8:	e59f1338 	ldr	r1, [pc, #824]	; c318 <noPixel$+0xd8>
    bfdc:	e3a00fb6 	mov	r0, #728	; 0x2d8
    bfe0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bfe4:	eb0000f1 	bl	c3b0 <drawRect>
    bfe8:	e3a04000 	mov	r4, #0
    bfec:	e3a0305a 	mov	r3, #90	; 0x5a
    bff0:	e3a0201e 	mov	r2, #30
    bff4:	e3a010cc 	mov	r1, #204	; 0xcc
    bff8:	e59f0330 	ldr	r0, [pc, #816]	; c330 <noPixel$+0xf0>
    bffc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c000:	eb0000ea 	bl	c3b0 <drawRect>
    c004:	e8bd8010 	pop	{r4, pc}

0000c008 <drawTitle>:
    c008:	e92d4010 	push	{r4, lr}
    c00c:	e3a04000 	mov	r4, #0
    c010:	e3a0301e 	mov	r3, #30
    c014:	e3a0205a 	mov	r2, #90	; 0x5a
    c018:	e3a0106d 	mov	r1, #109	; 0x6d
    c01c:	e3a000e3 	mov	r0, #227	; 0xe3
    c020:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c024:	eb0000e1 	bl	c3b0 <drawRect>
    c028:	e3a04000 	mov	r4, #0
    c02c:	e3a03078 	mov	r3, #120	; 0x78
    c030:	e3a0201e 	mov	r2, #30
    c034:	e3a0108b 	mov	r1, #139	; 0x8b
    c038:	e59f02f4 	ldr	r0, [pc, #756]	; c334 <noPixel$+0xf4>
    c03c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c040:	eb0000da 	bl	c3b0 <drawRect>
    c044:	e3a04000 	mov	r4, #0
    c048:	e3a03096 	mov	r3, #150	; 0x96
    c04c:	e3a0204b 	mov	r2, #75	; 0x4b
    c050:	e3a0106d 	mov	r1, #109	; 0x6d
    c054:	e59f02dc 	ldr	r0, [pc, #732]	; c338 <noPixel$+0xf8>
    c058:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c05c:	eb0000d3 	bl	c3b0 <drawRect>
    c060:	e59f421c 	ldr	r4, [pc, #540]	; c284 <noPixel$+0x44>
    c064:	e3a0301e 	mov	r3, #30
    c068:	e3a0202d 	mov	r2, #45	; 0x2d
    c06c:	e3a0108b 	mov	r1, #139	; 0x8b
    c070:	e59f02c4 	ldr	r0, [pc, #708]	; c33c <noPixel$+0xfc>
    c074:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c078:	eb0000cc 	bl	c3b0 <drawRect>
    c07c:	e59f4200 	ldr	r4, [pc, #512]	; c284 <noPixel$+0x44>
    c080:	e3a0301e 	mov	r3, #30
    c084:	e3a0202d 	mov	r2, #45	; 0x2d
    c088:	e3a010c7 	mov	r1, #199	; 0xc7
    c08c:	e59f02a8 	ldr	r0, [pc, #680]	; c33c <noPixel$+0xfc>
    c090:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c094:	eb0000c5 	bl	c3b0 <drawRect>
    c098:	e3a04000 	mov	r4, #0
    c09c:	e3a0301e 	mov	r3, #30
    c0a0:	e3a0205a 	mov	r2, #90	; 0x5a
    c0a4:	e3a0106d 	mov	r1, #109	; 0x6d
    c0a8:	e3a00f67 	mov	r0, #412	; 0x19c
    c0ac:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c0b0:	eb0000be 	bl	c3b0 <drawRect>
    c0b4:	e3a04000 	mov	r4, #0
    c0b8:	e3a03078 	mov	r3, #120	; 0x78
    c0bc:	e3a0201e 	mov	r2, #30
    c0c0:	e3a0108b 	mov	r1, #139	; 0x8b
    c0c4:	e59f0274 	ldr	r0, [pc, #628]	; c340 <noPixel$+0x100>
    c0c8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c0cc:	eb0000b7 	bl	c3b0 <drawRect>
    c0d0:	e3a04000 	mov	r4, #0
    c0d4:	e3a0305a 	mov	r3, #90	; 0x5a
    c0d8:	e3a0205a 	mov	r2, #90	; 0x5a
    c0dc:	e3a0106d 	mov	r1, #109	; 0x6d
    c0e0:	e3a00c02 	mov	r0, #512	; 0x200
    c0e4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c0e8:	eb0000b0 	bl	c3b0 <drawRect>
    c0ec:	e59f4190 	ldr	r4, [pc, #400]	; c284 <noPixel$+0x44>
    c0f0:	e3a0301e 	mov	r3, #30
    c0f4:	e3a0201e 	mov	r2, #30
    c0f8:	e3a0108b 	mov	r1, #139	; 0x8b
    c0fc:	e59f0240 	ldr	r0, [pc, #576]	; c344 <noPixel$+0x104>
    c100:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c104:	eb0000a9 	bl	c3b0 <drawRect>
    c108:	e3a04000 	mov	r4, #0
    c10c:	e3a0303c 	mov	r3, #60	; 0x3c
    c110:	e3a0201e 	mov	r2, #30
    c114:	e3a010c7 	mov	r1, #199	; 0xc7
    c118:	e3a00c02 	mov	r0, #512	; 0x200
    c11c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c120:	eb0000a2 	bl	c3b0 <drawRect>
    c124:	e3a04000 	mov	r4, #0
    c128:	e3a0301e 	mov	r3, #30
    c12c:	e3a0201e 	mov	r2, #30
    c130:	e3a010c7 	mov	r1, #199	; 0xc7
    c134:	e59f0208 	ldr	r0, [pc, #520]	; c344 <noPixel$+0x104>
    c138:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c13c:	eb00009b 	bl	c3b0 <drawRect>
    c140:	e3a04000 	mov	r4, #0
    c144:	e3a0301e 	mov	r3, #30
    c148:	e3a0201e 	mov	r2, #30
    c14c:	e3a010e5 	mov	r1, #229	; 0xe5
    c150:	e3a00f8f 	mov	r0, #572	; 0x23c
    c154:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c158:	eb000094 	bl	c3b0 <drawRect>
    c15c:	e3a04000 	mov	r4, #0
    c160:	e3a0301e 	mov	r3, #30
    c164:	e3a0205a 	mov	r2, #90	; 0x5a
    c168:	e3a0106d 	mov	r1, #109	; 0x6d
    c16c:	e3a00f99 	mov	r0, #612	; 0x264
    c170:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c174:	eb00008d 	bl	c3b0 <drawRect>
    c178:	e3a04000 	mov	r4, #0
    c17c:	e3a0301e 	mov	r3, #30
    c180:	e3a0205a 	mov	r2, #90	; 0x5a
    c184:	e3a010e5 	mov	r1, #229	; 0xe5
    c188:	e3a00f99 	mov	r0, #612	; 0x264
    c18c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c190:	eb000086 	bl	c3b0 <drawRect>
    c194:	e3a04000 	mov	r4, #0
    c198:	e3a0305a 	mov	r3, #90	; 0x5a
    c19c:	e3a0201e 	mov	r2, #30
    c1a0:	e3a0108b 	mov	r1, #139	; 0x8b
    c1a4:	e59f019c 	ldr	r0, [pc, #412]	; c348 <noPixel$+0x108>
    c1a8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c1ac:	eb00007f 	bl	c3b0 <drawRect>
    c1b0:	e3a04000 	mov	r4, #0
    c1b4:	e3a03096 	mov	r3, #150	; 0x96
    c1b8:	e3a02050 	mov	r2, #80	; 0x50
    c1bc:	e3a0106d 	mov	r1, #109	; 0x6d
    c1c0:	e3a00fb2 	mov	r0, #712	; 0x2c8
    c1c4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c1c8:	eb000078 	bl	c3b0 <drawRect>
    c1cc:	e59f40b0 	ldr	r4, [pc, #176]	; c284 <noPixel$+0x44>
    c1d0:	e3a0301e 	mov	r3, #30
    c1d4:	e3a02032 	mov	r2, #50	; 0x32
    c1d8:	e3a0108b 	mov	r1, #139	; 0x8b
    c1dc:	e59f0168 	ldr	r0, [pc, #360]	; c34c <noPixel$+0x10c>
    c1e0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c1e4:	eb000071 	bl	c3b0 <drawRect>
    c1e8:	e59f4094 	ldr	r4, [pc, #148]	; c284 <noPixel$+0x44>
    c1ec:	e3a0301e 	mov	r3, #30
    c1f0:	e3a02032 	mov	r2, #50	; 0x32
    c1f4:	e3a010c7 	mov	r1, #199	; 0xc7
    c1f8:	e3a00fb2 	mov	r0, #712	; 0x2c8
    c1fc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c200:	eb00006a 	bl	c3b0 <drawRect>
    c204:	e8bd8010 	pop	{r4, pc}

0000c208 <DrawChar>:
    c208:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    c20c:	e1a09001 	mov	r9, r1
    c210:	e59f4138 	ldr	r4, [pc, #312]	; c350 <noPixel$+0x110>
    c214:	e0844200 	add	r4, r4, r0, lsl #4
    c218:	e1a06002 	mov	r6, r2

0000c21c <charLoop$>:
    c21c:	e1a05003 	mov	r5, r3
    c220:	e3a08001 	mov	r8, #1
    c224:	e4d47001 	ldrb	r7, [r4], #1

0000c228 <rowLoop$>:
    c228:	e1170008 	tst	r7, r8
    c22c:	0a000003 	beq	c240 <noPixel$>
    c230:	e1a00005 	mov	r0, r5
    c234:	e1a01006 	mov	r1, r6
    c238:	e1a02009 	mov	r2, r9
    c23c:	eb000051 	bl	c388 <drawPixel>

0000c240 <noPixel$>:
    c240:	e2855001 	add	r5, r5, #1
    c244:	e1a08088 	lsl	r8, r8, #1
    c248:	e3180c01 	tst	r8, #256	; 0x100
    c24c:	0afffff5 	beq	c228 <rowLoop$>
    c250:	e2866001 	add	r6, r6, #1
    c254:	e314000f 	tst	r4, #15
    c258:	1affffef 	bne	c21c <charLoop$>
    c25c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    c260:	0000967f 	.word	0x0000967f
    c264:	0000027a 	.word	0x0000027a
    c268:	000001b5 	.word	0x000001b5
    c26c:	0000a550 	.word	0x0000a550
    c270:	000001e3 	.word	0x000001e3
    c274:	00000221 	.word	0x00000221
    c278:	0000a540 	.word	0x0000a540
    c27c:	000001eb 	.word	0x000001eb
    c280:	00009080 	.word	0x00009080
    c284:	0000297e 	.word	0x0000297e
    c288:	0000a4f0 	.word	0x0000a4f0
    c28c:	00000172 	.word	0x00000172
    c290:	0000a530 	.word	0x0000a530
    c294:	000001e7 	.word	0x000001e7
    c298:	00000247 	.word	0x00000247
    c29c:	00000285 	.word	0x00000285
    c2a0:	0000ffff 	.word	0x0000ffff
    c2a4:	000001df 	.word	0x000001df
    c2a8:	00000243 	.word	0x00000243
    c2ac:	00003707 	.word	0x00003707
    c2b0:	0000011f 	.word	0x0000011f
    c2b4:	0000015b 	.word	0x0000015b
    c2b8:	0000013d 	.word	0x0000013d
    c2bc:	00000223 	.word	0x00000223
    c2c0:	0000025f 	.word	0x0000025f
    c2c4:	00000205 	.word	0x00000205
    c2c8:	00000241 	.word	0x00000241
    c2cc:	00000287 	.word	0x00000287
    c2d0:	000002a5 	.word	0x000002a5
    c2d4:	000002eb 	.word	0x000002eb
    c2d8:	00000309 	.word	0x00000309
    c2dc:	00000327 	.word	0x00000327
    c2e0:	00000122 	.word	0x00000122
    c2e4:	00000345 	.word	0x00000345
    c2e8:	00000363 	.word	0x00000363
    c2ec:	0000038b 	.word	0x0000038b
    c2f0:	0000ff27 	.word	0x0000ff27
    c2f4:	00000115 	.word	0x00000115
    c2f8:	00000179 	.word	0x00000179
    c2fc:	00000269 	.word	0x00000269
    c300:	000002cd 	.word	0x000002cd
    c304:	00000331 	.word	0x00000331
    c308:	0000034f 	.word	0x0000034f
    c30c:	00000d7f 	.word	0x00000d7f
    c310:	00000102 	.word	0x00000102
    c314:	00000166 	.word	0x00000166
    c318:	00000126 	.word	0x00000126
    c31c:	000001ca 	.word	0x000001ca
    c320:	0000022e 	.word	0x0000022e
    c324:	00000265 	.word	0x00000265
    c328:	00000283 	.word	0x00000283
    c32c:	000002ba 	.word	0x000002ba
    c330:	000002f6 	.word	0x000002f6
    c334:	00000101 	.word	0x00000101
    c338:	00000147 	.word	0x00000147
    c33c:	00000165 	.word	0x00000165
    c340:	000001ba 	.word	0x000001ba
    c344:	0000021e 	.word	0x0000021e
    c348:	00000282 	.word	0x00000282
    c34c:	000002e6 	.word	0x000002e6
    c350:	00009cf0 	.word	0x00009cf0

0000c354 <clearScreen>:
    c354:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c358:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    c35c:	e3a04000 	mov	r4, #0
    c360:	e3a05000 	mov	r5, #0
    c364:	e59f00d0 	ldr	r0, [pc, #208]	; c43c <waitLoop+0x10>
    c368:	e5906014 	ldr	r6, [r0, #20]
    c36c:	e5907018 	ldr	r7, [r0, #24]
    c370:	e3a08000 	mov	r8, #0
    c374:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    c378:	eb00000c 	bl	c3b0 <drawRect>
    c37c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    c380:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c384:	e1a0f00e 	mov	pc, lr

0000c388 <drawPixel>:
    c388:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c38c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    c390:	e0804501 	add	r4, r0, r1, lsl #10
    c394:	e1a04084 	lsl	r4, r4, #1
    c398:	e59f00a0 	ldr	r0, [pc, #160]	; c440 <waitLoop+0x14>
    c39c:	e5900000 	ldr	r0, [r0]
    c3a0:	e18020b4 	strh	r2, [r0, r4]
    c3a4:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    c3a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c3ac:	e1a0f00e 	mov	pc, lr

0000c3b0 <drawRect>:
    c3b0:	e1a0000d 	mov	r0, sp
    c3b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c3b8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    c3bc:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    c3c0:	e0866004 	add	r6, r6, r4
    c3c4:	e0877005 	add	r7, r7, r5

0000c3c8 <drawRectForLoopX>:
    c3c8:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000c3cc <drawRectForLoopY>:
    c3cc:	e1a00004 	mov	r0, r4
    c3d0:	e1a01005 	mov	r1, r5
    c3d4:	e1a02008 	mov	r2, r8
    c3d8:	ebffffea 	bl	c388 <drawPixel>
    c3dc:	e2855001 	add	r5, r5, #1
    c3e0:	e1550007 	cmp	r5, r7
    c3e4:	bafffff8 	blt	c3cc <drawRectForLoopY>
    c3e8:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    c3ec:	e2844001 	add	r4, r4, #1
    c3f0:	e1540006 	cmp	r4, r6
    c3f4:	bafffff3 	blt	c3c8 <drawRectForLoopX>
    c3f8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    c3fc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c400:	e28dd014 	add	sp, sp, #20
    c404:	e1a0f00e 	mov	pc, lr

0000c408 <positionToArrayOffset>:
    c408:	e8bd0007 	pop	{r0, r1, r2}
    c40c:	e0030192 	mul	r3, r2, r1
    c410:	e0833000 	add	r3, r3, r0
    c414:	e92d0008 	stmfd	sp!, {r3}
    c418:	e1a0f00e 	mov	pc, lr

0000c41c <startTimer>:
    c41c:	e1a03000 	mov	r3, r0
    c420:	e59f001c 	ldr	r0, [pc, #28]	; c444 <waitLoop+0x18>
    c424:	e5901000 	ldr	r1, [r0]
    c428:	e0811003 	add	r1, r1, r3

0000c42c <waitLoop>:
    c42c:	e5902000 	ldr	r2, [r0]
    c430:	e1510002 	cmp	r1, r2
    c434:	8afffffc 	bhi	c42c <waitLoop>
    c438:	e1a0f00e 	mov	pc, lr
    c43c:	00009080 	.word	0x00009080
    c440:	000090e0 	.word	0x000090e0
    c444:	3f003004 	.word	0x3f003004
