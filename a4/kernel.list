
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea000962 	b	a590 <main>

Disassembly of section .text:

0000a590 <main>:
    a590:	e3a0d902 	mov	sp, #32768	; 0x8000
    a594:	eb0003ef 	bl	b558 <EnableJTAG>
    a598:	eb000411 	bl	b5e4 <InitFrameBuffer>

0000a59c <MainMenu>:
    a59c:	eb000178 	bl	ab84 <ClearScreenBlack>
    a5a0:	eb0004df 	bl	b924 <drawMainMenu>
    a5a4:	e3a09000 	mov	r9, #0

0000a5a8 <MainMenuPrompt>:
    a5a8:	e59f0eb8 	ldr	r0, [pc, #3768]	; b468 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x70>
    a5ac:	eb000878 	bl	c794 <startTimer>
    a5b0:	eb00042b 	bl	b664 <sampleSNES>
    a5b4:	e1a0a000 	mov	sl, r0
    a5b8:	e3e01c01 	mvn	r1, #256	; 0x100
    a5bc:	e1c00001 	bic	r0, r0, r1
    a5c0:	e3500000 	cmp	r0, #0
    a5c4:	0a00000a 	beq	a5f4 <MainMenuAPressed>
    a5c8:	e1a0000a 	mov	r0, sl
    a5cc:	e3e01010 	mvn	r1, #16
    a5d0:	e1c00001 	bic	r0, r0, r1
    a5d4:	e3500000 	cmp	r0, #0
    a5d8:	0a000009 	beq	a604 <MainMenuUpPressed>
    a5dc:	e1a0000a 	mov	r0, sl
    a5e0:	e3e01020 	mvn	r1, #32
    a5e4:	e1c00001 	bic	r0, r0, r1
    a5e8:	e3500000 	cmp	r0, #0
    a5ec:	0a00000b 	beq	a620 <MainMenuDownPressed>
    a5f0:	eaffffec 	b	a5a8 <MainMenuPrompt>

0000a5f4 <MainMenuAPressed>:
    a5f4:	e3590000 	cmp	r9, #0
    a5f8:	0a00000f 	beq	a63c <StartGame>
    a5fc:	eb000160 	bl	ab84 <ClearScreenBlack>
    a600:	ea00005e 	b	a780 <mainEnd>

0000a604 <MainMenuUpPressed>:
    a604:	e3590000 	cmp	r9, #0
    a608:	0affffe6 	beq	a5a8 <MainMenuPrompt>
    a60c:	e3a09000 	mov	r9, #0
    a610:	eb000526 	bl	bab0 <setMainMenuIndicatorStart>
    a614:	e3a00801 	mov	r0, #65536	; 0x10000
    a618:	eb00085d 	bl	c794 <startTimer>
    a61c:	eaffffe1 	b	a5a8 <MainMenuPrompt>

0000a620 <MainMenuDownPressed>:
    a620:	e3590001 	cmp	r9, #1
    a624:	0affffdf 	beq	a5a8 <MainMenuPrompt>
    a628:	e3a09001 	mov	r9, #1
    a62c:	eb00052f 	bl	baf0 <setMainMenuIndicatorQuit>
    a630:	e3a00801 	mov	r0, #65536	; 0x10000
    a634:	eb000856 	bl	c794 <startTimer>
    a638:	eaffffda 	b	a5a8 <MainMenuPrompt>

0000a63c <StartGame>:
    a63c:	e3a01000 	mov	r1, #0
    a640:	e59f0e24 	ldr	r0, [pc, #3620]	; b46c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x74>
    a644:	e5801000 	str	r1, [r0]
    a648:	eb000405 	bl	b664 <sampleSNES>
    a64c:	eb000159 	bl	abb8 <tetrisInitGrid>
    a650:	eb00014b 	bl	ab84 <ClearScreenBlack>
    a654:	eb0000c4 	bl	a96c <DrawBoard>
    a658:	eb0001f7 	bl	ae3c <tetrisCreateNewBlock>

0000a65c <newBlock>:
    a65c:	e59f0e08 	ldr	r0, [pc, #3592]	; b46c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x74>
    a660:	e5901000 	ldr	r1, [r0]
    a664:	e2811001 	add	r1, r1, #1
    a668:	e5801000 	str	r1, [r0]
    a66c:	eb000107 	bl	aa90 <UpdateScore>

0000a670 <dropLoop>:
    a670:	e59f0df8 	ldr	r0, [pc, #3576]	; b470 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x78>
    a674:	e590a000 	ldr	sl, [r0]
    a678:	e59f0df4 	ldr	r0, [pc, #3572]	; b474 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x7c>
    a67c:	e08aa000 	add	sl, sl, r0

0000a680 <rotateLoop>:
    a680:	eb0003f7 	bl	b664 <sampleSNES>
    a684:	e1a05000 	mov	r5, r0
    a688:	e3e01008 	mvn	r1, #8
    a68c:	e1c00001 	bic	r0, r0, r1
    a690:	e3500000 	cmp	r0, #0
    a694:	0a000014 	beq	a6ec <mainLoopStartPressed>
    a698:	e1a00005 	mov	r0, r5
    a69c:	e3e01b01 	mvn	r1, #1024	; 0x400
    a6a0:	e1c00001 	bic	r0, r0, r1
    a6a4:	e3500000 	cmp	r0, #0
    a6a8:	0a000011 	beq	a6f4 <mainLoopLTPressed>
    a6ac:	e1a00005 	mov	r0, r5
    a6b0:	e3e01b02 	mvn	r1, #2048	; 0x800
    a6b4:	e1c00001 	bic	r0, r0, r1
    a6b8:	e3500000 	cmp	r0, #0
    a6bc:	0a00000f 	beq	a700 <mainLoopRTPressed>
    a6c0:	e1a00005 	mov	r0, r5
    a6c4:	e3e01040 	mvn	r1, #64	; 0x40
    a6c8:	e1c00001 	bic	r0, r0, r1
    a6cc:	e3500000 	cmp	r0, #0
    a6d0:	0a00000d 	beq	a70c <mainLoopLeftPressed>
    a6d4:	e1a00005 	mov	r0, r5
    a6d8:	e3e01080 	mvn	r1, #128	; 0x80
    a6dc:	e1c00001 	bic	r0, r0, r1
    a6e0:	e3500000 	cmp	r0, #0
    a6e4:	0a00000c 	beq	a71c <mainLoopRightPressed>
    a6e8:	ea00000f 	b	a72c <userTranslationsDone>

0000a6ec <mainLoopStartPressed>:
    a6ec:	eb000068 	bl	a894 <PauseMenuStart>
    a6f0:	ea00000d 	b	a72c <userTranslationsDone>

0000a6f4 <mainLoopLTPressed>:
    a6f4:	e3a00000 	mov	r0, #0
    a6f8:	eb0002cf 	bl	b23c <tetrisRotateBlock>
    a6fc:	ea00000a 	b	a72c <userTranslationsDone>

0000a700 <mainLoopRTPressed>:
    a700:	e3a00001 	mov	r0, #1
    a704:	eb0002cc 	bl	b23c <tetrisRotateBlock>
    a708:	ea000007 	b	a72c <userTranslationsDone>

0000a70c <mainLoopLeftPressed>:
    a70c:	e3e00000 	mvn	r0, #0
    a710:	e3a01000 	mov	r1, #0
    a714:	eb0002e7 	bl	b2b8 <tetrisTranslateBlock>
    a718:	ea000003 	b	a72c <userTranslationsDone>

0000a71c <mainLoopRightPressed>:
    a71c:	e3a00001 	mov	r0, #1
    a720:	e3a01000 	mov	r1, #0
    a724:	eb0002e3 	bl	b2b8 <tetrisTranslateBlock>
    a728:	eaffffff 	b	a72c <userTranslationsDone>

0000a72c <userTranslationsDone>:
    a72c:	eb00018d 	bl	ad68 <tetrisUpdateGrid>
    a730:	eb000254 	bl	b088 <tetrisDrawBlock>
    a734:	eb000158 	bl	ac9c <tetrisDrawGrid>
    a738:	e59f0d30 	ldr	r0, [pc, #3376]	; b470 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x78>
    a73c:	e5901000 	ldr	r1, [r0]
    a740:	e151000a 	cmp	r1, sl
    a744:	baffffcd 	blt	a680 <rotateLoop>
    a748:	e3a00000 	mov	r0, #0
    a74c:	e3a01001 	mov	r1, #1
    a750:	eb0002d8 	bl	b2b8 <tetrisTranslateBlock>
    a754:	eb000035 	bl	a830 <tetrisGridClearCompleteRows>
    a758:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    a75c:	e3300000 	teq	r0, #0
    a760:	0a000005 	beq	a77c <noClearedRows>
    a764:	1affffff 	bne	a768 <clearedRows>

0000a768 <clearedRows>:
    a768:	e59f1cfc 	ldr	r1, [pc, #3324]	; b46c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x74>
    a76c:	e591a000 	ldr	sl, [r1]
    a770:	e08aa000 	add	sl, sl, r0
    a774:	e581a000 	str	sl, [r1]
    a778:	eb0000c4 	bl	aa90 <UpdateScore>

0000a77c <noClearedRows>:
    a77c:	eaffffbb 	b	a670 <dropLoop>

0000a780 <mainEnd>:
    a780:	eafffffe 	b	a780 <mainEnd>

0000a784 <tetrisGridIsRowComplete>:
    a784:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    a788:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a78c:	e92d00f0 	push	{r4, r5, r6, r7}
    a790:	e59f4ce0 	ldr	r4, [pc, #3296]	; b478 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x80>
    a794:	e89400e0 	ldm	r4, {r5, r6, r7}
    a798:	e59f8cdc 	ldr	r8, [pc, #3292]	; b47c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x84>
    a79c:	e3a00000 	mov	r0, #0
    a7a0:	e3a03001 	mov	r3, #1
    a7a4:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

0000a7a8 <tetrisGridIsRowComplete_for_x_lt_cols_loop>:
    a7a8:	e92d0003 	push	{r0, r1}
    a7ac:	e92d0003 	push	{r0, r1}
    a7b0:	eb00011a 	bl	ac20 <tetrisGetGridBlockColor>
    a7b4:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)
    a7b8:	e3330000 	teq	r3, #0
    a7bc:	e8bd0003 	pop	{r0, r1}
    a7c0:	049d3004 	popeq	{r3}		; (ldreq r3, [sp], #4)
    a7c4:	03a03000 	moveq	r3, #0
    a7c8:	052d3004 	pusheq	{r3}		; (streq r3, [sp, #-4]!)
    a7cc:	0a000002 	beq	a7dc <tetrisGridIsRowCompleteEnd>
    a7d0:	e2800001 	add	r0, r0, #1
    a7d4:	e1500005 	cmp	r0, r5
    a7d8:	bafffff2 	blt	a7a8 <tetrisGridIsRowComplete_for_x_lt_cols_loop>

0000a7dc <tetrisGridIsRowCompleteEnd>:
    a7dc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    a7e0:	e8bd00f0 	pop	{r4, r5, r6, r7}
    a7e4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a7e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7ec:	e1a0f00e 	mov	pc, lr

0000a7f0 <tetrisGridClearRow>:
    a7f0:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    a7f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a7f8:	e92d0070 	push	{r4, r5, r6}
    a7fc:	e59f4c74 	ldr	r4, [pc, #3188]	; b478 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x80>
    a800:	e8940060 	ldm	r4, {r5, r6}
    a804:	e3a00000 	mov	r0, #0

0000a808 <tetrisGridClearRow_for_x_lt_cols_loop>:
    a808:	e92d0003 	push	{r0, r1}
    a80c:	e92d0003 	push	{r0, r1}
    a810:	eb00011b 	bl	ac84 <tetrisClearGridBlock>
    a814:	e8bd0003 	pop	{r0, r1}
    a818:	0a000002 	beq	a828 <tetrisGridClearRowEnd>
    a81c:	e2800001 	add	r0, r0, #1
    a820:	e1500005 	cmp	r0, r5
    a824:	bafffff7 	blt	a808 <tetrisGridClearRow_for_x_lt_cols_loop>

0000a828 <tetrisGridClearRowEnd>:
    a828:	e8bd0070 	pop	{r4, r5, r6}
    a82c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a830 <tetrisGridClearCompleteRows>:
    a830:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a834:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a838:	e59f5c38 	ldr	r5, [pc, #3128]	; b478 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x80>
    a83c:	e89501c0 	ldm	r5, {r6, r7, r8}
    a840:	e59f9c34 	ldr	r9, [pc, #3124]	; b47c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x84>
    a844:	e1a04007 	mov	r4, r7
    a848:	e2444001 	sub	r4, r4, #1
    a84c:	e3a0a000 	mov	sl, #0

0000a850 <tetrisGridClearCompleteRows_for_curRow_ge_0_loop>:
    a850:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    a854:	ebffffca 	bl	a784 <tetrisGridIsRowComplete>
    a858:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    a85c:	e3300000 	teq	r0, #0
    a860:	0a000003 	beq	a874 <tetrisGridClearCompleteRowsRowIsNotComplete>
    a864:	1affffff 	bne	a868 <tetrisGridClearCompleteRowsRowIsComplete>

0000a868 <tetrisGridClearCompleteRowsRowIsComplete>:
    a868:	e28aa001 	add	sl, sl, #1
    a86c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    a870:	ebffffde 	bl	a7f0 <tetrisGridClearRow>

0000a874 <tetrisGridClearCompleteRowsRowIsNotComplete>:
    a874:	e2444001 	sub	r4, r4, #1
    a878:	e3540000 	cmp	r4, #0
    a87c:	aafffff3 	bge	a850 <tetrisGridClearCompleteRows_for_curRow_ge_0_loop>
    a880:	e1a0000a 	mov	r0, sl
    a884:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a888:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a88c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a890:	e1a0f00e 	mov	pc, lr

0000a894 <PauseMenuStart>:
    a894:	e92d4610 	push	{r4, r9, sl, lr}
    a898:	eb0003ea 	bl	b848 <drawPauseMenu>
    a89c:	e3a09000 	mov	r9, #0

0000a8a0 <PauseMenuPrompt>:
    a8a0:	e59f0bc0 	ldr	r0, [pc, #3008]	; b468 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x70>
    a8a4:	eb0007ba 	bl	c794 <startTimer>
    a8a8:	eb00036d 	bl	b664 <sampleSNES>
    a8ac:	e1a0a000 	mov	sl, r0
    a8b0:	e3e01008 	mvn	r1, #8
    a8b4:	e1c00001 	bic	r0, r0, r1
    a8b8:	e3500000 	cmp	r0, #0
    a8bc:	0a00000f 	beq	a900 <PauseMenuStartPressed>
    a8c0:	e1a0000a 	mov	r0, sl
    a8c4:	e3e01c01 	mvn	r1, #256	; 0x100
    a8c8:	e1c00001 	bic	r0, r0, r1
    a8cc:	e3500000 	cmp	r0, #0
    a8d0:	0a000013 	beq	a924 <PauseMenuAPressed>
    a8d4:	e1a0000a 	mov	r0, sl
    a8d8:	e3e01010 	mvn	r1, #16
    a8dc:	e1c00001 	bic	r0, r0, r1
    a8e0:	e3500000 	cmp	r0, #0
    a8e4:	0a000011 	beq	a930 <PauseMenuUpPressed>
    a8e8:	e1a0000a 	mov	r0, sl
    a8ec:	e3e01020 	mvn	r1, #32
    a8f0:	e1c00001 	bic	r0, r0, r1
    a8f4:	e3500000 	cmp	r0, #0
    a8f8:	0a000013 	beq	a94c <PauseMenuDownPressed>
    a8fc:	eaffffe7 	b	a8a0 <PauseMenuPrompt>

0000a900 <PauseMenuStartPressed>:
    a900:	e3a04000 	mov	r4, #0
    a904:	e3a03f9a 	mov	r3, #616	; 0x268
    a908:	e3a02fa2 	mov	r2, #648	; 0x288
    a90c:	e3a0104c 	mov	r1, #76	; 0x4c
    a910:	e3a000bc 	mov	r0, #188	; 0xbc
    a914:	e92d001f 	push	{r0, r1, r2, r3, r4}
    a918:	eb000782 	bl	c728 <drawRect>
    a91c:	eb000012 	bl	a96c <DrawBoard>
    a920:	e8bd8610 	pop	{r4, r9, sl, pc}

0000a924 <PauseMenuAPressed>:
    a924:	e3590000 	cmp	r9, #0
    a928:	0affff43 	beq	a63c <StartGame>
    a92c:	eaffff1a 	b	a59c <MainMenu>

0000a930 <PauseMenuUpPressed>:
    a930:	e3590000 	cmp	r9, #0
    a934:	0affffd9 	beq	a8a0 <PauseMenuPrompt>
    a938:	e3a09000 	mov	r9, #0
    a93c:	eb00043b 	bl	ba30 <setPauseMenuIndicatorRestart>
    a940:	e3a00801 	mov	r0, #65536	; 0x10000
    a944:	eb000792 	bl	c794 <startTimer>
    a948:	eaffffd4 	b	a8a0 <PauseMenuPrompt>

0000a94c <PauseMenuDownPressed>:
    a94c:	e3590001 	cmp	r9, #1
    a950:	0affffd2 	beq	a8a0 <PauseMenuPrompt>
    a954:	e3a09001 	mov	r9, #1
    a958:	eb000444 	bl	ba70 <setPauseMenuIndicatorQuit>
    a95c:	e3a00801 	mov	r0, #65536	; 0x10000
    a960:	eb00078b 	bl	c794 <startTimer>
    a964:	eaffffcd 	b	a8a0 <PauseMenuPrompt>
    a968:	e8bd8610 	pop	{r4, r9, sl, pc}

0000a96c <DrawBoard>:
    a96c:	e92d4010 	push	{r4, lr}
    a970:	e3a04a0e 	mov	r4, #57344	; 0xe000
    a974:	e3a03004 	mov	r3, #4
    a978:	e3a02fa2 	mov	r2, #648	; 0x288
    a97c:	e3a0104c 	mov	r1, #76	; 0x4c
    a980:	e3a000bc 	mov	r0, #188	; 0xbc
    a984:	e92d001f 	push	{r0, r1, r2, r3, r4}
    a988:	eb000766 	bl	c728 <drawRect>
    a98c:	e3a04a0e 	mov	r4, #57344	; 0xe000
    a990:	e3a03004 	mov	r3, #4
    a994:	e3a02fa2 	mov	r2, #648	; 0x288
    a998:	e3a01e2b 	mov	r1, #688	; 0x2b0
    a99c:	e3a000bc 	mov	r0, #188	; 0xbc
    a9a0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    a9a4:	eb00075f 	bl	c728 <drawRect>
    a9a8:	e3a04a0e 	mov	r4, #57344	; 0xe000
    a9ac:	e3a03e26 	mov	r3, #608	; 0x260
    a9b0:	e3a02004 	mov	r2, #4
    a9b4:	e3a01050 	mov	r1, #80	; 0x50
    a9b8:	e3a000bc 	mov	r0, #188	; 0xbc
    a9bc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    a9c0:	eb000758 	bl	c728 <drawRect>
    a9c4:	e3a04a0e 	mov	r4, #57344	; 0xe000
    a9c8:	e3a03e26 	mov	r3, #608	; 0x260
    a9cc:	e3a02004 	mov	r2, #4
    a9d0:	e3a01050 	mov	r1, #80	; 0x50
    a9d4:	e3a00c02 	mov	r0, #512	; 0x200
    a9d8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    a9dc:	eb000751 	bl	c728 <drawRect>
    a9e0:	e3a04a0e 	mov	r4, #57344	; 0xe000
    a9e4:	e3a03e26 	mov	r3, #608	; 0x260
    a9e8:	e3a02004 	mov	r2, #4
    a9ec:	e3a01050 	mov	r1, #80	; 0x50
    a9f0:	e3a00d0d 	mov	r0, #832	; 0x340
    a9f4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    a9f8:	eb00074a 	bl	c728 <drawRect>
    a9fc:	e59f0a7c 	ldr	r0, [pc, #2684]	; b480 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x88>
    aa00:	e59f1a7c 	ldr	r1, [pc, #2684]	; b484 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x8c>
    aa04:	e59f2a7c 	ldr	r2, [pc, #2684]	; b488 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x90>
    aa08:	e3a030e6 	mov	r3, #230	; 0xe6
    aa0c:	eb0003f6 	bl	b9ec <WriteSentence>
    aa10:	e59f4a6c 	ldr	r4, [pc, #2668]	; b484 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x8c>
    aa14:	e3a03036 	mov	r3, #54	; 0x36
    aa18:	e3a02036 	mov	r2, #54	; 0x36
    aa1c:	e3a010d3 	mov	r1, #211	; 0xd3
    aa20:	e59f0a64 	ldr	r0, [pc, #2660]	; b48c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x94>
    aa24:	e92d001f 	push	{r0, r1, r2, r3, r4}
    aa28:	eb00073e 	bl	c728 <drawRect>
    aa2c:	e59f4a5c 	ldr	r4, [pc, #2652]	; b490 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x98>
    aa30:	e3a03032 	mov	r3, #50	; 0x32
    aa34:	e3a02032 	mov	r2, #50	; 0x32
    aa38:	e3a010d5 	mov	r1, #213	; 0xd5
    aa3c:	e59f0a50 	ldr	r0, [pc, #2640]	; b494 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x9c>
    aa40:	e92d001f 	push	{r0, r1, r2, r3, r4}
    aa44:	eb000737 	bl	c728 <drawRect>
    aa48:	e59f0a48 	ldr	r0, [pc, #2632]	; b498 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xa0>
    aa4c:	e59f1a48 	ldr	r1, [pc, #2632]	; b49c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xa4>
    aa50:	e59f2a48 	ldr	r2, [pc, #2632]	; b4a0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xa8>
    aa54:	e59f3a48 	ldr	r3, [pc, #2632]	; b4a4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xac>
    aa58:	eb0003e3 	bl	b9ec <WriteSentence>
    aa5c:	e59f4a38 	ldr	r4, [pc, #2616]	; b49c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xa4>
    aa60:	e3a03088 	mov	r3, #136	; 0x88
    aa64:	e3a02088 	mov	r2, #136	; 0x88
    aa68:	e3a01e21 	mov	r1, #528	; 0x210
    aa6c:	e3a00fa1 	mov	r0, #644	; 0x284
    aa70:	e92d001f 	push	{r0, r1, r2, r3, r4}
    aa74:	eb00072b 	bl	c728 <drawRect>
    aa78:	eb0002a2 	bl	b508 <randomNumber>
    aa7c:	e59f1a24 	ldr	r1, [pc, #2596]	; b4a8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb0>
    aa80:	e5810000 	str	r0, [r1]
    aa84:	eb00010b 	bl	aeb8 <drawQueue>
    aa88:	eb000000 	bl	aa90 <UpdateScore>
    aa8c:	e8bd8010 	pop	{r4, pc}

0000aa90 <UpdateScore>:
    aa90:	e92d4010 	push	{r4, lr}
    aa94:	e59f49f4 	ldr	r4, [pc, #2548]	; b490 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x98>
    aa98:	e3a03014 	mov	r3, #20
    aa9c:	e3a02018 	mov	r2, #24
    aaa0:	e3a010e4 	mov	r1, #228	; 0xe4
    aaa4:	e59f0a00 	ldr	r0, [pc, #2560]	; b4ac <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb4>
    aaa8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    aaac:	eb00071d 	bl	c728 <drawRect>
    aab0:	e59f09b4 	ldr	r0, [pc, #2484]	; b46c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x74>
    aab4:	e5901000 	ldr	r1, [r0]
    aab8:	e3510063 	cmp	r1, #99	; 0x63
    aabc:	ca000011 	bgt	ab08 <threeDigitScore>
    aac0:	e3510009 	cmp	r1, #9
    aac4:	ca000003 	bgt	aad8 <twoDigitScore>

0000aac8 <oneDigitScore>:
    aac8:	e59f09e0 	ldr	r0, [pc, #2528]	; b4b0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb8>
    aacc:	e2811030 	add	r1, r1, #48	; 0x30
    aad0:	e5c01006 	strb	r1, [r0, #6]
    aad4:	ea000010 	b	ab1c <PrintScore>

0000aad8 <twoDigitScore>:
    aad8:	e59f09d0 	ldr	r0, [pc, #2512]	; b4b0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb8>
    aadc:	e3a02000 	mov	r2, #0

0000aae0 <twoDigitScoreLoop>:
    aae0:	e351000a 	cmp	r1, #10
    aae4:	ba000002 	blt	aaf4 <twoDigitScoreLoopDone>
    aae8:	e241100a 	sub	r1, r1, #10
    aaec:	e2822001 	add	r2, r2, #1
    aaf0:	eafffffa 	b	aae0 <twoDigitScoreLoop>

0000aaf4 <twoDigitScoreLoopDone>:
    aaf4:	e2811030 	add	r1, r1, #48	; 0x30
    aaf8:	e2822030 	add	r2, r2, #48	; 0x30
    aafc:	e5c02005 	strb	r2, [r0, #5]
    ab00:	e5c01006 	strb	r1, [r0, #6]
    ab04:	ea000004 	b	ab1c <PrintScore>

0000ab08 <threeDigitScore>:
    ab08:	e2411064 	sub	r1, r1, #100	; 0x64
    ab0c:	e59f099c 	ldr	r0, [pc, #2460]	; b4b0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb8>
    ab10:	e3a02031 	mov	r2, #49	; 0x31
    ab14:	e5c02004 	strb	r2, [r0, #4]
    ab18:	eaffffee 	b	aad8 <twoDigitScore>

0000ab1c <PrintScore>:
    ab1c:	e59f098c 	ldr	r0, [pc, #2444]	; b4b0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb8>
    ab20:	e3a01000 	mov	r1, #0
    ab24:	e59f2980 	ldr	r2, [pc, #2432]	; b4ac <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb4>
    ab28:	e3a030e6 	mov	r3, #230	; 0xe6
    ab2c:	eb0003ae 	bl	b9ec <WriteSentence>
    ab30:	e59f0934 	ldr	r0, [pc, #2356]	; b46c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x74>
    ab34:	e5900000 	ldr	r0, [r0]
    ab38:	e59f1974 	ldr	r1, [pc, #2420]	; b4b4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xbc>
    ab3c:	e3a02001 	mov	r2, #1
    ab40:	e3500096 	cmp	r0, #150	; 0x96
    ab44:	a5812000 	strge	r2, [r1]
    ab48:	e59f0964 	ldr	r0, [pc, #2404]	; b4b4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xbc>
    ab4c:	e5900000 	ldr	r0, [r0]
    ab50:	e3500001 	cmp	r0, #1
    ab54:	ba000002 	blt	ab64 <ScoreReturn>
    ab58:	eb0003f4 	bl	bb30 <drawVictoryScreen>
    ab5c:	e8bd0011 	pop	{r0, r4}
    ab60:	ea000000 	b	ab68 <gameOver>

0000ab64 <ScoreReturn>:
    ab64:	e8bd8010 	pop	{r4, pc}

0000ab68 <gameOver>:
    ab68:	e59f08f8 	ldr	r0, [pc, #2296]	; b468 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x70>
    ab6c:	eb000708 	bl	c794 <startTimer>
    ab70:	eb0002bb 	bl	b664 <sampleSNES>
    ab74:	e59f193c 	ldr	r1, [pc, #2364]	; b4b8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xc0>
    ab78:	e1500001 	cmp	r0, r1
    ab7c:	1afffe86 	bne	a59c <MainMenu>
    ab80:	eafffff8 	b	ab68 <gameOver>

0000ab84 <ClearScreenBlack>:
    ab84:	e92d4600 	push	{r9, sl, lr}
    ab88:	e59f092c 	ldr	r0, [pc, #2348]	; b4bc <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xc4>
    ab8c:	e5909014 	ldr	r9, [r0, #20]
    ab90:	e590a018 	ldr	sl, [r0, #24]
    ab94:	e3a00000 	mov	r0, #0
    ab98:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab9c:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    aba0:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    aba4:	e3a00000 	mov	r0, #0
    aba8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abb0:	eb0006dc 	bl	c728 <drawRect>
    abb4:	e8bd8600 	pop	{r9, sl, pc}

0000abb8 <tetrisInitGrid>:
    abb8:	e59f08b8 	ldr	r0, [pc, #2232]	; b478 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x80>
    abbc:	e280100c 	add	r1, r0, #12
    abc0:	e59f28b4 	ldr	r2, [pc, #2228]	; b47c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x84>
    abc4:	e3a03000 	mov	r3, #0

0000abc8 <forEach_block_in_tetrisGrid_loop>:
    abc8:	e5813000 	str	r3, [r1]
    abcc:	e2811004 	add	r1, r1, #4
    abd0:	e1510002 	cmp	r1, r2
    abd4:	aa000000 	bge	abdc <forEach_block_in_tetrisGrid_loopEnd>
    abd8:	bafffffa 	blt	abc8 <forEach_block_in_tetrisGrid_loop>

0000abdc <forEach_block_in_tetrisGrid_loopEnd>:
    abdc:	e1a0f00e 	mov	pc, lr

0000abe0 <tetrisSetGridBlockColor>:
    abe0:	e8bd0007 	pop	{r0, r1, r2}
    abe4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    abe8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    abec:	e59f3884 	ldr	r3, [pc, #2180]	; b478 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x80>
    abf0:	e8930070 	ldm	r3, {r4, r5, r6}
    abf4:	e283700c 	add	r7, r3, #12
    abf8:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    abfc:	e92d0013 	push	{r0, r1, r4}
    ac00:	eb0006de 	bl	c780 <positionToArrayOffset>
    ac04:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    ac08:	e1a08108 	lsl	r8, r8, #2
    ac0c:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
    ac10:	e7872008 	str	r2, [r7, r8]
    ac14:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ac18:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ac1c:	e1a0f00e 	mov	pc, lr

0000ac20 <tetrisGetGridBlockColor>:
    ac20:	e8bd0006 	pop	{r1, r2}
    ac24:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ac28:	e92d03f0 	push	{r4, r5, r6, r7, r8, r9}
    ac2c:	e59f3844 	ldr	r3, [pc, #2116]	; b478 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x80>
    ac30:	e8930070 	ldm	r3, {r4, r5, r6}
    ac34:	e283700c 	add	r7, r3, #12
    ac38:	e3e094ff 	mvn	r9, #-16777216	; 0xff000000
    ac3c:	e3510000 	cmp	r1, #0
    ac40:	ba00000a 	blt	ac70 <tetrisGetGridBlockColorEnd>
    ac44:	e1510004 	cmp	r1, r4
    ac48:	aa000008 	bge	ac70 <tetrisGetGridBlockColorEnd>
    ac4c:	e3520000 	cmp	r2, #0
    ac50:	ba000006 	blt	ac70 <tetrisGetGridBlockColorEnd>
    ac54:	e1520005 	cmp	r2, r5
    ac58:	aa000004 	bge	ac70 <tetrisGetGridBlockColorEnd>

0000ac5c <tetrisGetGridBlockColor_validInput>:
    ac5c:	e92d0016 	push	{r1, r2, r4}
    ac60:	eb0006c6 	bl	c780 <positionToArrayOffset>
    ac64:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    ac68:	e1a08108 	lsl	r8, r8, #2
    ac6c:	e7979008 	ldr	r9, [r7, r8]

0000ac70 <tetrisGetGridBlockColorEnd>:
    ac70:	e1a00009 	mov	r0, r9
    ac74:	e8bd03f0 	pop	{r4, r5, r6, r7, r8, r9}
    ac78:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ac7c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac80:	e1a0f00e 	mov	pc, lr

0000ac84 <tetrisClearGridBlock>:
    ac84:	e8bd0003 	pop	{r0, r1}
    ac88:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ac8c:	e3a02000 	mov	r2, #0
    ac90:	e92d0007 	push	{r0, r1, r2}
    ac94:	ebffffd1 	bl	abe0 <tetrisSetGridBlockColor>
    ac98:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ac9c <tetrisDrawGrid>:
    ac9c:	e1a0000d 	mov	r0, sp
    aca0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aca4:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    aca8:	e59f77c8 	ldr	r7, [pc, #1992]	; b478 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x80>
    acac:	e8970700 	ldm	r7, {r8, r9, sl}
    acb0:	e287b00c 	add	fp, r7, #12
    acb4:	e1a07000 	mov	r7, r0
    acb8:	e3a04000 	mov	r4, #0
    acbc:	e3a05000 	mov	r5, #0
    acc0:	e3a06000 	mov	r6, #0

0000acc4 <tetrisDrawGrid_for_curCol_lt_cols_loop>:
    acc4:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000acc8 <tetrisDrawGrid_for_curRow_lt_rows_loop>:
    acc8:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    accc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    acd0:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    acd4:	e89707c0 	ldm	r7, {r6, r7, r8, r9, sl}
    acd8:	e92d07c0 	push	{r6, r7, r8, r9, sl}
    acdc:	e92d0030 	push	{r4, r5}
    ace0:	eb000197 	bl	b344 <tetrisBlockHasDataForGridPoint>
    ace4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    ace8:	e3300000 	teq	r0, #0
    acec:	e8bd07c0 	pop	{r6, r7, r8, r9, sl}
    acf0:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    acf4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    acf8:	0a000001 	beq	ad04 <tetrisDrawGridBlock>

0000acfc <tetrisDrawGridBlockSkip>:
    acfc:	e320f000 	nop	{0}
    ad00:	ea00000d 	b	ad3c <tetrisDrawGridBlockEnd>

0000ad04 <tetrisDrawGridBlock>:
    ad04:	e92d0130 	push	{r4, r5, r8}
    ad08:	eb00069c 	bl	c780 <positionToArrayOffset>
    ad0c:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    ad10:	e1a0c10c 	lsl	ip, ip, #2
    ad14:	e79b600c 	ldr	r6, [fp, ip]
    ad18:	e92d000f 	push	{r0, r1, r2, r3}
    ad1c:	e92d0030 	push	{r4, r5}
    ad20:	eb00003a 	bl	ae10 <tetrisGetRectForGridPosition>
    ad24:	e8bd000f 	pop	{r0, r1, r2, r3}
    ad28:	e28000c0 	add	r0, r0, #192	; 0xc0
    ad2c:	e2811050 	add	r1, r1, #80	; 0x50
    ad30:	e92d004f 	push	{r0, r1, r2, r3, r6}
    ad34:	eb00067b 	bl	c728 <drawRect>
    ad38:	e8bd000f 	pop	{r0, r1, r2, r3}

0000ad3c <tetrisDrawGridBlockEnd>:
    ad3c:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ad40:	e2855001 	add	r5, r5, #1
    ad44:	e1550009 	cmp	r5, r9
    ad48:	baffffde 	blt	acc8 <tetrisDrawGrid_for_curRow_lt_rows_loop>
    ad4c:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    ad50:	e2844001 	add	r4, r4, #1
    ad54:	e1540008 	cmp	r4, r8
    ad58:	baffffd9 	blt	acc4 <tetrisDrawGrid_for_curCol_lt_cols_loop>
    ad5c:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ad60:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ad64:	e1a0f00e 	mov	pc, lr

0000ad68 <tetrisUpdateGrid>:
    ad68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ad6c:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ad70:	e59f7700 	ldr	r7, [pc, #1792]	; b478 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x80>
    ad74:	e8970700 	ldm	r7, {r8, r9, sl}
    ad78:	e287b00c 	add	fp, r7, #12
    ad7c:	e3a04000 	mov	r4, #0
    ad80:	e1a05009 	mov	r5, r9
    ad84:	e3a06000 	mov	r6, #0

0000ad88 <tetrisUpdateGrid_for_curCol_lt_cols_loop>:
    ad88:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000ad8c <tetrisUpdateGrid_for_curRow_ge_0_loop>:
    ad8c:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ad90:	e92d0030 	push	{r4, r5}
    ad94:	e92d0030 	push	{r4, r5}
    ad98:	ebffffa0 	bl	ac20 <tetrisGetGridBlockColor>
    ad9c:	e49d6004 	pop	{r6}		; (ldr r6, [sp], #4)
    ada0:	e3360000 	teq	r6, #0
    ada4:	e8bd0030 	pop	{r4, r5}
    ada8:	0a00000d 	beq	ade4 <tetrisUpdateGridBlockBelowHasData>
    adac:	1affffff 	bne	adb0 <tetrisUpdateGridCurrentBlockHasData>

0000adb0 <tetrisUpdateGridCurrentBlockHasData>:
    adb0:	e1a00004 	mov	r0, r4
    adb4:	e2851001 	add	r1, r5, #1
    adb8:	e92d0003 	push	{r0, r1}
    adbc:	e92d0003 	push	{r0, r1}
    adc0:	ebffff96 	bl	ac20 <tetrisGetGridBlockColor>
    adc4:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
    adc8:	e3320000 	teq	r2, #0
    adcc:	e8bd0003 	pop	{r0, r1}
    add0:	1a000003 	bne	ade4 <tetrisUpdateGridBlockBelowHasData>
    add4:	e92d0043 	push	{r0, r1, r6}
    add8:	ebffff80 	bl	abe0 <tetrisSetGridBlockColor>
    addc:	e92d0030 	push	{r4, r5}
    ade0:	ebffffa7 	bl	ac84 <tetrisClearGridBlock>

0000ade4 <tetrisUpdateGridBlockBelowHasData>:
    ade4:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ade8:	e2455001 	sub	r5, r5, #1
    adec:	e3550000 	cmp	r5, #0
    adf0:	aaffffe5 	bge	ad8c <tetrisUpdateGrid_for_curRow_ge_0_loop>
    adf4:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    adf8:	e2844001 	add	r4, r4, #1
    adfc:	e1540008 	cmp	r4, r8
    ae00:	baffffe0 	blt	ad88 <tetrisUpdateGrid_for_curCol_lt_cols_loop>
    ae04:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ae08:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ae0c:	e1a0f00e 	mov	pc, lr

0000ae10 <tetrisGetRectForGridPosition>:
    ae10:	e8bd0003 	pop	{r0, r1}
    ae14:	e92d00f0 	push	{r4, r5, r6, r7}
    ae18:	e59f4658 	ldr	r4, [pc, #1624]	; b478 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x80>
    ae1c:	e89400e0 	ldm	r4, {r5, r6, r7}
    ae20:	e1a02007 	mov	r2, r7
    ae24:	e1a03007 	mov	r3, r7
    ae28:	e0000092 	mul	r0, r2, r0
    ae2c:	e0010193 	mul	r1, r3, r1
    ae30:	e8bd00f0 	pop	{r4, r5, r6, r7}
    ae34:	e92d000f 	push	{r0, r1, r2, r3}
    ae38:	e1a0f00e 	mov	pc, lr

0000ae3c <tetrisCreateNewBlock>:
    ae3c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ae40:	e59f0678 	ldr	r0, [pc, #1656]	; b4c0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xc8>
    ae44:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}

0000ae48 <initializeTetrisBlock>:
    ae48:	e59f0658 	ldr	r0, [pc, #1624]	; b4a8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb0>
    ae4c:	e5900000 	ldr	r0, [r0]
    ae50:	e3a04004 	mov	r4, #4
    ae54:	e3a05000 	mov	r5, #0
    ae58:	e59f6664 	ldr	r6, [pc, #1636]	; b4c4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xcc>
    ae5c:	e1a01100 	lsl	r1, r0, #2
    ae60:	e7966001 	ldr	r6, [r6, r1]
    ae64:	e59f765c 	ldr	r7, [pc, #1628]	; b4c8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xd0>
    ae68:	e3300001 	teq	r0, #1
    ae6c:	059f7658 	ldreq	r7, [pc, #1624]	; b4cc <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xd4>
    ae70:	e3300002 	teq	r0, #2
    ae74:	059f7654 	ldreq	r7, [pc, #1620]	; b4d0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xd8>
    ae78:	e3300003 	teq	r0, #3
    ae7c:	059f7650 	ldreq	r7, [pc, #1616]	; b4d4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xdc>
    ae80:	e3300004 	teq	r0, #4
    ae84:	059f764c 	ldreq	r7, [pc, #1612]	; b4d8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xe0>
    ae88:	e3300005 	teq	r0, #5
    ae8c:	059f7648 	ldreq	r7, [pc, #1608]	; b4dc <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xe4>
    ae90:	e3300006 	teq	r0, #6
    ae94:	059f7644 	ldreq	r7, [pc, #1604]	; b4e0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xe8>
    ae98:	e3a08000 	mov	r8, #0

0000ae9c <initializeTetrisBlockEnd>:
    ae9c:	eb000199 	bl	b508 <randomNumber>
    aea0:	e59f1600 	ldr	r1, [pc, #1536]	; b4a8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb0>
    aea4:	e5810000 	str	r0, [r1]
    aea8:	eb000002 	bl	aeb8 <drawQueue>
    aeac:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    aeb0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aeb4:	e1a0f00e 	mov	pc, lr

0000aeb8 <drawQueue>:
    aeb8:	e92d4010 	push	{r4, lr}
    aebc:	e59f45cc 	ldr	r4, [pc, #1484]	; b490 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x98>
    aec0:	e3a03084 	mov	r3, #132	; 0x84
    aec4:	e3a02084 	mov	r2, #132	; 0x84
    aec8:	e59f1614 	ldr	r1, [pc, #1556]	; b4e4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xec>
    aecc:	e59f0614 	ldr	r0, [pc, #1556]	; b4e8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xf0>
    aed0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    aed4:	eb000613 	bl	c728 <drawRect>
    aed8:	e59f15c8 	ldr	r1, [pc, #1480]	; b4a8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb0>
    aedc:	e5914000 	ldr	r4, [r1]
    aee0:	e3340000 	teq	r4, #0
    aee4:	0a00000b 	beq	af18 <QueueA>
    aee8:	e3340001 	teq	r4, #1
    aeec:	0a000011 	beq	af38 <QueueB>
    aef0:	e3340002 	teq	r4, #2
    aef4:	0a00001e 	beq	af74 <QueueC>
    aef8:	e3340003 	teq	r4, #3
    aefc:	0a00002b 	beq	afb0 <QueueD>
    af00:	e3340004 	teq	r4, #4
    af04:	0a000031 	beq	afd0 <QueueE>
    af08:	e3340005 	teq	r4, #5
    af0c:	0a00003e 	beq	b00c <QueueF>
    af10:	e3340006 	teq	r4, #6
    af14:	0a00004b 	beq	b048 <QueueG>

0000af18 <QueueA>:
    af18:	e59f4598 	ldr	r4, [pc, #1432]	; b4b8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xc0>
    af1c:	e3a03080 	mov	r3, #128	; 0x80
    af20:	e3a02020 	mov	r2, #32
    af24:	e3a01f85 	mov	r1, #532	; 0x214
    af28:	e3a00fae 	mov	r0, #696	; 0x2b8
    af2c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    af30:	eb0005fc 	bl	c728 <drawRect>
    af34:	ea000052 	b	b084 <QueueDone>

0000af38 <QueueB>:
    af38:	e59f45ac 	ldr	r4, [pc, #1452]	; b4ec <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xf4>
    af3c:	e3a03040 	mov	r3, #64	; 0x40
    af40:	e3a02020 	mov	r2, #32
    af44:	e3a01f8d 	mov	r1, #564	; 0x234
    af48:	e3a00fa6 	mov	r0, #664	; 0x298
    af4c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    af50:	eb0005f4 	bl	c728 <drawRect>
    af54:	e59f4590 	ldr	r4, [pc, #1424]	; b4ec <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xf4>
    af58:	e3a03020 	mov	r3, #32
    af5c:	e3a02040 	mov	r2, #64	; 0x40
    af60:	e3a01f95 	mov	r1, #596	; 0x254
    af64:	e3a00fae 	mov	r0, #696	; 0x2b8
    af68:	e92d001f 	push	{r0, r1, r2, r3, r4}
    af6c:	eb0005ed 	bl	c728 <drawRect>
    af70:	ea000043 	b	b084 <QueueDone>

0000af74 <QueueC>:
    af74:	e59f4574 	ldr	r4, [pc, #1396]	; b4f0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xf8>
    af78:	e3a03020 	mov	r3, #32
    af7c:	e3a02060 	mov	r2, #96	; 0x60
    af80:	e3a01f95 	mov	r1, #596	; 0x254
    af84:	e3a00fa6 	mov	r0, #664	; 0x298
    af88:	e92d001f 	push	{r0, r1, r2, r3, r4}
    af8c:	eb0005e5 	bl	c728 <drawRect>
    af90:	e59f4558 	ldr	r4, [pc, #1368]	; b4f0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xf8>
    af94:	e3a03020 	mov	r3, #32
    af98:	e3a02020 	mov	r2, #32
    af9c:	e3a01f8d 	mov	r1, #564	; 0x234
    afa0:	e3a00fb6 	mov	r0, #728	; 0x2d8
    afa4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    afa8:	eb0005de 	bl	c728 <drawRect>
    afac:	ea000034 	b	b084 <QueueDone>

0000afb0 <QueueD>:
    afb0:	e59f453c 	ldr	r4, [pc, #1340]	; b4f4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xfc>
    afb4:	e3a03040 	mov	r3, #64	; 0x40
    afb8:	e3a02040 	mov	r2, #64	; 0x40
    afbc:	e3a01f8d 	mov	r1, #564	; 0x234
    afc0:	e59f0530 	ldr	r0, [pc, #1328]	; b4f8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x100>
    afc4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    afc8:	eb0005d6 	bl	c728 <drawRect>
    afcc:	ea00002c 	b	b084 <QueueDone>

0000afd0 <QueueE>:
    afd0:	e59f4524 	ldr	r4, [pc, #1316]	; b4fc <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x104>
    afd4:	e3a03020 	mov	r3, #32
    afd8:	e3a02040 	mov	r2, #64	; 0x40
    afdc:	e3a01f8d 	mov	r1, #564	; 0x234
    afe0:	e3a00fae 	mov	r0, #696	; 0x2b8
    afe4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    afe8:	eb0005ce 	bl	c728 <drawRect>
    afec:	e59f4508 	ldr	r4, [pc, #1288]	; b4fc <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x104>
    aff0:	e3a03020 	mov	r3, #32
    aff4:	e3a02040 	mov	r2, #64	; 0x40
    aff8:	e3a01f95 	mov	r1, #596	; 0x254
    affc:	e3a00fa6 	mov	r0, #664	; 0x298
    b000:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b004:	eb0005c7 	bl	c728 <drawRect>
    b008:	ea00001d 	b	b084 <QueueDone>

0000b00c <QueueF>:
    b00c:	e59f44ec 	ldr	r4, [pc, #1260]	; b500 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x108>
    b010:	e3a03020 	mov	r3, #32
    b014:	e3a02020 	mov	r2, #32
    b018:	e3a01f8d 	mov	r1, #564	; 0x234
    b01c:	e3a00fae 	mov	r0, #696	; 0x2b8
    b020:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b024:	eb0005bf 	bl	c728 <drawRect>
    b028:	e59f44d0 	ldr	r4, [pc, #1232]	; b500 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x108>
    b02c:	e3a03020 	mov	r3, #32
    b030:	e3a02060 	mov	r2, #96	; 0x60
    b034:	e3a01f95 	mov	r1, #596	; 0x254
    b038:	e3a00fa6 	mov	r0, #664	; 0x298
    b03c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b040:	eb0005b8 	bl	c728 <drawRect>
    b044:	ea00000e 	b	b084 <QueueDone>

0000b048 <QueueG>:
    b048:	e59f44b4 	ldr	r4, [pc, #1204]	; b504 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x10c>
    b04c:	e3a03020 	mov	r3, #32
    b050:	e3a02040 	mov	r2, #64	; 0x40
    b054:	e3a01f8d 	mov	r1, #564	; 0x234
    b058:	e3a00fa6 	mov	r0, #664	; 0x298
    b05c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b060:	eb0005b0 	bl	c728 <drawRect>
    b064:	e59f4498 	ldr	r4, [pc, #1176]	; b504 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x10c>
    b068:	e3a03020 	mov	r3, #32
    b06c:	e3a02040 	mov	r2, #64	; 0x40
    b070:	e3a01f95 	mov	r1, #596	; 0x254
    b074:	e3a00fae 	mov	r0, #696	; 0x2b8
    b078:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b07c:	eb0005a9 	bl	c728 <drawRect>
    b080:	eaffffff 	b	b084 <QueueDone>

0000b084 <QueueDone>:
    b084:	e8bd8010 	pop	{r4, pc}

0000b088 <tetrisDrawBlock>:
    b088:	e1a0000d 	mov	r0, sp
    b08c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b090:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b094:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b098:	e92d1800 	push	{fp, ip}
    b09c:	e3a0b000 	mov	fp, #0
    b0a0:	e3a0c000 	mov	ip, #0

0000b0a4 <for_i_lt_4_loop>:
    b0a4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000b0a8 <for_j_lt_4_loop>:
    b0a8:	e92d0070 	push	{r4, r5, r6}
    b0ac:	e19720b8 	ldrh	r2, [r7, r8]
    b0b0:	e084400b 	add	r4, r4, fp
    b0b4:	e085500c 	add	r5, r5, ip
    b0b8:	e3a01004 	mov	r1, #4
    b0bc:	e0010c91 	mul	r1, r1, ip
    b0c0:	e081100b 	add	r1, r1, fp
    b0c4:	e1a02112 	lsl	r2, r2, r1
    b0c8:	e3a01902 	mov	r1, #32768	; 0x8000
    b0cc:	e0011002 	and	r1, r1, r2
    b0d0:	e3310000 	teq	r1, #0
    b0d4:	e52d6004 	push	{r6}		; (str r6, [sp, #-4]!)
    b0d8:	03a06000 	moveq	r6, #0
    b0dc:	0a00000a 	beq	b10c <blockHasNoData>

0000b0e0 <blockHasData>:
    b0e0:	e92d000f 	push	{r0, r1, r2, r3}
    b0e4:	e320f000 	nop	{0}
    b0e8:	e92d0030 	push	{r4, r5}
    b0ec:	ebffff47 	bl	ae10 <tetrisGetRectForGridPosition>
    b0f0:	e8bd000f 	pop	{r0, r1, r2, r3}
    b0f4:	e320f000 	nop	{0}
    b0f8:	e28000c0 	add	r0, r0, #192	; 0xc0
    b0fc:	e2811050 	add	r1, r1, #80	; 0x50
    b100:	e92d004f 	push	{r0, r1, r2, r3, r6}
    b104:	eb000587 	bl	c728 <drawRect>
    b108:	e8bd000f 	pop	{r0, r1, r2, r3}

0000b10c <blockHasNoData>:
    b10c:	e49d6004 	pop	{r6}		; (ldr r6, [sp], #4)
    b110:	e8bd0070 	pop	{r4, r5, r6}
    b114:	e28cc001 	add	ip, ip, #1
    b118:	e35c0004 	cmp	ip, #4
    b11c:	baffffe1 	blt	b0a8 <for_j_lt_4_loop>
    b120:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    b124:	e28bb001 	add	fp, fp, #1
    b128:	e35b0004 	cmp	fp, #4
    b12c:	baffffdc 	blt	b0a4 <for_i_lt_4_loop>
    b130:	e8bd1800 	pop	{fp, ip}
    b134:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b138:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b13c:	e1a0f00e 	mov	pc, lr

0000b140 <tetrisCheckBlockGridCollisions>:
    b140:	e1a0000d 	mov	r0, sp
    b144:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b148:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b14c:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b150:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b154:	eb00009e 	bl	b3d4 <tetrisGetGridBitmaskForBlock>
    b158:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b15c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b160:	e320f000 	nop	{0}
    b164:	e19710b8 	ldrh	r1, [r7, r8]
    b168:	e0000001 	and	r0, r0, r1
    b16c:	e3500000 	cmp	r0, #0
    b170:	13a00001 	movne	r0, #1
    b174:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b178:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b17c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b180:	e1a0f00e 	mov	pc, lr

0000b184 <tetrisOnBlockCollision>:
    b184:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b188:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b18c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b190:	e19730b8 	ldrh	r3, [r7, r8]
    b194:	e320f000 	nop	{0}
    b198:	eb000005 	bl	b1b4 <writeBlockToGrid>
    b19c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b1a0:	ebffff25 	bl	ae3c <tetrisCreateNewBlock>
    b1a4:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b1a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b1ac:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b1b0:	e1a0f00e 	mov	pc, lr

0000b1b4 <writeBlockToGrid>:
    b1b4:	e1a0000d 	mov	r0, sp
    b1b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b1bc:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b1c0:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b1c4:	e92d1800 	push	{fp, ip}
    b1c8:	e3a0b000 	mov	fp, #0
    b1cc:	e3a0c000 	mov	ip, #0

0000b1d0 <writeBlockToGrid_for_i_lt_4_loop>:
    b1d0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000b1d4 <writeBlockToGrid_for_j_lt_4_loop>:
    b1d4:	e92d0070 	push	{r4, r5, r6}
    b1d8:	e19720b8 	ldrh	r2, [r7, r8]
    b1dc:	e084400b 	add	r4, r4, fp
    b1e0:	e085500c 	add	r5, r5, ip
    b1e4:	e3a01004 	mov	r1, #4
    b1e8:	e0010c91 	mul	r1, r1, ip
    b1ec:	e081100b 	add	r1, r1, fp
    b1f0:	e1a02112 	lsl	r2, r2, r1
    b1f4:	e3a01902 	mov	r1, #32768	; 0x8000
    b1f8:	e0011002 	and	r1, r1, r2
    b1fc:	e3310000 	teq	r1, #0
    b200:	0a000001 	beq	b20c <writeBlockToGrid_blockHasNoData>

0000b204 <writeBlockToGrid_blockHasData>:
    b204:	e92d0070 	push	{r4, r5, r6}
    b208:	ebfffe74 	bl	abe0 <tetrisSetGridBlockColor>

0000b20c <writeBlockToGrid_blockHasNoData>:
    b20c:	e8bd0070 	pop	{r4, r5, r6}
    b210:	e28cc001 	add	ip, ip, #1
    b214:	e35c0004 	cmp	ip, #4
    b218:	baffffed 	blt	b1d4 <writeBlockToGrid_for_j_lt_4_loop>
    b21c:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    b220:	e28bb001 	add	fp, fp, #1
    b224:	e35b0004 	cmp	fp, #4
    b228:	baffffe8 	blt	b1d0 <writeBlockToGrid_for_i_lt_4_loop>
    b22c:	e8bd1800 	pop	{fp, ip}
    b230:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b234:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b238:	e1a0f00e 	mov	pc, lr

0000b23c <tetrisRotateBlock>:
    b23c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b240:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b244:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b248:	e3300000 	teq	r0, #0
    b24c:	0a000000 	beq	b254 <handleRotateLeft>
    b250:	1a000003 	bne	b264 <handleRotateRight>

0000b254 <handleRotateLeft>:
    b254:	e2888002 	add	r8, r8, #2
    b258:	e3580006 	cmp	r8, #6
    b25c:	c3a08000 	movgt	r8, #0
    b260:	ea000003 	b	b274 <handleRotateEnd>

0000b264 <handleRotateRight>:
    b264:	e2488002 	sub	r8, r8, #2
    b268:	e3580000 	cmp	r8, #0
    b26c:	b3a08006 	movlt	r8, #6
    b270:	eaffffff 	b	b274 <handleRotateEnd>

0000b274 <handleRotateEnd>:
    b274:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b278:	ebffffb0 	bl	b140 <tetrisCheckBlockGridCollisions>
    b27c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b280:	e3300000 	teq	r0, #0
    b284:	1a000000 	bne	b28c <onRotationCollision>
    b288:	0a000004 	beq	b2a0 <onNoRotationCollision>

0000b28c <onRotationCollision>:
    b28c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b290:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b294:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b298:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b29c:	ea000004 	b	b2b4 <tetrisRotateBlockEnd>

0000b2a0 <onNoRotationCollision>:
    b2a0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b2a4:	028dd014 	addeq	sp, sp, #20
    b2a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b2ac:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b2b0:	eaffffff 	b	b2b4 <tetrisRotateBlockEnd>

0000b2b4 <tetrisRotateBlockEnd>:
    b2b4:	e1a0f00e 	mov	pc, lr

0000b2b8 <tetrisTranslateBlock>:
    b2b8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b2bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b2c0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b2c4:	e0844000 	add	r4, r4, r0
    b2c8:	e0855001 	add	r5, r5, r1
    b2cc:	e92d0003 	push	{r0, r1}
    b2d0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b2d4:	ebffff99 	bl	b140 <tetrisCheckBlockGridCollisions>
    b2d8:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)
    b2dc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b2e0:	e8bd0003 	pop	{r0, r1}
    b2e4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b2e8:	e3330000 	teq	r3, #0
    b2ec:	1a000000 	bne	b2f4 <onTranslationCollision>
    b2f0:	0a00000d 	beq	b32c <onNoTranslationCollision>

0000b2f4 <onTranslationCollision>:
    b2f4:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b2f8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b2fc:	e3310000 	teq	r1, #0
    b300:	0a000000 	beq	b308 <onTranslationCollision_Horizontal>
    b304:	1a000002 	bne	b314 <onTranslationCollision_Vertical>

0000b308 <onTranslationCollision_Horizontal>:
    b308:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b30c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b310:	ea00000a 	b	b340 <tetrisTranslateBlockEnd>

0000b314 <onTranslationCollision_Vertical>:
    b314:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b318:	ebffff99 	bl	b184 <tetrisOnBlockCollision>
    b31c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b320:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b324:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b328:	eafffccb 	b	a65c <newBlock>

0000b32c <onNoTranslationCollision>:
    b32c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b330:	028dd014 	addeq	sp, sp, #20
    b334:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b338:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b33c:	eaffffff 	b	b340 <tetrisTranslateBlockEnd>

0000b340 <tetrisTranslateBlockEnd>:
    b340:	e1a0f00e 	mov	pc, lr

0000b344 <tetrisBlockHasDataForGridPoint>:
    b344:	e8bd0003 	pop	{r0, r1}
    b348:	e89d01f0 	ldm	sp, {r4, r5, r6, r7, r8}
    b34c:	e1500004 	cmp	r0, r4
    b350:	b3a02000 	movlt	r2, #0
    b354:	ba00001c 	blt	b3cc <tetrisBlockHasDataForGridPointEnd>
    b358:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    b35c:	e2844004 	add	r4, r4, #4
    b360:	e1500004 	cmp	r0, r4
    b364:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    b368:	a3a02000 	movge	r2, #0
    b36c:	aa000016 	bge	b3cc <tetrisBlockHasDataForGridPointEnd>
    b370:	e1510005 	cmp	r1, r5
    b374:	b3a02000 	movlt	r2, #0
    b378:	ba000013 	blt	b3cc <tetrisBlockHasDataForGridPointEnd>
    b37c:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
    b380:	e2855004 	add	r5, r5, #4
    b384:	e1510005 	cmp	r1, r5
    b388:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    b38c:	a3a02000 	movge	r2, #0
    b390:	aa00000d 	bge	b3cc <tetrisBlockHasDataForGridPointEnd>
    b394:	e0400004 	sub	r0, r0, r4
    b398:	e0411005 	sub	r1, r1, r5
    b39c:	e52d8004 	push	{r8}		; (str r8, [sp, #-4]!)
    b3a0:	e19790b8 	ldrh	r9, [r7, r8]
    b3a4:	e3a08004 	mov	r8, #4
    b3a8:	e0080198 	mul	r8, r8, r1
    b3ac:	e0888000 	add	r8, r8, r0
    b3b0:	e1a09819 	lsl	r9, r9, r8
    b3b4:	e3a08902 	mov	r8, #32768	; 0x8000
    b3b8:	e0088009 	and	r8, r8, r9
    b3bc:	e3380000 	teq	r8, #0
    b3c0:	03a02000 	moveq	r2, #0
    b3c4:	13a02001 	movne	r2, #1
    b3c8:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)

0000b3cc <tetrisBlockHasDataForGridPointEnd>:
    b3cc:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    b3d0:	e1a0f00e 	mov	pc, lr

0000b3d4 <tetrisGetGridBitmaskForBlock>:
    b3d4:	e1a0000d 	mov	r0, sp
    b3d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b3dc:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b3e0:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b3e4:	e92d1800 	push	{fp, ip}
    b3e8:	e3a00000 	mov	r0, #0
    b3ec:	e3a0b000 	mov	fp, #0
    b3f0:	e3a0c000 	mov	ip, #0

0000b3f4 <tetrisGetGridBitmaskForBlock_for_i_lt_4_loop>:
    b3f4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000b3f8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop>:
    b3f8:	e92d0070 	push	{r4, r5, r6}
    b3fc:	e084400b 	add	r4, r4, fp
    b400:	e085500c 	add	r5, r5, ip
    b404:	e92d1801 	push	{r0, fp, ip}
    b408:	e92d0030 	push	{r4, r5}
    b40c:	ebfffe03 	bl	ac20 <tetrisGetGridBlockColor>
    b410:	e49d6004 	pop	{r6}		; (ldr r6, [sp], #4)
    b414:	e8bd1801 	pop	{r0, fp, ip}
    b418:	e3360000 	teq	r6, #0
    b41c:	13a01004 	movne	r1, #4
    b420:	1001019c 	mulne	r1, ip, r1
    b424:	1081100b 	addne	r1, r1, fp
    b428:	13a02902 	movne	r2, #32768	; 0x8000
    b42c:	11a02132 	lsrne	r2, r2, r1
    b430:	11800002 	orrne	r0, r0, r2
    b434:	e8bd0070 	pop	{r4, r5, r6}
    b438:	e28cc001 	add	ip, ip, #1
    b43c:	e35c0004 	cmp	ip, #4
    b440:	baffffec 	blt	b3f8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop>
    b444:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    b448:	e28bb001 	add	fp, fp, #1
    b44c:	e35b0004 	cmp	fp, #4
    b450:	baffffe7 	blt	b3f4 <tetrisGetGridBitmaskForBlock_for_i_lt_4_loop>
    b454:	e8bd1800 	pop	{fp, ip}
    b458:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b45c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b460:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b464:	e1a0f00e 	mov	pc, lr
    b468:	00002710 	.word	0x00002710
    b46c:	00009390 	.word	0x00009390
    b470:	3f003004 	.word	0x3f003004
    b474:	000186a0 	.word	0x000186a0
    b478:	00009080 	.word	0x00009080
    b47c:	00009384 	.word	0x00009384
    b480:	00009c70 	.word	0x00009c70
    b484:	000034a0 	.word	0x000034a0
    b488:	00000269 	.word	0x00000269
    b48c:	00000297 	.word	0x00000297
    b490:	0000adb5 	.word	0x0000adb5
    b494:	00000299 	.word	0x00000299
    b498:	00009c90 	.word	0x00009c90
    b49c:	00000618 	.word	0x00000618
    b4a0:	0000023e 	.word	0x0000023e
    b4a4:	0000024a 	.word	0x0000024a
    b4a8:	00009ca0 	.word	0x00009ca0
    b4ac:	000002a6 	.word	0x000002a6
    b4b0:	00009c80 	.word	0x00009c80
    b4b4:	000093a0 	.word	0x000093a0
    b4b8:	0000ffff 	.word	0x0000ffff
    b4bc:	00009cb0 	.word	0x00009cb0
    b4c0:	000093c0 	.word	0x000093c0
    b4c4:	000093e0 	.word	0x000093e0
    b4c8:	00009400 	.word	0x00009400
    b4cc:	00009410 	.word	0x00009410
    b4d0:	00009420 	.word	0x00009420
    b4d4:	00009430 	.word	0x00009430
    b4d8:	00009440 	.word	0x00009440
    b4dc:	00009450 	.word	0x00009450
    b4e0:	00009460 	.word	0x00009460
    b4e4:	00000212 	.word	0x00000212
    b4e8:	00000286 	.word	0x00000286
    b4ec:	0000aaaa 	.word	0x0000aaaa
    b4f0:	0000bbbb 	.word	0x0000bbbb
    b4f4:	0000cccc 	.word	0x0000cccc
    b4f8:	000002aa 	.word	0x000002aa
    b4fc:	0000dddd 	.word	0x0000dddd
    b500:	00112233 	.word	0x00112233
    b504:	00445566 	.word	0x00445566

0000b508 <randomNumber>:
    b508:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b50c:	e59f1040 	ldr	r1, [pc, #64]	; b554 <top+0x34>
    b510:	e5914000 	ldr	r4, [r1]
    b514:	e5915000 	ldr	r5, [r1]
    b518:	e5916000 	ldr	r6, [r1]
    b51c:	e5912000 	ldr	r2, [r1]

0000b520 <top>:
    b520:	e1a07004 	mov	r7, r4
    b524:	e0277587 	eor	r7, r7, r7, lsl #11
    b528:	e0277427 	eor	r7, r7, r7, lsr #8
    b52c:	e1a04005 	mov	r4, r5
    b530:	e1a05006 	mov	r5, r6
    b534:	e1a06002 	mov	r6, r2
    b538:	e02229a2 	eor	r2, r2, r2, lsr #19
    b53c:	e0222007 	eor	r2, r2, r7
    b540:	e3e01007 	mvn	r1, #7
    b544:	e1c20001 	bic	r0, r2, r1
    b548:	e3500007 	cmp	r0, #7
    b54c:	0afffff3 	beq	b520 <top>
    b550:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b554:	3f003004 	.word	0x3f003004

0000b558 <EnableJTAG>:
    b558:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b55c:	e59f0064 	ldr	r0, [pc, #100]	; b5c8 <dowaitloop+0xc>
    b560:	e0211001 	eor	r1, r1, r1
    b564:	e5801000 	str	r1, [r0]
    b568:	eb000012 	bl	b5b8 <dowait>
    b56c:	e59f0058 	ldr	r0, [pc, #88]	; b5cc <dowaitloop+0x10>
    b570:	e59f1058 	ldr	r1, [pc, #88]	; b5d0 <dowaitloop+0x14>
    b574:	e5801000 	str	r1, [r0]
    b578:	eb00000e 	bl	b5b8 <dowait>
    b57c:	e0211001 	eor	r1, r1, r1
    b580:	e5801000 	str	r1, [r0]
    b584:	e59f0048 	ldr	r0, [pc, #72]	; b5d4 <dowaitloop+0x18>
    b588:	e5901000 	ldr	r1, [r0]
    b58c:	e3c11a07 	bic	r1, r1, #28672	; 0x7000
    b590:	e3811a02 	orr	r1, r1, #8192	; 0x2000
    b594:	e5801000 	str	r1, [r0]
    b598:	e59f0038 	ldr	r0, [pc, #56]	; b5d8 <dowaitloop+0x1c>
    b59c:	e5901000 	ldr	r1, [r0]
    b5a0:	e59f2034 	ldr	r2, [pc, #52]	; b5dc <dowaitloop+0x20>
    b5a4:	e1c11002 	bic	r1, r1, r2
    b5a8:	e59f2030 	ldr	r2, [pc, #48]	; b5e0 <dowaitloop+0x24>
    b5ac:	e1811002 	orr	r1, r1, r2
    b5b0:	e5801000 	str	r1, [r0]
    b5b4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b5b8 <dowait>:
    b5b8:	e3a02f4b 	mov	r2, #300	; 0x12c

0000b5bc <dowaitloop>:
    b5bc:	e2522001 	subs	r2, r2, #1
    b5c0:	1afffffd 	bne	b5bc <dowaitloop>
    b5c4:	e12fff1e 	bx	lr
    b5c8:	3f200094 	.word	0x3f200094
    b5cc:	3f200098 	.word	0x3f200098
    b5d0:	0bc00010 	.word	0x0bc00010
    b5d4:	3f200000 	.word	0x3f200000
    b5d8:	3f200008 	.word	0x3f200008
    b5dc:	00e3ffc0 	.word	0x00e3ffc0
    b5e0:	0061b6c0 	.word	0x0061b6c0

0000b5e4 <InitFrameBuffer>:
    b5e4:	e59f2068 	ldr	r2, [pc, #104]	; b654 <pointerWaitLoop$+0x1c>
    b5e8:	e59f3068 	ldr	r3, [pc, #104]	; b658 <pointerWaitLoop$+0x20>

0000b5ec <mBoxFullLoop$>:
    b5ec:	e5920018 	ldr	r0, [r2, #24]
    b5f0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    b5f4:	1afffffc 	bne	b5ec <mBoxFullLoop$>
    b5f8:	e2830101 	add	r0, r3, #1073741824	; 0x40000000
    b5fc:	e3800008 	orr	r0, r0, #8
    b600:	e5820020 	str	r0, [r2, #32]

0000b604 <mBoxEmptyLoop$>:
    b604:	e5920018 	ldr	r0, [r2, #24]
    b608:	e3100101 	tst	r0, #1073741824	; 0x40000000
    b60c:	1afffffc 	bne	b604 <mBoxEmptyLoop$>
    b610:	e5920000 	ldr	r0, [r2]
    b614:	e200100f 	and	r1, r0, #15
    b618:	e3310008 	teq	r1, #8
    b61c:	1afffff8 	bne	b604 <mBoxEmptyLoop$>
    b620:	e59f0030 	ldr	r0, [pc, #48]	; b658 <pointerWaitLoop$+0x20>
    b624:	e5901004 	ldr	r1, [r0, #4]
    b628:	e3310102 	teq	r1, #-2147483648	; 0x80000000
    b62c:	0a000001 	beq	b638 <pointerWaitLoop$>
    b630:	13a00000 	movne	r0, #0
    b634:	112fff1e 	bxne	lr

0000b638 <pointerWaitLoop$>:
    b638:	e59f001c 	ldr	r0, [pc, #28]	; b65c <pointerWaitLoop$+0x24>
    b63c:	e5900000 	ldr	r0, [r0]
    b640:	e3300000 	teq	r0, #0
    b644:	0afffffb 	beq	b638 <pointerWaitLoop$>
    b648:	e59f3010 	ldr	r3, [pc, #16]	; b660 <pointerWaitLoop$+0x28>
    b64c:	e5830000 	str	r0, [r3]
    b650:	e12fff1e 	bx	lr
    b654:	3f00b880 	.word	0x3f00b880
    b658:	00009cb0 	.word	0x00009cb0
    b65c:	00009cfc 	.word	0x00009cfc
    b660:	00009d10 	.word	0x00009d10

0000b664 <sampleSNES>:
    b664:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}

0000b668 <initSNES>:
    b668:	e3a00001 	mov	r0, #1
    b66c:	eb000048 	bl	b794 <setCLOCKFunction>
    b670:	e3a00001 	mov	r0, #1
    b674:	eb00003d 	bl	b770 <setLATCHFunction>
    b678:	e3a00000 	mov	r0, #0
    b67c:	eb000034 	bl	b754 <setDATAFunction>

0000b680 <startSamplingSNESButtons>:
    b680:	e3a0000b 	mov	r0, #11
    b684:	e3a01001 	mov	r1, #1
    b688:	eb000056 	bl	b7e8 <writeGPIO>
    b68c:	e3a00009 	mov	r0, #9
    b690:	e3a01001 	mov	r1, #1
    b694:	eb000053 	bl	b7e8 <writeGPIO>
    b698:	e3a0000c 	mov	r0, #12
    b69c:	eb000019 	bl	b708 <startTimer>
    b6a0:	e3a00009 	mov	r0, #9
    b6a4:	e3a01000 	mov	r1, #0
    b6a8:	eb00004e 	bl	b7e8 <writeGPIO>
    b6ac:	e3a08000 	mov	r8, #0
    b6b0:	e3a07000 	mov	r7, #0

0000b6b4 <pulseLoop>:
    b6b4:	e3a00006 	mov	r0, #6
    b6b8:	eb000012 	bl	b708 <startTimer>
    b6bc:	e3a0000b 	mov	r0, #11
    b6c0:	e3a01000 	mov	r1, #0
    b6c4:	eb000047 	bl	b7e8 <writeGPIO>
    b6c8:	e3a00006 	mov	r0, #6
    b6cc:	eb00000d 	bl	b708 <startTimer>
    b6d0:	e3a0000a 	mov	r0, #10
    b6d4:	e3a01000 	mov	r1, #0
    b6d8:	eb000036 	bl	b7b8 <readGPIO>
    b6dc:	e1a00710 	lsl	r0, r0, r7
    b6e0:	e1888000 	orr	r8, r8, r0
    b6e4:	e3a0000b 	mov	r0, #11
    b6e8:	e3a01001 	mov	r1, #1
    b6ec:	eb00003d 	bl	b7e8 <writeGPIO>
    b6f0:	e2877001 	add	r7, r7, #1
    b6f4:	e3570010 	cmp	r7, #16
    b6f8:	baffffed 	blt	b6b4 <pulseLoop>

0000b6fc <pulseLoopEnd>:
    b6fc:	e1a00008 	mov	r0, r8

0000b700 <mainEnd>:
    b700:	eaffffff 	b	b704 <killProgram>

0000b704 <killProgram>:
    b704:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000b708 <startTimer>:
    b708:	e1a03000 	mov	r3, r0
    b70c:	e59f0128 	ldr	r0, [pc, #296]	; b83c <newButtonPress+0x14>
    b710:	e5901000 	ldr	r1, [r0]
    b714:	e0811003 	add	r1, r1, r3

0000b718 <waitLoop>:
    b718:	e5902000 	ldr	r2, [r0]
    b71c:	e1510002 	cmp	r1, r2
    b720:	8afffffc 	bhi	b718 <waitLoop>
    b724:	e1a0f00e 	mov	pc, lr

0000b728 <setGPIOFunction>:
    b728:	e59f3110 	ldr	r3, [pc, #272]	; b840 <newButtonPress+0x18>
    b72c:	e3a04004 	mov	r4, #4
    b730:	e0000094 	mul	r0, r4, r0
    b734:	e7934000 	ldr	r4, [r3, r0]
    b738:	e3a05007 	mov	r5, #7
    b73c:	e1a05215 	lsl	r5, r5, r2
    b740:	e1c33005 	bic	r3, r3, r5
    b744:	e1a01211 	lsl	r1, r1, r2
    b748:	e1844001 	orr	r4, r4, r1
    b74c:	e7834000 	str	r4, [r3, r0]
    b750:	e1a0f00e 	mov	pc, lr

0000b754 <setDATAFunction>:
    b754:	e59f10e4 	ldr	r1, [pc, #228]	; b840 <newButtonPress+0x18>
    b758:	e5912004 	ldr	r2, [r1, #4]
    b75c:	e3a03007 	mov	r3, #7
    b760:	e1c22003 	bic	r2, r2, r3
    b764:	e1822000 	orr	r2, r2, r0
    b768:	e5812004 	str	r2, [r1, #4]
    b76c:	e1a0f00e 	mov	pc, lr

0000b770 <setLATCHFunction>:
    b770:	e59f10c8 	ldr	r1, [pc, #200]	; b840 <newButtonPress+0x18>
    b774:	e5912000 	ldr	r2, [r1]
    b778:	e3a03007 	mov	r3, #7
    b77c:	e1a03d83 	lsl	r3, r3, #27
    b780:	e1c22003 	bic	r2, r2, r3
    b784:	e1a00d80 	lsl	r0, r0, #27
    b788:	e1822000 	orr	r2, r2, r0
    b78c:	e5812000 	str	r2, [r1]
    b790:	e1a0f00e 	mov	pc, lr

0000b794 <setCLOCKFunction>:
    b794:	e59f10a4 	ldr	r1, [pc, #164]	; b840 <newButtonPress+0x18>
    b798:	e5912004 	ldr	r2, [r1, #4]
    b79c:	e3a03007 	mov	r3, #7
    b7a0:	e1a03183 	lsl	r3, r3, #3
    b7a4:	e1c22003 	bic	r2, r2, r3
    b7a8:	e1a00180 	lsl	r0, r0, #3
    b7ac:	e1822000 	orr	r2, r2, r0
    b7b0:	e5812004 	str	r2, [r1, #4]
    b7b4:	e1a0f00e 	mov	pc, lr

0000b7b8 <readGPIO>:
    b7b8:	e59f1080 	ldr	r1, [pc, #128]	; b840 <newButtonPress+0x18>
    b7bc:	e3500020 	cmp	r0, #32
    b7c0:	b5912034 	ldrlt	r2, [r1, #52]	; 0x34
    b7c4:	a5912038 	ldrge	r2, [r1, #56]	; 0x38
    b7c8:	a2400020 	subge	r0, r0, #32
    b7cc:	e3a03001 	mov	r3, #1
    b7d0:	e1a03013 	lsl	r3, r3, r0
    b7d4:	e0022003 	and	r2, r2, r3
    b7d8:	e3320000 	teq	r2, #0
    b7dc:	03a00000 	moveq	r0, #0
    b7e0:	13a00001 	movne	r0, #1
    b7e4:	e1a0f00e 	mov	pc, lr

0000b7e8 <writeGPIO>:
    b7e8:	e3310000 	teq	r1, #0
    b7ec:	e59f104c 	ldr	r1, [pc, #76]	; b840 <newButtonPress+0x18>
    b7f0:	1281201c 	addne	r2, r1, #28
    b7f4:	02812028 	addeq	r2, r1, #40	; 0x28
    b7f8:	e3500020 	cmp	r0, #32
    b7fc:	a2400020 	subge	r0, r0, #32
    b800:	e3a01001 	mov	r1, #1
    b804:	e1a01011 	lsl	r1, r1, r0
    b808:	b5821000 	strlt	r1, [r2]
    b80c:	a5821004 	strge	r1, [r2, #4]
    b810:	e1a0f00e 	mov	pc, lr

0000b814 <areAnySNESButtonsPressed>:
    b814:	e59f1028 	ldr	r1, [pc, #40]	; b844 <newButtonPress+0x1c>
    b818:	e0411000 	sub	r1, r1, r0
    b81c:	e1500009 	cmp	r0, r9
    b820:	1a000000 	bne	b828 <newButtonPress>
    b824:	e3a01000 	mov	r1, #0

0000b828 <newButtonPress>:
    b828:	e3310000 	teq	r1, #0
    b82c:	03a01000 	moveq	r1, #0
    b830:	13a01001 	movne	r1, #1
    b834:	e1a09000 	mov	r9, r0
    b838:	e1a0f00e 	mov	pc, lr
    b83c:	3f003004 	.word	0x3f003004
    b840:	3f200000 	.word	0x3f200000
    b844:	0000ffff 	.word	0x0000ffff

0000b848 <drawPauseMenu>:
    b848:	e92d4010 	push	{r4, lr}
    b84c:	e59f4d84 	ldr	r4, [pc, #3460]	; c5d8 <noPixel$+0x20>
    b850:	e3a03f7d 	mov	r3, #500	; 0x1f4
    b854:	e3a02f96 	mov	r2, #600	; 0x258
    b858:	e3a01086 	mov	r1, #134	; 0x86
    b85c:	e3a000d0 	mov	r0, #208	; 0xd0
    b860:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b864:	eb0003af 	bl	c728 <drawRect>
    b868:	e3a04902 	mov	r4, #32768	; 0x8000
    b86c:	e3a03004 	mov	r3, #4
    b870:	e3a02e26 	mov	r2, #608	; 0x260
    b874:	e3a01082 	mov	r1, #130	; 0x82
    b878:	e3a000cc 	mov	r0, #204	; 0xcc
    b87c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b880:	eb0003a8 	bl	c728 <drawRect>
    b884:	e3a04902 	mov	r4, #32768	; 0x8000
    b888:	e3a03004 	mov	r3, #4
    b88c:	e3a02e26 	mov	r2, #608	; 0x260
    b890:	e59f1d44 	ldr	r1, [pc, #3396]	; c5dc <noPixel$+0x24>
    b894:	e3a000cc 	mov	r0, #204	; 0xcc
    b898:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b89c:	eb0003a1 	bl	c728 <drawRect>
    b8a0:	e3a04902 	mov	r4, #32768	; 0x8000
    b8a4:	e3a03f7d 	mov	r3, #500	; 0x1f4
    b8a8:	e3a02004 	mov	r2, #4
    b8ac:	e3a01086 	mov	r1, #134	; 0x86
    b8b0:	e3a000cc 	mov	r0, #204	; 0xcc
    b8b4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b8b8:	eb00039a 	bl	c728 <drawRect>
    b8bc:	e3a04902 	mov	r4, #32768	; 0x8000
    b8c0:	e3a03f7d 	mov	r3, #500	; 0x1f4
    b8c4:	e3a02004 	mov	r2, #4
    b8c8:	e3a01086 	mov	r1, #134	; 0x86
    b8cc:	e3a00fca 	mov	r0, #808	; 0x328
    b8d0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b8d4:	eb000393 	bl	c728 <drawRect>
    b8d8:	eb000213 	bl	c12c <drawPaused>
    b8dc:	e59f0cfc 	ldr	r0, [pc, #3324]	; c5e0 <noPixel$+0x28>
    b8e0:	e3a01e1d 	mov	r1, #464	; 0x1d0
    b8e4:	eb0001f3 	bl	c0b8 <drawMenuButton>
    b8e8:	e59f0cf4 	ldr	r0, [pc, #3316]	; c5e4 <noPixel$+0x2c>
    b8ec:	e3a01000 	mov	r1, #0
    b8f0:	e59f2cf0 	ldr	r2, [pc, #3312]	; c5e8 <noPixel$+0x30>
    b8f4:	e59f3cec 	ldr	r3, [pc, #3308]	; c5e8 <noPixel$+0x30>
    b8f8:	eb00003b 	bl	b9ec <WriteSentence>
    b8fc:	e59f0cdc 	ldr	r0, [pc, #3292]	; c5e0 <noPixel$+0x28>
    b900:	e59f1ce4 	ldr	r1, [pc, #3300]	; c5ec <noPixel$+0x34>
    b904:	eb0001eb 	bl	c0b8 <drawMenuButton>
    b908:	e59f0ce0 	ldr	r0, [pc, #3296]	; c5f0 <noPixel$+0x38>
    b90c:	e3a01000 	mov	r1, #0
    b910:	e59f2cdc 	ldr	r2, [pc, #3292]	; c5f4 <noPixel$+0x3c>
    b914:	e3a03f8d 	mov	r3, #564	; 0x234
    b918:	eb000033 	bl	b9ec <WriteSentence>
    b91c:	eb000043 	bl	ba30 <setPauseMenuIndicatorRestart>
    b920:	e8bd8010 	pop	{r4, pc}

0000b924 <drawMainMenu>:
    b924:	e92d4610 	push	{r4, r9, sl, lr}
    b928:	e59f0cc8 	ldr	r0, [pc, #3272]	; c5f8 <noPixel$+0x40>
    b92c:	e5909014 	ldr	r9, [r0, #20]
    b930:	e590a018 	ldr	sl, [r0, #24]
    b934:	e59f0c9c 	ldr	r0, [pc, #3228]	; c5d8 <noPixel$+0x20>
    b938:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b93c:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    b940:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    b944:	e3a00000 	mov	r0, #0
    b948:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b94c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b950:	eb000374 	bl	c728 <drawRect>
    b954:	e59f4ca0 	ldr	r4, [pc, #3232]	; c5fc <noPixel$+0x44>
    b958:	e3a030c8 	mov	r3, #200	; 0xc8
    b95c:	e3a02f96 	mov	r2, #600	; 0x258
    b960:	e3a01054 	mov	r1, #84	; 0x54
    b964:	e3a000d4 	mov	r0, #212	; 0xd4
    b968:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b96c:	eb00036d 	bl	c728 <drawRect>
    b970:	e59f4c84 	ldr	r4, [pc, #3204]	; c5fc <noPixel$+0x44>
    b974:	e3a030c8 	mov	r3, #200	; 0xc8
    b978:	e3a020c8 	mov	r2, #200	; 0xc8
    b97c:	e3a01f47 	mov	r1, #284	; 0x11c
    b980:	e3a00f67 	mov	r0, #412	; 0x19c
    b984:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b988:	eb000366 	bl	c728 <drawRect>
    b98c:	eb00027b 	bl	c380 <drawTitle>
    b990:	e59f0c68 	ldr	r0, [pc, #3176]	; c600 <noPixel$+0x48>
    b994:	e3a01000 	mov	r1, #0
    b998:	e59f2c64 	ldr	r2, [pc, #3172]	; c604 <noPixel$+0x4c>
    b99c:	e3a03044 	mov	r3, #68	; 0x44
    b9a0:	eb000011 	bl	b9ec <WriteSentence>
    b9a4:	e59f0c34 	ldr	r0, [pc, #3124]	; c5e0 <noPixel$+0x28>
    b9a8:	e3a01f8d 	mov	r1, #564	; 0x234
    b9ac:	eb0001c1 	bl	c0b8 <drawMenuButton>
    b9b0:	e59f0c50 	ldr	r0, [pc, #3152]	; c608 <noPixel$+0x50>
    b9b4:	e3a01000 	mov	r1, #0
    b9b8:	e59f2c4c 	ldr	r2, [pc, #3148]	; c60c <noPixel$+0x54>
    b9bc:	e59f3c4c 	ldr	r3, [pc, #3148]	; c610 <noPixel$+0x58>
    b9c0:	eb000009 	bl	b9ec <WriteSentence>
    b9c4:	e59f0c14 	ldr	r0, [pc, #3092]	; c5e0 <noPixel$+0x28>
    b9c8:	e59f1c44 	ldr	r1, [pc, #3140]	; c614 <noPixel$+0x5c>
    b9cc:	eb0001b9 	bl	c0b8 <drawMenuButton>
    b9d0:	e59f0c18 	ldr	r0, [pc, #3096]	; c5f0 <noPixel$+0x38>
    b9d4:	e3a01000 	mov	r1, #0
    b9d8:	e59f2c14 	ldr	r2, [pc, #3092]	; c5f4 <noPixel$+0x3c>
    b9dc:	e3a03fa6 	mov	r3, #664	; 0x298
    b9e0:	eb000001 	bl	b9ec <WriteSentence>
    b9e4:	eb000031 	bl	bab0 <setMainMenuIndicatorStart>
    b9e8:	e8bd8610 	pop	{r4, r9, sl, pc}

0000b9ec <WriteSentence>:
    b9ec:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b9f0:	e1a05000 	mov	r5, r0
    b9f4:	e5954000 	ldr	r4, [r5]
    b9f8:	e2855004 	add	r5, r5, #4
    b9fc:	e1a06001 	mov	r6, r1
    ba00:	e1a08002 	mov	r8, r2
    ba04:	e1a07003 	mov	r7, r3

0000ba08 <LoadChar>:
    ba08:	e4d50001 	ldrb	r0, [r5], #1
    ba0c:	e1a01006 	mov	r1, r6
    ba10:	e1a02007 	mov	r2, r7
    ba14:	e1a03008 	mov	r3, r8
    ba18:	eb0002d8 	bl	c580 <DrawChar>
    ba1c:	e2888008 	add	r8, r8, #8
    ba20:	e2444001 	sub	r4, r4, #1
    ba24:	e3540000 	cmp	r4, #0
    ba28:	cafffff6 	bgt	ba08 <LoadChar>
    ba2c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000ba30 <setPauseMenuIndicatorRestart>:
    ba30:	e92d4010 	push	{r4, lr}
    ba34:	e59f4bdc 	ldr	r4, [pc, #3036]	; c618 <noPixel$+0x60>
    ba38:	e3a03014 	mov	r3, #20
    ba3c:	e3a02014 	mov	r2, #20
    ba40:	e3a01e23 	mov	r1, #560	; 0x230
    ba44:	e3a00f71 	mov	r0, #452	; 0x1c4
    ba48:	e92d001f 	push	{r0, r1, r2, r3, r4}
    ba4c:	eb000335 	bl	c728 <drawRect>
    ba50:	e3a04000 	mov	r4, #0
    ba54:	e3a03014 	mov	r3, #20
    ba58:	e3a02014 	mov	r2, #20
    ba5c:	e59f1bb8 	ldr	r1, [pc, #3000]	; c61c <noPixel$+0x64>
    ba60:	e3a00f71 	mov	r0, #452	; 0x1c4
    ba64:	e92d001f 	push	{r0, r1, r2, r3, r4}
    ba68:	eb00032e 	bl	c728 <drawRect>
    ba6c:	e8bd8010 	pop	{r4, pc}

0000ba70 <setPauseMenuIndicatorQuit>:
    ba70:	e92d4010 	push	{r4, lr}
    ba74:	e59f4b9c 	ldr	r4, [pc, #2972]	; c618 <noPixel$+0x60>
    ba78:	e3a03014 	mov	r3, #20
    ba7c:	e3a02014 	mov	r2, #20
    ba80:	e59f1b94 	ldr	r1, [pc, #2964]	; c61c <noPixel$+0x64>
    ba84:	e3a00f71 	mov	r0, #452	; 0x1c4
    ba88:	e92d001f 	push	{r0, r1, r2, r3, r4}
    ba8c:	eb000325 	bl	c728 <drawRect>
    ba90:	e3a04000 	mov	r4, #0
    ba94:	e3a03014 	mov	r3, #20
    ba98:	e3a02014 	mov	r2, #20
    ba9c:	e3a01e23 	mov	r1, #560	; 0x230
    baa0:	e3a00f71 	mov	r0, #452	; 0x1c4
    baa4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    baa8:	eb00031e 	bl	c728 <drawRect>
    baac:	e8bd8010 	pop	{r4, pc}

0000bab0 <setMainMenuIndicatorStart>:
    bab0:	e92d4010 	push	{r4, lr}
    bab4:	e59f4b5c 	ldr	r4, [pc, #2908]	; c618 <noPixel$+0x60>
    bab8:	e3a03014 	mov	r3, #20
    babc:	e3a02014 	mov	r2, #20
    bac0:	e3a01fa5 	mov	r1, #660	; 0x294
    bac4:	e3a00f71 	mov	r0, #452	; 0x1c4
    bac8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bacc:	eb000315 	bl	c728 <drawRect>
    bad0:	e3a04000 	mov	r4, #0
    bad4:	e3a03014 	mov	r3, #20
    bad8:	e3a02014 	mov	r2, #20
    badc:	e59f1b3c 	ldr	r1, [pc, #2876]	; c620 <noPixel$+0x68>
    bae0:	e3a00f71 	mov	r0, #452	; 0x1c4
    bae4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bae8:	eb00030e 	bl	c728 <drawRect>
    baec:	e8bd8010 	pop	{r4, pc}

0000baf0 <setMainMenuIndicatorQuit>:
    baf0:	e92d4010 	push	{r4, lr}
    baf4:	e59f4b1c 	ldr	r4, [pc, #2844]	; c618 <noPixel$+0x60>
    baf8:	e3a03014 	mov	r3, #20
    bafc:	e3a02014 	mov	r2, #20
    bb00:	e59f1b18 	ldr	r1, [pc, #2840]	; c620 <noPixel$+0x68>
    bb04:	e3a00f71 	mov	r0, #452	; 0x1c4
    bb08:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bb0c:	eb000305 	bl	c728 <drawRect>
    bb10:	e3a04000 	mov	r4, #0
    bb14:	e3a03014 	mov	r3, #20
    bb18:	e3a02014 	mov	r2, #20
    bb1c:	e3a01fa5 	mov	r1, #660	; 0x294
    bb20:	e3a00f71 	mov	r0, #452	; 0x1c4
    bb24:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bb28:	eb0002fe 	bl	c728 <drawRect>
    bb2c:	e8bd8010 	pop	{r4, pc}

0000bb30 <drawVictoryScreen>:
    bb30:	e92d4010 	push	{r4, lr}
    bb34:	e59f4ae8 	ldr	r4, [pc, #2792]	; c624 <noPixel$+0x6c>
    bb38:	e3a0305a 	mov	r3, #90	; 0x5a
    bb3c:	e3a0201e 	mov	r2, #30
    bb40:	e3a010c8 	mov	r1, #200	; 0xc8
    bb44:	e3a00057 	mov	r0, #87	; 0x57
    bb48:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bb4c:	eb0002f5 	bl	c728 <drawRect>
    bb50:	e59f4acc 	ldr	r4, [pc, #2764]	; c624 <noPixel$+0x6c>
    bb54:	e3a0305a 	mov	r3, #90	; 0x5a
    bb58:	e3a0201e 	mov	r2, #30
    bb5c:	e3a010c8 	mov	r1, #200	; 0xc8
    bb60:	e3a00093 	mov	r0, #147	; 0x93
    bb64:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bb68:	eb0002ee 	bl	c728 <drawRect>
    bb6c:	e59f4ab0 	ldr	r4, [pc, #2736]	; c624 <noPixel$+0x6c>
    bb70:	e3a0305a 	mov	r3, #90	; 0x5a
    bb74:	e3a0201e 	mov	r2, #30
    bb78:	e3a01f41 	mov	r1, #260	; 0x104
    bb7c:	e3a00075 	mov	r0, #117	; 0x75
    bb80:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bb84:	eb0002e7 	bl	c728 <drawRect>
    bb88:	e59f4a94 	ldr	r4, [pc, #2708]	; c624 <noPixel$+0x6c>
    bb8c:	e3a0305a 	mov	r3, #90	; 0x5a
    bb90:	e3a0201e 	mov	r2, #30
    bb94:	e3a010e6 	mov	r1, #230	; 0xe6
    bb98:	e3a000bb 	mov	r0, #187	; 0xbb
    bb9c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bba0:	eb0002e0 	bl	c728 <drawRect>
    bba4:	e59f4a78 	ldr	r4, [pc, #2680]	; c624 <noPixel$+0x6c>
    bba8:	e3a0305a 	mov	r3, #90	; 0x5a
    bbac:	e3a0201e 	mov	r2, #30
    bbb0:	e3a010e6 	mov	r1, #230	; 0xe6
    bbb4:	e3a000f7 	mov	r0, #247	; 0xf7
    bbb8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bbbc:	eb0002d9 	bl	c728 <drawRect>
    bbc0:	e59f4a5c 	ldr	r4, [pc, #2652]	; c624 <noPixel$+0x6c>
    bbc4:	e3a0301e 	mov	r3, #30
    bbc8:	e3a0201e 	mov	r2, #30
    bbcc:	e3a010c8 	mov	r1, #200	; 0xc8
    bbd0:	e3a000d9 	mov	r0, #217	; 0xd9
    bbd4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bbd8:	eb0002d2 	bl	c728 <drawRect>
    bbdc:	e59f4a40 	ldr	r4, [pc, #2624]	; c624 <noPixel$+0x6c>
    bbe0:	e3a0301e 	mov	r3, #30
    bbe4:	e3a0201e 	mov	r2, #30
    bbe8:	e3a01d05 	mov	r1, #320	; 0x140
    bbec:	e3a000d9 	mov	r0, #217	; 0xd9
    bbf0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bbf4:	eb0002cb 	bl	c728 <drawRect>
    bbf8:	e59f4a24 	ldr	r4, [pc, #2596]	; c624 <noPixel$+0x6c>
    bbfc:	e3a03078 	mov	r3, #120	; 0x78
    bc00:	e3a0201e 	mov	r2, #30
    bc04:	e3a010c8 	mov	r1, #200	; 0xc8
    bc08:	e59f0a18 	ldr	r0, [pc, #2584]	; c628 <noPixel$+0x70>
    bc0c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc10:	eb0002c4 	bl	c728 <drawRect>
    bc14:	e59f4a08 	ldr	r4, [pc, #2568]	; c624 <noPixel$+0x6c>
    bc18:	e3a03078 	mov	r3, #120	; 0x78
    bc1c:	e3a0201e 	mov	r2, #30
    bc20:	e3a010c8 	mov	r1, #200	; 0xc8
    bc24:	e59f0a00 	ldr	r0, [pc, #2560]	; c62c <noPixel$+0x74>
    bc28:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc2c:	eb0002bd 	bl	c728 <drawRect>
    bc30:	e59f49ec 	ldr	r4, [pc, #2540]	; c624 <noPixel$+0x6c>
    bc34:	e3a0301e 	mov	r3, #30
    bc38:	e3a0201e 	mov	r2, #30
    bc3c:	e3a01d05 	mov	r1, #320	; 0x140
    bc40:	e59f09e8 	ldr	r0, [pc, #2536]	; c630 <noPixel$+0x78>
    bc44:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc48:	eb0002b6 	bl	c728 <drawRect>
    bc4c:	e59f49d0 	ldr	r4, [pc, #2512]	; c624 <noPixel$+0x6c>
    bc50:	e3a03078 	mov	r3, #120	; 0x78
    bc54:	e3a0201e 	mov	r2, #30
    bc58:	e3a010c8 	mov	r1, #200	; 0xc8
    bc5c:	e59f09a8 	ldr	r0, [pc, #2472]	; c60c <noPixel$+0x54>
    bc60:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc64:	eb0002af 	bl	c728 <drawRect>
    bc68:	e59f49b4 	ldr	r4, [pc, #2484]	; c624 <noPixel$+0x6c>
    bc6c:	e3a03078 	mov	r3, #120	; 0x78
    bc70:	e3a0201e 	mov	r2, #30
    bc74:	e3a010c8 	mov	r1, #200	; 0xc8
    bc78:	e59f09b4 	ldr	r0, [pc, #2484]	; c634 <noPixel$+0x7c>
    bc7c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc80:	eb0002a8 	bl	c728 <drawRect>
    bc84:	e59f4998 	ldr	r4, [pc, #2456]	; c624 <noPixel$+0x6c>
    bc88:	e3a03078 	mov	r3, #120	; 0x78
    bc8c:	e3a0201e 	mov	r2, #30
    bc90:	e3a010c8 	mov	r1, #200	; 0xc8
    bc94:	e59f099c 	ldr	r0, [pc, #2460]	; c638 <noPixel$+0x80>
    bc98:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc9c:	eb0002a1 	bl	c728 <drawRect>
    bca0:	e59f497c 	ldr	r4, [pc, #2428]	; c624 <noPixel$+0x6c>
    bca4:	e3a0301e 	mov	r3, #30
    bca8:	e3a0201e 	mov	r2, #30
    bcac:	e3a01d05 	mov	r1, #320	; 0x140
    bcb0:	e59f0984 	ldr	r0, [pc, #2436]	; c63c <noPixel$+0x84>
    bcb4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bcb8:	eb00029a 	bl	c728 <drawRect>
    bcbc:	e59f4960 	ldr	r4, [pc, #2400]	; c624 <noPixel$+0x6c>
    bcc0:	e3a0301e 	mov	r3, #30
    bcc4:	e3a0201e 	mov	r2, #30
    bcc8:	e3a01d05 	mov	r1, #320	; 0x140
    bccc:	e59f096c 	ldr	r0, [pc, #2412]	; c640 <noPixel$+0x88>
    bcd0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bcd4:	eb000293 	bl	c728 <drawRect>
    bcd8:	e59f4944 	ldr	r4, [pc, #2372]	; c624 <noPixel$+0x6c>
    bcdc:	e3a0301e 	mov	r3, #30
    bce0:	e3a0205a 	mov	r2, #90	; 0x5a
    bce4:	e3a010c8 	mov	r1, #200	; 0xc8
    bce8:	e59f0954 	ldr	r0, [pc, #2388]	; c644 <noPixel$+0x8c>
    bcec:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bcf0:	eb00028c 	bl	c728 <drawRect>
    bcf4:	e59f4928 	ldr	r4, [pc, #2344]	; c624 <noPixel$+0x6c>
    bcf8:	e3a0301e 	mov	r3, #30
    bcfc:	e3a0205a 	mov	r2, #90	; 0x5a
    bd00:	e3a01d05 	mov	r1, #320	; 0x140
    bd04:	e59f0938 	ldr	r0, [pc, #2360]	; c644 <noPixel$+0x8c>
    bd08:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd0c:	eb000285 	bl	c728 <drawRect>
    bd10:	e59f490c 	ldr	r4, [pc, #2316]	; c624 <noPixel$+0x6c>
    bd14:	e3a0305a 	mov	r3, #90	; 0x5a
    bd18:	e3a0201e 	mov	r2, #30
    bd1c:	e3a010e6 	mov	r1, #230	; 0xe6
    bd20:	e59f0920 	ldr	r0, [pc, #2336]	; c648 <noPixel$+0x90>
    bd24:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd28:	eb00027e 	bl	c728 <drawRect>
    bd2c:	e59f48f0 	ldr	r4, [pc, #2288]	; c624 <noPixel$+0x6c>
    bd30:	e3a03096 	mov	r3, #150	; 0x96
    bd34:	e3a0201e 	mov	r2, #30
    bd38:	e3a010c8 	mov	r1, #200	; 0xc8
    bd3c:	e59f0908 	ldr	r0, [pc, #2312]	; c64c <noPixel$+0x94>
    bd40:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd44:	eb000277 	bl	c728 <drawRect>
    bd48:	e59f48d4 	ldr	r4, [pc, #2260]	; c624 <noPixel$+0x6c>
    bd4c:	e3a0301e 	mov	r3, #30
    bd50:	e3a0201e 	mov	r2, #30
    bd54:	e3a010e6 	mov	r1, #230	; 0xe6
    bd58:	e59f08f0 	ldr	r0, [pc, #2288]	; c650 <noPixel$+0x98>
    bd5c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd60:	eb000270 	bl	c728 <drawRect>
    bd64:	e59f48b8 	ldr	r4, [pc, #2232]	; c624 <noPixel$+0x6c>
    bd68:	e3a0301e 	mov	r3, #30
    bd6c:	e3a0201e 	mov	r2, #30
    bd70:	e3a01f41 	mov	r1, #260	; 0x104
    bd74:	e59f08d8 	ldr	r0, [pc, #2264]	; c654 <noPixel$+0x9c>
    bd78:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd7c:	eb000269 	bl	c728 <drawRect>
    bd80:	e59f489c 	ldr	r4, [pc, #2204]	; c624 <noPixel$+0x6c>
    bd84:	e3a0301e 	mov	r3, #30
    bd88:	e3a0201e 	mov	r2, #30
    bd8c:	e59f18c4 	ldr	r1, [pc, #2244]	; c658 <noPixel$+0xa0>
    bd90:	e59f08c4 	ldr	r0, [pc, #2244]	; c65c <noPixel$+0xa4>
    bd94:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd98:	eb000262 	bl	c728 <drawRect>
    bd9c:	e59f4880 	ldr	r4, [pc, #2176]	; c624 <noPixel$+0x6c>
    bda0:	e3a03096 	mov	r3, #150	; 0x96
    bda4:	e3a0201e 	mov	r2, #30
    bda8:	e3a010c8 	mov	r1, #200	; 0xc8
    bdac:	e59f08ac 	ldr	r0, [pc, #2220]	; c660 <noPixel$+0xa8>
    bdb0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bdb4:	eb00025b 	bl	c728 <drawRect>
    bdb8:	e59f4864 	ldr	r4, [pc, #2148]	; c624 <noPixel$+0x6c>
    bdbc:	e3a0305a 	mov	r3, #90	; 0x5a
    bdc0:	e3a0201e 	mov	r2, #30
    bdc4:	e3a010c8 	mov	r1, #200	; 0xc8
    bdc8:	e59f0894 	ldr	r0, [pc, #2196]	; c664 <noPixel$+0xac>
    bdcc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bdd0:	eb000254 	bl	c728 <drawRect>
    bdd4:	e59f4848 	ldr	r4, [pc, #2120]	; c624 <noPixel$+0x6c>
    bdd8:	e3a0301e 	mov	r3, #30
    bddc:	e3a0201e 	mov	r2, #30
    bde0:	e3a01d05 	mov	r1, #320	; 0x140
    bde4:	e59f0878 	ldr	r0, [pc, #2168]	; c664 <noPixel$+0xac>
    bde8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bdec:	eb00024d 	bl	c728 <drawRect>
    bdf0:	e8bd8010 	pop	{r4, pc}

0000bdf4 <drawLossScreen>:
    bdf4:	e92d4010 	push	{r4, lr}
    bdf8:	e59f4868 	ldr	r4, [pc, #2152]	; c668 <noPixel$+0xb0>
    bdfc:	e3a0305a 	mov	r3, #90	; 0x5a
    be00:	e3a0201e 	mov	r2, #30
    be04:	e3a010c8 	mov	r1, #200	; 0xc8
    be08:	e3a00075 	mov	r0, #117	; 0x75
    be0c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be10:	eb000244 	bl	c728 <drawRect>
    be14:	e59f484c 	ldr	r4, [pc, #2124]	; c668 <noPixel$+0xb0>
    be18:	e3a0305a 	mov	r3, #90	; 0x5a
    be1c:	e3a0201e 	mov	r2, #30
    be20:	e3a010c8 	mov	r1, #200	; 0xc8
    be24:	e3a000b1 	mov	r0, #177	; 0xb1
    be28:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be2c:	eb00023d 	bl	c728 <drawRect>
    be30:	e59f4830 	ldr	r4, [pc, #2096]	; c668 <noPixel$+0xb0>
    be34:	e3a0305a 	mov	r3, #90	; 0x5a
    be38:	e3a0201e 	mov	r2, #30
    be3c:	e3a01f41 	mov	r1, #260	; 0x104
    be40:	e3a00093 	mov	r0, #147	; 0x93
    be44:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be48:	eb000236 	bl	c728 <drawRect>
    be4c:	e59f4814 	ldr	r4, [pc, #2068]	; c668 <noPixel$+0xb0>
    be50:	e3a0305a 	mov	r3, #90	; 0x5a
    be54:	e3a0201e 	mov	r2, #30
    be58:	e3a010e6 	mov	r1, #230	; 0xe6
    be5c:	e3a000d9 	mov	r0, #217	; 0xd9
    be60:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be64:	eb00022f 	bl	c728 <drawRect>
    be68:	e59f47f8 	ldr	r4, [pc, #2040]	; c668 <noPixel$+0xb0>
    be6c:	e3a0305a 	mov	r3, #90	; 0x5a
    be70:	e3a0201e 	mov	r2, #30
    be74:	e3a010e6 	mov	r1, #230	; 0xe6
    be78:	e59f07ec 	ldr	r0, [pc, #2028]	; c66c <noPixel$+0xb4>
    be7c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be80:	eb000228 	bl	c728 <drawRect>
    be84:	e59f47dc 	ldr	r4, [pc, #2012]	; c668 <noPixel$+0xb0>
    be88:	e3a0301e 	mov	r3, #30
    be8c:	e3a0201e 	mov	r2, #30
    be90:	e3a010c8 	mov	r1, #200	; 0xc8
    be94:	e3a000f7 	mov	r0, #247	; 0xf7
    be98:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be9c:	eb000221 	bl	c728 <drawRect>
    bea0:	e59f47c0 	ldr	r4, [pc, #1984]	; c668 <noPixel$+0xb0>
    bea4:	e3a0301e 	mov	r3, #30
    bea8:	e3a0201e 	mov	r2, #30
    beac:	e3a01d05 	mov	r1, #320	; 0x140
    beb0:	e3a000f7 	mov	r0, #247	; 0xf7
    beb4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    beb8:	eb00021a 	bl	c728 <drawRect>
    bebc:	e59f47a4 	ldr	r4, [pc, #1956]	; c668 <noPixel$+0xb0>
    bec0:	e3a03078 	mov	r3, #120	; 0x78
    bec4:	e3a0201e 	mov	r2, #30
    bec8:	e3a010c8 	mov	r1, #200	; 0xc8
    becc:	e59f075c 	ldr	r0, [pc, #1884]	; c630 <noPixel$+0x78>
    bed0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bed4:	eb000213 	bl	c728 <drawRect>
    bed8:	e59f4788 	ldr	r4, [pc, #1928]	; c668 <noPixel$+0xb0>
    bedc:	e3a03078 	mov	r3, #120	; 0x78
    bee0:	e3a0201e 	mov	r2, #30
    bee4:	e3a010c8 	mov	r1, #200	; 0xc8
    bee8:	e59f0780 	ldr	r0, [pc, #1920]	; c670 <noPixel$+0xb8>
    beec:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bef0:	eb00020c 	bl	c728 <drawRect>
    bef4:	e59f476c 	ldr	r4, [pc, #1900]	; c668 <noPixel$+0xb0>
    bef8:	e3a0301e 	mov	r3, #30
    befc:	e3a0201e 	mov	r2, #30
    bf00:	e3a01d05 	mov	r1, #320	; 0x140
    bf04:	e59f0720 	ldr	r0, [pc, #1824]	; c62c <noPixel$+0x74>
    bf08:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf0c:	eb000205 	bl	c728 <drawRect>
    bf10:	e59f4750 	ldr	r4, [pc, #1872]	; c668 <noPixel$+0xb0>
    bf14:	e3a03096 	mov	r3, #150	; 0x96
    bf18:	e3a0201e 	mov	r2, #30
    bf1c:	e3a010c8 	mov	r1, #200	; 0xc8
    bf20:	e59f0714 	ldr	r0, [pc, #1812]	; c63c <noPixel$+0x84>
    bf24:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf28:	eb0001fe 	bl	c728 <drawRect>
    bf2c:	e59f4734 	ldr	r4, [pc, #1844]	; c668 <noPixel$+0xb0>
    bf30:	e3a0301e 	mov	r3, #30
    bf34:	e3a0203c 	mov	r2, #60	; 0x3c
    bf38:	e3a01d05 	mov	r1, #320	; 0x140
    bf3c:	e59f06f0 	ldr	r0, [pc, #1776]	; c634 <noPixel$+0x7c>
    bf40:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf44:	eb0001f7 	bl	c728 <drawRect>
    bf48:	e59f4718 	ldr	r4, [pc, #1816]	; c668 <noPixel$+0xb0>
    bf4c:	e3a0305a 	mov	r3, #90	; 0x5a
    bf50:	e3a0201e 	mov	r2, #30
    bf54:	e3a010e6 	mov	r1, #230	; 0xe6
    bf58:	e59f0714 	ldr	r0, [pc, #1812]	; c674 <noPixel$+0xbc>
    bf5c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf60:	eb0001f0 	bl	c728 <drawRect>
    bf64:	e59f46fc 	ldr	r4, [pc, #1788]	; c668 <noPixel$+0xb0>
    bf68:	e3a0305a 	mov	r3, #90	; 0x5a
    bf6c:	e3a0201e 	mov	r2, #30
    bf70:	e3a010e6 	mov	r1, #230	; 0xe6
    bf74:	e59f06cc 	ldr	r0, [pc, #1740]	; c648 <noPixel$+0x90>
    bf78:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf7c:	eb0001e9 	bl	c728 <drawRect>
    bf80:	e59f46e0 	ldr	r4, [pc, #1760]	; c668 <noPixel$+0xb0>
    bf84:	e3a0301e 	mov	r3, #30
    bf88:	e3a0201e 	mov	r2, #30
    bf8c:	e3a010c8 	mov	r1, #200	; 0xc8
    bf90:	e59f06ac 	ldr	r0, [pc, #1708]	; c644 <noPixel$+0x8c>
    bf94:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf98:	eb0001e2 	bl	c728 <drawRect>
    bf9c:	e59f46c4 	ldr	r4, [pc, #1732]	; c668 <noPixel$+0xb0>
    bfa0:	e3a0301e 	mov	r3, #30
    bfa4:	e3a0201e 	mov	r2, #30
    bfa8:	e3a01d05 	mov	r1, #320	; 0x140
    bfac:	e59f0690 	ldr	r0, [pc, #1680]	; c644 <noPixel$+0x8c>
    bfb0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bfb4:	eb0001db 	bl	c728 <drawRect>
    bfb8:	e59f46a8 	ldr	r4, [pc, #1704]	; c668 <noPixel$+0xb0>
    bfbc:	e3a0301e 	mov	r3, #30
    bfc0:	e3a0205a 	mov	r2, #90	; 0x5a
    bfc4:	e3a010c8 	mov	r1, #200	; 0xc8
    bfc8:	e59f06a8 	ldr	r0, [pc, #1704]	; c678 <noPixel$+0xc0>
    bfcc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bfd0:	eb0001d4 	bl	c728 <drawRect>
    bfd4:	e59f468c 	ldr	r4, [pc, #1676]	; c668 <noPixel$+0xb0>
    bfd8:	e3a0301e 	mov	r3, #30
    bfdc:	e3a0201e 	mov	r2, #30
    bfe0:	e3a010e6 	mov	r1, #230	; 0xe6
    bfe4:	e59f068c 	ldr	r0, [pc, #1676]	; c678 <noPixel$+0xc0>
    bfe8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bfec:	eb0001cd 	bl	c728 <drawRect>
    bff0:	e59f4670 	ldr	r4, [pc, #1648]	; c668 <noPixel$+0xb0>
    bff4:	e3a0301e 	mov	r3, #30
    bff8:	e3a0205a 	mov	r2, #90	; 0x5a
    bffc:	e3a01f41 	mov	r1, #260	; 0x104
    c000:	e59f0670 	ldr	r0, [pc, #1648]	; c678 <noPixel$+0xc0>
    c004:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c008:	eb0001c6 	bl	c728 <drawRect>
    c00c:	e59f4654 	ldr	r4, [pc, #1620]	; c668 <noPixel$+0xb0>
    c010:	e3a0301e 	mov	r3, #30
    c014:	e3a0201e 	mov	r2, #30
    c018:	e59f1638 	ldr	r1, [pc, #1592]	; c658 <noPixel$+0xa0>
    c01c:	e59f062c 	ldr	r0, [pc, #1580]	; c650 <noPixel$+0x98>
    c020:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c024:	eb0001bf 	bl	c728 <drawRect>
    c028:	e59f4638 	ldr	r4, [pc, #1592]	; c668 <noPixel$+0xb0>
    c02c:	e3a0301e 	mov	r3, #30
    c030:	e3a0205a 	mov	r2, #90	; 0x5a
    c034:	e3a01d05 	mov	r1, #320	; 0x140
    c038:	e59f0638 	ldr	r0, [pc, #1592]	; c678 <noPixel$+0xc0>
    c03c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c040:	eb0001b8 	bl	c728 <drawRect>
    c044:	e59f461c 	ldr	r4, [pc, #1564]	; c668 <noPixel$+0xb0>
    c048:	e3a03096 	mov	r3, #150	; 0x96
    c04c:	e3a0201e 	mov	r2, #30
    c050:	e3a010c8 	mov	r1, #200	; 0xc8
    c054:	e59f0620 	ldr	r0, [pc, #1568]	; c67c <noPixel$+0xc4>
    c058:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c05c:	eb0001b1 	bl	c728 <drawRect>
    c060:	e59f4600 	ldr	r4, [pc, #1536]	; c668 <noPixel$+0xb0>
    c064:	e3a0301e 	mov	r3, #30
    c068:	e3a0203c 	mov	r2, #60	; 0x3c
    c06c:	e3a010c8 	mov	r1, #200	; 0xc8
    c070:	e59f0608 	ldr	r0, [pc, #1544]	; c680 <noPixel$+0xc8>
    c074:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c078:	eb0001aa 	bl	c728 <drawRect>
    c07c:	e59f45e4 	ldr	r4, [pc, #1508]	; c668 <noPixel$+0xb0>
    c080:	e3a0301e 	mov	r3, #30
    c084:	e3a0203c 	mov	r2, #60	; 0x3c
    c088:	e3a01f41 	mov	r1, #260	; 0x104
    c08c:	e59f05ec 	ldr	r0, [pc, #1516]	; c680 <noPixel$+0xc8>
    c090:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c094:	eb0001a3 	bl	c728 <drawRect>
    c098:	e59f45c8 	ldr	r4, [pc, #1480]	; c668 <noPixel$+0xb0>
    c09c:	e3a0301e 	mov	r3, #30
    c0a0:	e3a0203c 	mov	r2, #60	; 0x3c
    c0a4:	e3a01d05 	mov	r1, #320	; 0x140
    c0a8:	e59f05d0 	ldr	r0, [pc, #1488]	; c680 <noPixel$+0xc8>
    c0ac:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c0b0:	eb00019c 	bl	c728 <drawRect>
    c0b4:	e8bd8010 	pop	{r4, pc}

0000c0b8 <drawMenuButton>:
    c0b8:	e92d4610 	push	{r4, r9, sl, lr}
    c0bc:	e1a09000 	mov	r9, r0
    c0c0:	e1a0a001 	mov	sl, r1
    c0c4:	e3a04000 	mov	r4, #0
    c0c8:	e3a03032 	mov	r3, #50	; 0x32
    c0cc:	e3a02096 	mov	r2, #150	; 0x96
    c0d0:	e1a0100a 	mov	r1, sl
    c0d4:	e1a00009 	mov	r0, r9
    c0d8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c0dc:	eb000191 	bl	c728 <drawRect>
    c0e0:	e2899005 	add	r9, r9, #5
    c0e4:	e28aa005 	add	sl, sl, #5
    c0e8:	e59f4594 	ldr	r4, [pc, #1428]	; c684 <noPixel$+0xcc>
    c0ec:	e3a03028 	mov	r3, #40	; 0x28
    c0f0:	e3a0208c 	mov	r2, #140	; 0x8c
    c0f4:	e1a0100a 	mov	r1, sl
    c0f8:	e1a00009 	mov	r0, r9
    c0fc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c100:	eb000188 	bl	c728 <drawRect>
    c104:	e2899005 	add	r9, r9, #5
    c108:	e28aa005 	add	sl, sl, #5
    c10c:	e59f4504 	ldr	r4, [pc, #1284]	; c618 <noPixel$+0x60>
    c110:	e3a0301e 	mov	r3, #30
    c114:	e3a0201e 	mov	r2, #30
    c118:	e1a0100a 	mov	r1, sl
    c11c:	e1a00009 	mov	r0, r9
    c120:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c124:	eb00017f 	bl	c728 <drawRect>
    c128:	e8bd8610 	pop	{r4, r9, sl, pc}

0000c12c <drawPaused>:
    c12c:	e92d4010 	push	{r4, lr}
    c130:	e3a04000 	mov	r4, #0
    c134:	e3a03096 	mov	r3, #150	; 0x96
    c138:	e3a0201e 	mov	r2, #30
    c13c:	e3a010ae 	mov	r1, #174	; 0xae
    c140:	e3a000e4 	mov	r0, #228	; 0xe4
    c144:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c148:	eb000176 	bl	c728 <drawRect>
    c14c:	e3a04000 	mov	r4, #0
    c150:	e3a0301e 	mov	r3, #30
    c154:	e3a0203c 	mov	r2, #60	; 0x3c
    c158:	e3a010ae 	mov	r1, #174	; 0xae
    c15c:	e59f0524 	ldr	r0, [pc, #1316]	; c688 <noPixel$+0xd0>
    c160:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c164:	eb00016f 	bl	c728 <drawRect>
    c168:	e3a04000 	mov	r4, #0
    c16c:	e3a0301e 	mov	r3, #30
    c170:	e3a0203c 	mov	r2, #60	; 0x3c
    c174:	e3a010ea 	mov	r1, #234	; 0xea
    c178:	e59f0508 	ldr	r0, [pc, #1288]	; c688 <noPixel$+0xd0>
    c17c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c180:	eb000168 	bl	c728 <drawRect>
    c184:	e3a04000 	mov	r4, #0
    c188:	e3a0301e 	mov	r3, #30
    c18c:	e3a0201e 	mov	r2, #30
    c190:	e3a010cc 	mov	r1, #204	; 0xcc
    c194:	e3a00e12 	mov	r0, #288	; 0x120
    c198:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c19c:	eb000161 	bl	c728 <drawRect>
    c1a0:	e3a04000 	mov	r4, #0
    c1a4:	e3a03078 	mov	r3, #120	; 0x78
    c1a8:	e3a0201e 	mov	r2, #30
    c1ac:	e3a010cc 	mov	r1, #204	; 0xcc
    c1b0:	e3a00f52 	mov	r0, #328	; 0x148
    c1b4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c1b8:	eb00015a 	bl	c728 <drawRect>
    c1bc:	e3a04000 	mov	r4, #0
    c1c0:	e3a03078 	mov	r3, #120	; 0x78
    c1c4:	e3a0201e 	mov	r2, #30
    c1c8:	e3a010cc 	mov	r1, #204	; 0xcc
    c1cc:	e3a00f61 	mov	r0, #388	; 0x184
    c1d0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c1d4:	eb000153 	bl	c728 <drawRect>
    c1d8:	e3a04000 	mov	r4, #0
    c1dc:	e3a0301e 	mov	r3, #30
    c1e0:	e3a0201e 	mov	r2, #30
    c1e4:	e3a010ae 	mov	r1, #174	; 0xae
    c1e8:	e59f049c 	ldr	r0, [pc, #1180]	; c68c <noPixel$+0xd4>
    c1ec:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c1f0:	eb00014c 	bl	c728 <drawRect>
    c1f4:	e3a04000 	mov	r4, #0
    c1f8:	e3a0301e 	mov	r3, #30
    c1fc:	e3a0201e 	mov	r2, #30
    c200:	e3a010ea 	mov	r1, #234	; 0xea
    c204:	e59f0480 	ldr	r0, [pc, #1152]	; c68c <noPixel$+0xd4>
    c208:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c20c:	eb000145 	bl	c728 <drawRect>
    c210:	e3a04000 	mov	r4, #0
    c214:	e3a03078 	mov	r3, #120	; 0x78
    c218:	e3a0201e 	mov	r2, #30
    c21c:	e3a010ae 	mov	r1, #174	; 0xae
    c220:	e3a00f6b 	mov	r0, #428	; 0x1ac
    c224:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c228:	eb00013e 	bl	c728 <drawRect>
    c22c:	e3a04000 	mov	r4, #0
    c230:	e3a03078 	mov	r3, #120	; 0x78
    c234:	e3a0201e 	mov	r2, #30
    c238:	e3a010ae 	mov	r1, #174	; 0xae
    c23c:	e3a00f7a 	mov	r0, #488	; 0x1e8
    c240:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c244:	eb000137 	bl	c728 <drawRect>
    c248:	e3a04000 	mov	r4, #0
    c24c:	e3a0301e 	mov	r3, #30
    c250:	e3a0201e 	mov	r2, #30
    c254:	e59f1434 	ldr	r1, [pc, #1076]	; c690 <noPixel$+0xd8>
    c258:	e59f0434 	ldr	r0, [pc, #1076]	; c694 <noPixel$+0xdc>
    c25c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c260:	eb000130 	bl	c728 <drawRect>
    c264:	e3a04000 	mov	r4, #0
    c268:	e3a03096 	mov	r3, #150	; 0x96
    c26c:	e3a0204b 	mov	r2, #75	; 0x4b
    c270:	e3a010ae 	mov	r1, #174	; 0xae
    c274:	e3a00e21 	mov	r0, #528	; 0x210
    c278:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c27c:	eb000129 	bl	c728 <drawRect>
    c280:	e59f4350 	ldr	r4, [pc, #848]	; c5d8 <noPixel$+0x20>
    c284:	e3a0301e 	mov	r3, #30
    c288:	e3a0202d 	mov	r2, #45	; 0x2d
    c28c:	e3a01f42 	mov	r1, #264	; 0x108
    c290:	e3a00e21 	mov	r0, #528	; 0x210
    c294:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c298:	eb000122 	bl	c728 <drawRect>
    c29c:	e59f4334 	ldr	r4, [pc, #820]	; c5d8 <noPixel$+0x20>
    c2a0:	e3a0301e 	mov	r3, #30
    c2a4:	e3a0202d 	mov	r2, #45	; 0x2d
    c2a8:	e3a010cc 	mov	r1, #204	; 0xcc
    c2ac:	e59f03e4 	ldr	r0, [pc, #996]	; c698 <noPixel$+0xe0>
    c2b0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c2b4:	eb00011b 	bl	c728 <drawRect>
    c2b8:	e3a04000 	mov	r4, #0
    c2bc:	e3a03096 	mov	r3, #150	; 0x96
    c2c0:	e3a0204b 	mov	r2, #75	; 0x4b
    c2c4:	e3a010ae 	mov	r1, #174	; 0xae
    c2c8:	e59f03cc 	ldr	r0, [pc, #972]	; c69c <noPixel$+0xe4>
    c2cc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c2d0:	eb000114 	bl	c728 <drawRect>
    c2d4:	e59f42fc 	ldr	r4, [pc, #764]	; c5d8 <noPixel$+0x20>
    c2d8:	e3a0301e 	mov	r3, #30
    c2dc:	e3a0202d 	mov	r2, #45	; 0x2d
    c2e0:	e3a01f42 	mov	r1, #264	; 0x108
    c2e4:	e59f03b4 	ldr	r0, [pc, #948]	; c6a0 <noPixel$+0xe8>
    c2e8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c2ec:	eb00010d 	bl	c728 <drawRect>
    c2f0:	e59f42e0 	ldr	r4, [pc, #736]	; c5d8 <noPixel$+0x20>
    c2f4:	e3a0301e 	mov	r3, #30
    c2f8:	e3a0202d 	mov	r2, #45	; 0x2d
    c2fc:	e3a010cc 	mov	r1, #204	; 0xcc
    c300:	e59f0398 	ldr	r0, [pc, #920]	; c6a0 <noPixel$+0xe8>
    c304:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c308:	eb000106 	bl	c728 <drawRect>
    c30c:	e3a04000 	mov	r4, #0
    c310:	e3a03096 	mov	r3, #150	; 0x96
    c314:	e3a0201e 	mov	r2, #30
    c318:	e3a010ae 	mov	r1, #174	; 0xae
    c31c:	e59f0380 	ldr	r0, [pc, #896]	; c6a4 <noPixel$+0xec>
    c320:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c324:	eb0000ff 	bl	c728 <drawRect>
    c328:	e3a04000 	mov	r4, #0
    c32c:	e3a0301e 	mov	r3, #30
    c330:	e3a0201e 	mov	r2, #30
    c334:	e3a010ae 	mov	r1, #174	; 0xae
    c338:	e3a00fb6 	mov	r0, #728	; 0x2d8
    c33c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c340:	eb0000f8 	bl	c728 <drawRect>
    c344:	e3a04000 	mov	r4, #0
    c348:	e3a0301e 	mov	r3, #30
    c34c:	e3a0201e 	mov	r2, #30
    c350:	e59f1338 	ldr	r1, [pc, #824]	; c690 <noPixel$+0xd8>
    c354:	e3a00fb6 	mov	r0, #728	; 0x2d8
    c358:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c35c:	eb0000f1 	bl	c728 <drawRect>
    c360:	e3a04000 	mov	r4, #0
    c364:	e3a0305a 	mov	r3, #90	; 0x5a
    c368:	e3a0201e 	mov	r2, #30
    c36c:	e3a010cc 	mov	r1, #204	; 0xcc
    c370:	e59f0330 	ldr	r0, [pc, #816]	; c6a8 <noPixel$+0xf0>
    c374:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c378:	eb0000ea 	bl	c728 <drawRect>
    c37c:	e8bd8010 	pop	{r4, pc}

0000c380 <drawTitle>:
    c380:	e92d4010 	push	{r4, lr}
    c384:	e3a04000 	mov	r4, #0
    c388:	e3a0301e 	mov	r3, #30
    c38c:	e3a0205a 	mov	r2, #90	; 0x5a
    c390:	e3a0106d 	mov	r1, #109	; 0x6d
    c394:	e3a000e3 	mov	r0, #227	; 0xe3
    c398:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c39c:	eb0000e1 	bl	c728 <drawRect>
    c3a0:	e3a04000 	mov	r4, #0
    c3a4:	e3a03078 	mov	r3, #120	; 0x78
    c3a8:	e3a0201e 	mov	r2, #30
    c3ac:	e3a0108b 	mov	r1, #139	; 0x8b
    c3b0:	e59f02f4 	ldr	r0, [pc, #756]	; c6ac <noPixel$+0xf4>
    c3b4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c3b8:	eb0000da 	bl	c728 <drawRect>
    c3bc:	e3a04000 	mov	r4, #0
    c3c0:	e3a03096 	mov	r3, #150	; 0x96
    c3c4:	e3a0204b 	mov	r2, #75	; 0x4b
    c3c8:	e3a0106d 	mov	r1, #109	; 0x6d
    c3cc:	e59f02dc 	ldr	r0, [pc, #732]	; c6b0 <noPixel$+0xf8>
    c3d0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c3d4:	eb0000d3 	bl	c728 <drawRect>
    c3d8:	e59f421c 	ldr	r4, [pc, #540]	; c5fc <noPixel$+0x44>
    c3dc:	e3a0301e 	mov	r3, #30
    c3e0:	e3a0202d 	mov	r2, #45	; 0x2d
    c3e4:	e3a0108b 	mov	r1, #139	; 0x8b
    c3e8:	e59f02c4 	ldr	r0, [pc, #708]	; c6b4 <noPixel$+0xfc>
    c3ec:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c3f0:	eb0000cc 	bl	c728 <drawRect>
    c3f4:	e59f4200 	ldr	r4, [pc, #512]	; c5fc <noPixel$+0x44>
    c3f8:	e3a0301e 	mov	r3, #30
    c3fc:	e3a0202d 	mov	r2, #45	; 0x2d
    c400:	e3a010c7 	mov	r1, #199	; 0xc7
    c404:	e59f02a8 	ldr	r0, [pc, #680]	; c6b4 <noPixel$+0xfc>
    c408:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c40c:	eb0000c5 	bl	c728 <drawRect>
    c410:	e3a04000 	mov	r4, #0
    c414:	e3a0301e 	mov	r3, #30
    c418:	e3a0205a 	mov	r2, #90	; 0x5a
    c41c:	e3a0106d 	mov	r1, #109	; 0x6d
    c420:	e3a00f67 	mov	r0, #412	; 0x19c
    c424:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c428:	eb0000be 	bl	c728 <drawRect>
    c42c:	e3a04000 	mov	r4, #0
    c430:	e3a03078 	mov	r3, #120	; 0x78
    c434:	e3a0201e 	mov	r2, #30
    c438:	e3a0108b 	mov	r1, #139	; 0x8b
    c43c:	e59f0274 	ldr	r0, [pc, #628]	; c6b8 <noPixel$+0x100>
    c440:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c444:	eb0000b7 	bl	c728 <drawRect>
    c448:	e3a04000 	mov	r4, #0
    c44c:	e3a0305a 	mov	r3, #90	; 0x5a
    c450:	e3a0205a 	mov	r2, #90	; 0x5a
    c454:	e3a0106d 	mov	r1, #109	; 0x6d
    c458:	e3a00c02 	mov	r0, #512	; 0x200
    c45c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c460:	eb0000b0 	bl	c728 <drawRect>
    c464:	e59f4190 	ldr	r4, [pc, #400]	; c5fc <noPixel$+0x44>
    c468:	e3a0301e 	mov	r3, #30
    c46c:	e3a0201e 	mov	r2, #30
    c470:	e3a0108b 	mov	r1, #139	; 0x8b
    c474:	e59f0240 	ldr	r0, [pc, #576]	; c6bc <noPixel$+0x104>
    c478:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c47c:	eb0000a9 	bl	c728 <drawRect>
    c480:	e3a04000 	mov	r4, #0
    c484:	e3a0303c 	mov	r3, #60	; 0x3c
    c488:	e3a0201e 	mov	r2, #30
    c48c:	e3a010c7 	mov	r1, #199	; 0xc7
    c490:	e3a00c02 	mov	r0, #512	; 0x200
    c494:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c498:	eb0000a2 	bl	c728 <drawRect>
    c49c:	e3a04000 	mov	r4, #0
    c4a0:	e3a0301e 	mov	r3, #30
    c4a4:	e3a0201e 	mov	r2, #30
    c4a8:	e3a010c7 	mov	r1, #199	; 0xc7
    c4ac:	e59f0208 	ldr	r0, [pc, #520]	; c6bc <noPixel$+0x104>
    c4b0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c4b4:	eb00009b 	bl	c728 <drawRect>
    c4b8:	e3a04000 	mov	r4, #0
    c4bc:	e3a0301e 	mov	r3, #30
    c4c0:	e3a0201e 	mov	r2, #30
    c4c4:	e3a010e5 	mov	r1, #229	; 0xe5
    c4c8:	e3a00f8f 	mov	r0, #572	; 0x23c
    c4cc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c4d0:	eb000094 	bl	c728 <drawRect>
    c4d4:	e3a04000 	mov	r4, #0
    c4d8:	e3a0301e 	mov	r3, #30
    c4dc:	e3a0205a 	mov	r2, #90	; 0x5a
    c4e0:	e3a0106d 	mov	r1, #109	; 0x6d
    c4e4:	e3a00f99 	mov	r0, #612	; 0x264
    c4e8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c4ec:	eb00008d 	bl	c728 <drawRect>
    c4f0:	e3a04000 	mov	r4, #0
    c4f4:	e3a0301e 	mov	r3, #30
    c4f8:	e3a0205a 	mov	r2, #90	; 0x5a
    c4fc:	e3a010e5 	mov	r1, #229	; 0xe5
    c500:	e3a00f99 	mov	r0, #612	; 0x264
    c504:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c508:	eb000086 	bl	c728 <drawRect>
    c50c:	e3a04000 	mov	r4, #0
    c510:	e3a0305a 	mov	r3, #90	; 0x5a
    c514:	e3a0201e 	mov	r2, #30
    c518:	e3a0108b 	mov	r1, #139	; 0x8b
    c51c:	e59f019c 	ldr	r0, [pc, #412]	; c6c0 <noPixel$+0x108>
    c520:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c524:	eb00007f 	bl	c728 <drawRect>
    c528:	e3a04000 	mov	r4, #0
    c52c:	e3a03096 	mov	r3, #150	; 0x96
    c530:	e3a02050 	mov	r2, #80	; 0x50
    c534:	e3a0106d 	mov	r1, #109	; 0x6d
    c538:	e3a00fb2 	mov	r0, #712	; 0x2c8
    c53c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c540:	eb000078 	bl	c728 <drawRect>
    c544:	e59f40b0 	ldr	r4, [pc, #176]	; c5fc <noPixel$+0x44>
    c548:	e3a0301e 	mov	r3, #30
    c54c:	e3a02032 	mov	r2, #50	; 0x32
    c550:	e3a0108b 	mov	r1, #139	; 0x8b
    c554:	e59f0168 	ldr	r0, [pc, #360]	; c6c4 <noPixel$+0x10c>
    c558:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c55c:	eb000071 	bl	c728 <drawRect>
    c560:	e59f4094 	ldr	r4, [pc, #148]	; c5fc <noPixel$+0x44>
    c564:	e3a0301e 	mov	r3, #30
    c568:	e3a02032 	mov	r2, #50	; 0x32
    c56c:	e3a010c7 	mov	r1, #199	; 0xc7
    c570:	e3a00fb2 	mov	r0, #712	; 0x2c8
    c574:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c578:	eb00006a 	bl	c728 <drawRect>
    c57c:	e8bd8010 	pop	{r4, pc}

0000c580 <DrawChar>:
    c580:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    c584:	e1a09001 	mov	r9, r1
    c588:	e59f4138 	ldr	r4, [pc, #312]	; c6c8 <noPixel$+0x110>
    c58c:	e0844200 	add	r4, r4, r0, lsl #4
    c590:	e1a06002 	mov	r6, r2

0000c594 <charLoop$>:
    c594:	e1a05003 	mov	r5, r3
    c598:	e3a08001 	mov	r8, #1
    c59c:	e4d47001 	ldrb	r7, [r4], #1

0000c5a0 <rowLoop$>:
    c5a0:	e1170008 	tst	r7, r8
    c5a4:	0a000003 	beq	c5b8 <noPixel$>
    c5a8:	e1a00005 	mov	r0, r5
    c5ac:	e1a01006 	mov	r1, r6
    c5b0:	e1a02009 	mov	r2, r9
    c5b4:	eb000051 	bl	c700 <drawPixel>

0000c5b8 <noPixel$>:
    c5b8:	e2855001 	add	r5, r5, #1
    c5bc:	e1a08088 	lsl	r8, r8, #1
    c5c0:	e3180c01 	tst	r8, #256	; 0x100
    c5c4:	0afffff5 	beq	c5a0 <rowLoop$>
    c5c8:	e2866001 	add	r6, r6, #1
    c5cc:	e314000f 	tst	r4, #15
    c5d0:	1affffef 	bne	c594 <charLoop$>
    c5d4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    c5d8:	0000967f 	.word	0x0000967f
    c5dc:	0000027a 	.word	0x0000027a
    c5e0:	000001b5 	.word	0x000001b5
    c5e4:	0000a580 	.word	0x0000a580
    c5e8:	000001e3 	.word	0x000001e3
    c5ec:	00000221 	.word	0x00000221
    c5f0:	0000a570 	.word	0x0000a570
    c5f4:	000001eb 	.word	0x000001eb
    c5f8:	00009cb0 	.word	0x00009cb0
    c5fc:	0000297e 	.word	0x0000297e
    c600:	0000a520 	.word	0x0000a520
    c604:	00000172 	.word	0x00000172
    c608:	0000a560 	.word	0x0000a560
    c60c:	000001e7 	.word	0x000001e7
    c610:	00000247 	.word	0x00000247
    c614:	00000285 	.word	0x00000285
    c618:	0000ffff 	.word	0x0000ffff
    c61c:	000001df 	.word	0x000001df
    c620:	00000243 	.word	0x00000243
    c624:	00003707 	.word	0x00003707
    c628:	0000011f 	.word	0x0000011f
    c62c:	0000015b 	.word	0x0000015b
    c630:	0000013d 	.word	0x0000013d
    c634:	00000223 	.word	0x00000223
    c638:	0000025f 	.word	0x0000025f
    c63c:	00000205 	.word	0x00000205
    c640:	00000241 	.word	0x00000241
    c644:	00000287 	.word	0x00000287
    c648:	000002a5 	.word	0x000002a5
    c64c:	000002eb 	.word	0x000002eb
    c650:	00000309 	.word	0x00000309
    c654:	00000327 	.word	0x00000327
    c658:	00000122 	.word	0x00000122
    c65c:	00000345 	.word	0x00000345
    c660:	00000363 	.word	0x00000363
    c664:	0000038b 	.word	0x0000038b
    c668:	0000ff27 	.word	0x0000ff27
    c66c:	00000115 	.word	0x00000115
    c670:	00000179 	.word	0x00000179
    c674:	00000269 	.word	0x00000269
    c678:	000002cd 	.word	0x000002cd
    c67c:	00000331 	.word	0x00000331
    c680:	0000034f 	.word	0x0000034f
    c684:	00000d7f 	.word	0x00000d7f
    c688:	00000102 	.word	0x00000102
    c68c:	00000166 	.word	0x00000166
    c690:	00000126 	.word	0x00000126
    c694:	000001ca 	.word	0x000001ca
    c698:	0000022e 	.word	0x0000022e
    c69c:	00000265 	.word	0x00000265
    c6a0:	00000283 	.word	0x00000283
    c6a4:	000002ba 	.word	0x000002ba
    c6a8:	000002f6 	.word	0x000002f6
    c6ac:	00000101 	.word	0x00000101
    c6b0:	00000147 	.word	0x00000147
    c6b4:	00000165 	.word	0x00000165
    c6b8:	000001ba 	.word	0x000001ba
    c6bc:	0000021e 	.word	0x0000021e
    c6c0:	00000282 	.word	0x00000282
    c6c4:	000002e6 	.word	0x000002e6
    c6c8:	00009d20 	.word	0x00009d20

0000c6cc <clearScreen>:
    c6cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c6d0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    c6d4:	e3a04000 	mov	r4, #0
    c6d8:	e3a05000 	mov	r5, #0
    c6dc:	e59f00d0 	ldr	r0, [pc, #208]	; c7b4 <waitLoop+0x10>
    c6e0:	e5906014 	ldr	r6, [r0, #20]
    c6e4:	e5907018 	ldr	r7, [r0, #24]
    c6e8:	e3a08000 	mov	r8, #0
    c6ec:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    c6f0:	eb00000c 	bl	c728 <drawRect>
    c6f4:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    c6f8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c6fc:	e1a0f00e 	mov	pc, lr

0000c700 <drawPixel>:
    c700:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c704:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    c708:	e0804501 	add	r4, r0, r1, lsl #10
    c70c:	e1a04084 	lsl	r4, r4, #1
    c710:	e59f00a0 	ldr	r0, [pc, #160]	; c7b8 <waitLoop+0x14>
    c714:	e5900000 	ldr	r0, [r0]
    c718:	e18020b4 	strh	r2, [r0, r4]
    c71c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    c720:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c724:	e1a0f00e 	mov	pc, lr

0000c728 <drawRect>:
    c728:	e1a0000d 	mov	r0, sp
    c72c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c730:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    c734:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    c738:	e0866004 	add	r6, r6, r4
    c73c:	e0877005 	add	r7, r7, r5

0000c740 <drawRectForLoopX>:
    c740:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000c744 <drawRectForLoopY>:
    c744:	e1a00004 	mov	r0, r4
    c748:	e1a01005 	mov	r1, r5
    c74c:	e1a02008 	mov	r2, r8
    c750:	ebffffea 	bl	c700 <drawPixel>
    c754:	e2855001 	add	r5, r5, #1
    c758:	e1550007 	cmp	r5, r7
    c75c:	bafffff8 	blt	c744 <drawRectForLoopY>
    c760:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    c764:	e2844001 	add	r4, r4, #1
    c768:	e1540006 	cmp	r4, r6
    c76c:	bafffff3 	blt	c740 <drawRectForLoopX>
    c770:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    c774:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c778:	e28dd014 	add	sp, sp, #20
    c77c:	e1a0f00e 	mov	pc, lr

0000c780 <positionToArrayOffset>:
    c780:	e8bd0007 	pop	{r0, r1, r2}
    c784:	e0030192 	mul	r3, r2, r1
    c788:	e0833000 	add	r3, r3, r0
    c78c:	e92d0008 	stmfd	sp!, {r3}
    c790:	e1a0f00e 	mov	pc, lr

0000c794 <startTimer>:
    c794:	e1a03000 	mov	r3, r0
    c798:	e59f001c 	ldr	r0, [pc, #28]	; c7bc <waitLoop+0x18>
    c79c:	e5901000 	ldr	r1, [r0]
    c7a0:	e0811003 	add	r1, r1, r3

0000c7a4 <waitLoop>:
    c7a4:	e5902000 	ldr	r2, [r0]
    c7a8:	e1510002 	cmp	r1, r2
    c7ac:	8afffffc 	bhi	c7a4 <waitLoop>
    c7b0:	e1a0f00e 	mov	pc, lr
    c7b4:	00009cb0 	.word	0x00009cb0
    c7b8:	00009d10 	.word	0x00009d10
    c7bc:	3f003004 	.word	0x3f003004
