
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea000aee 	b	abc0 <main>

Disassembly of section .text:

0000a880 <randomNumber>:
    a880:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a884:	e59f1040 	ldr	r1, [pc, #64]	; a8cc <masking+0x14>
    a888:	e5914000 	ldr	r4, [r1]
    a88c:	e5915000 	ldr	r5, [r1]
    a890:	e5916000 	ldr	r6, [r1]
    a894:	e5912000 	ldr	r2, [r1]

0000a898 <top>:
    a898:	e1a07004 	mov	r7, r4
    a89c:	e0277587 	eor	r7, r7, r7, lsl #11
    a8a0:	e0277427 	eor	r7, r7, r7, lsr #8
    a8a4:	e1a04005 	mov	r4, r5
    a8a8:	e1a05006 	mov	r5, r6
    a8ac:	e1a06002 	mov	r6, r2
    a8b0:	e02229a2 	eor	r2, r2, r2, lsr #19
    a8b4:	e0222007 	eor	r2, r2, r7

0000a8b8 <masking>:
    a8b8:	e3e01007 	mvn	r1, #7
    a8bc:	e1c20001 	bic	r0, r2, r1
    a8c0:	e3500007 	cmp	r0, #7
    a8c4:	0afffff3 	beq	a898 <top>
    a8c8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a8cc:	3f003004 	.word	0x3f003004

0000a8d0 <EnableJTAG>:
    a8d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a8d4:	e59f0064 	ldr	r0, [pc, #100]	; a940 <dowaitloop+0xc>
    a8d8:	e0211001 	eor	r1, r1, r1
    a8dc:	e5801000 	str	r1, [r0]
    a8e0:	eb000012 	bl	a930 <dowait>
    a8e4:	e59f0058 	ldr	r0, [pc, #88]	; a944 <dowaitloop+0x10>
    a8e8:	e59f1058 	ldr	r1, [pc, #88]	; a948 <dowaitloop+0x14>
    a8ec:	e5801000 	str	r1, [r0]
    a8f0:	eb00000e 	bl	a930 <dowait>
    a8f4:	e0211001 	eor	r1, r1, r1
    a8f8:	e5801000 	str	r1, [r0]
    a8fc:	e59f0048 	ldr	r0, [pc, #72]	; a94c <dowaitloop+0x18>
    a900:	e5901000 	ldr	r1, [r0]
    a904:	e3c11a07 	bic	r1, r1, #28672	; 0x7000
    a908:	e3811a02 	orr	r1, r1, #8192	; 0x2000
    a90c:	e5801000 	str	r1, [r0]
    a910:	e59f0038 	ldr	r0, [pc, #56]	; a950 <dowaitloop+0x1c>
    a914:	e5901000 	ldr	r1, [r0]
    a918:	e59f2034 	ldr	r2, [pc, #52]	; a954 <dowaitloop+0x20>
    a91c:	e1c11002 	bic	r1, r1, r2
    a920:	e59f2030 	ldr	r2, [pc, #48]	; a958 <dowaitloop+0x24>
    a924:	e1811002 	orr	r1, r1, r2
    a928:	e5801000 	str	r1, [r0]
    a92c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a930 <dowait>:
    a930:	e3a02f4b 	mov	r2, #300	; 0x12c

0000a934 <dowaitloop>:
    a934:	e2522001 	subs	r2, r2, #1
    a938:	1afffffd 	bne	a934 <dowaitloop>
    a93c:	e12fff1e 	bx	lr
    a940:	3f200094 	.word	0x3f200094
    a944:	3f200098 	.word	0x3f200098
    a948:	0bc00010 	.word	0x0bc00010
    a94c:	3f200000 	.word	0x3f200000
    a950:	3f200008 	.word	0x3f200008
    a954:	00e3ffc0 	.word	0x00e3ffc0
    a958:	0061b6c0 	.word	0x0061b6c0

0000a95c <InitFrameBuffer>:
    a95c:	e59f2068 	ldr	r2, [pc, #104]	; a9cc <pointerWaitLoop$+0x1c>
    a960:	e59f3068 	ldr	r3, [pc, #104]	; a9d0 <pointerWaitLoop$+0x20>

0000a964 <mBoxFullLoop$>:
    a964:	e5920018 	ldr	r0, [r2, #24]
    a968:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    a96c:	1afffffc 	bne	a964 <mBoxFullLoop$>
    a970:	e2830101 	add	r0, r3, #1073741824	; 0x40000000
    a974:	e3800008 	orr	r0, r0, #8
    a978:	e5820020 	str	r0, [r2, #32]

0000a97c <mBoxEmptyLoop$>:
    a97c:	e5920018 	ldr	r0, [r2, #24]
    a980:	e3100101 	tst	r0, #1073741824	; 0x40000000
    a984:	1afffffc 	bne	a97c <mBoxEmptyLoop$>
    a988:	e5920000 	ldr	r0, [r2]
    a98c:	e200100f 	and	r1, r0, #15
    a990:	e3310008 	teq	r1, #8
    a994:	1afffff8 	bne	a97c <mBoxEmptyLoop$>
    a998:	e59f0030 	ldr	r0, [pc, #48]	; a9d0 <pointerWaitLoop$+0x20>
    a99c:	e5901004 	ldr	r1, [r0, #4]
    a9a0:	e3310102 	teq	r1, #-2147483648	; 0x80000000
    a9a4:	0a000001 	beq	a9b0 <pointerWaitLoop$>
    a9a8:	13a00000 	movne	r0, #0
    a9ac:	112fff1e 	bxne	lr

0000a9b0 <pointerWaitLoop$>:
    a9b0:	e59f001c 	ldr	r0, [pc, #28]	; a9d4 <pointerWaitLoop$+0x24>
    a9b4:	e5900000 	ldr	r0, [r0]
    a9b8:	e3300000 	teq	r0, #0
    a9bc:	0afffffb 	beq	a9b0 <pointerWaitLoop$>
    a9c0:	e59f3010 	ldr	r3, [pc, #16]	; a9d8 <pointerWaitLoop$+0x28>
    a9c4:	e5830000 	str	r0, [r3]
    a9c8:	e12fff1e 	bx	lr
    a9cc:	3f00b880 	.word	0x3f00b880
    a9d0:	00009080 	.word	0x00009080
    a9d4:	000090cc 	.word	0x000090cc
    a9d8:	000090e0 	.word	0x000090e0

0000a9dc <sampleSNES>:
    a9dc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}

0000a9e0 <initSNES>:
    a9e0:	e3a00001 	mov	r0, #1
    a9e4:	eb000048 	bl	ab0c <setCLOCKFunction>
    a9e8:	e3a00001 	mov	r0, #1
    a9ec:	eb00003d 	bl	aae8 <setLATCHFunction>
    a9f0:	e3a00000 	mov	r0, #0
    a9f4:	eb000034 	bl	aacc <setDATAFunction>

0000a9f8 <startSamplingSNESButtons>:
    a9f8:	e3a0000b 	mov	r0, #11
    a9fc:	e3a01001 	mov	r1, #1
    aa00:	eb000056 	bl	ab60 <writeGPIO>
    aa04:	e3a00009 	mov	r0, #9
    aa08:	e3a01001 	mov	r1, #1
    aa0c:	eb000053 	bl	ab60 <writeGPIO>
    aa10:	e3a0000c 	mov	r0, #12
    aa14:	eb000019 	bl	aa80 <startTimer>
    aa18:	e3a00009 	mov	r0, #9
    aa1c:	e3a01000 	mov	r1, #0
    aa20:	eb00004e 	bl	ab60 <writeGPIO>
    aa24:	e3a08000 	mov	r8, #0
    aa28:	e3a07000 	mov	r7, #0

0000aa2c <pulseLoop>:
    aa2c:	e3a00006 	mov	r0, #6
    aa30:	eb000012 	bl	aa80 <startTimer>
    aa34:	e3a0000b 	mov	r0, #11
    aa38:	e3a01000 	mov	r1, #0
    aa3c:	eb000047 	bl	ab60 <writeGPIO>
    aa40:	e3a00006 	mov	r0, #6
    aa44:	eb00000d 	bl	aa80 <startTimer>
    aa48:	e3a0000a 	mov	r0, #10
    aa4c:	e3a01000 	mov	r1, #0
    aa50:	eb000036 	bl	ab30 <readGPIO>
    aa54:	e1a00710 	lsl	r0, r0, r7
    aa58:	e1888000 	orr	r8, r8, r0
    aa5c:	e3a0000b 	mov	r0, #11
    aa60:	e3a01001 	mov	r1, #1
    aa64:	eb00003d 	bl	ab60 <writeGPIO>
    aa68:	e2877001 	add	r7, r7, #1
    aa6c:	e3570010 	cmp	r7, #16
    aa70:	baffffed 	blt	aa2c <pulseLoop>

0000aa74 <pulseLoopEnd>:
    aa74:	e1a00008 	mov	r0, r8

0000aa78 <mainEnd>:
    aa78:	eaffffff 	b	aa7c <killProgram>

0000aa7c <killProgram>:
    aa7c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000aa80 <startTimer>:
    aa80:	e1a03000 	mov	r3, r0
    aa84:	e59f0128 	ldr	r0, [pc, #296]	; abb4 <newButtonPress+0x14>
    aa88:	e5901000 	ldr	r1, [r0]
    aa8c:	e0811003 	add	r1, r1, r3

0000aa90 <waitLoop>:
    aa90:	e5902000 	ldr	r2, [r0]
    aa94:	e1510002 	cmp	r1, r2
    aa98:	8afffffc 	bhi	aa90 <waitLoop>
    aa9c:	e1a0f00e 	mov	pc, lr

0000aaa0 <setGPIOFunction>:
    aaa0:	e59f3110 	ldr	r3, [pc, #272]	; abb8 <newButtonPress+0x18>
    aaa4:	e3a04004 	mov	r4, #4
    aaa8:	e0000094 	mul	r0, r4, r0
    aaac:	e7934000 	ldr	r4, [r3, r0]
    aab0:	e3a05007 	mov	r5, #7
    aab4:	e1a05215 	lsl	r5, r5, r2
    aab8:	e1c33005 	bic	r3, r3, r5
    aabc:	e1a01211 	lsl	r1, r1, r2
    aac0:	e1844001 	orr	r4, r4, r1
    aac4:	e7834000 	str	r4, [r3, r0]
    aac8:	e1a0f00e 	mov	pc, lr

0000aacc <setDATAFunction>:
    aacc:	e59f10e4 	ldr	r1, [pc, #228]	; abb8 <newButtonPress+0x18>
    aad0:	e5912004 	ldr	r2, [r1, #4]
    aad4:	e3a03007 	mov	r3, #7
    aad8:	e1c22003 	bic	r2, r2, r3
    aadc:	e1822000 	orr	r2, r2, r0
    aae0:	e5812004 	str	r2, [r1, #4]
    aae4:	e1a0f00e 	mov	pc, lr

0000aae8 <setLATCHFunction>:
    aae8:	e59f10c8 	ldr	r1, [pc, #200]	; abb8 <newButtonPress+0x18>
    aaec:	e5912000 	ldr	r2, [r1]
    aaf0:	e3a03007 	mov	r3, #7
    aaf4:	e1a03d83 	lsl	r3, r3, #27
    aaf8:	e1c22003 	bic	r2, r2, r3
    aafc:	e1a00d80 	lsl	r0, r0, #27
    ab00:	e1822000 	orr	r2, r2, r0
    ab04:	e5812000 	str	r2, [r1]
    ab08:	e1a0f00e 	mov	pc, lr

0000ab0c <setCLOCKFunction>:
    ab0c:	e59f10a4 	ldr	r1, [pc, #164]	; abb8 <newButtonPress+0x18>
    ab10:	e5912004 	ldr	r2, [r1, #4]
    ab14:	e3a03007 	mov	r3, #7
    ab18:	e1a03183 	lsl	r3, r3, #3
    ab1c:	e1c22003 	bic	r2, r2, r3
    ab20:	e1a00180 	lsl	r0, r0, #3
    ab24:	e1822000 	orr	r2, r2, r0
    ab28:	e5812004 	str	r2, [r1, #4]
    ab2c:	e1a0f00e 	mov	pc, lr

0000ab30 <readGPIO>:
    ab30:	e59f1080 	ldr	r1, [pc, #128]	; abb8 <newButtonPress+0x18>
    ab34:	e3500020 	cmp	r0, #32
    ab38:	b5912034 	ldrlt	r2, [r1, #52]	; 0x34
    ab3c:	a5912038 	ldrge	r2, [r1, #56]	; 0x38
    ab40:	a2400020 	subge	r0, r0, #32
    ab44:	e3a03001 	mov	r3, #1
    ab48:	e1a03013 	lsl	r3, r3, r0
    ab4c:	e0022003 	and	r2, r2, r3
    ab50:	e3320000 	teq	r2, #0
    ab54:	03a00000 	moveq	r0, #0
    ab58:	13a00001 	movne	r0, #1
    ab5c:	e1a0f00e 	mov	pc, lr

0000ab60 <writeGPIO>:
    ab60:	e3310000 	teq	r1, #0
    ab64:	e59f104c 	ldr	r1, [pc, #76]	; abb8 <newButtonPress+0x18>
    ab68:	1281201c 	addne	r2, r1, #28
    ab6c:	02812028 	addeq	r2, r1, #40	; 0x28
    ab70:	e3500020 	cmp	r0, #32
    ab74:	a2400020 	subge	r0, r0, #32
    ab78:	e3a01001 	mov	r1, #1
    ab7c:	e1a01011 	lsl	r1, r1, r0
    ab80:	b5821000 	strlt	r1, [r2]
    ab84:	a5821004 	strge	r1, [r2, #4]
    ab88:	e1a0f00e 	mov	pc, lr

0000ab8c <areAnySNESButtonsPressed>:
    ab8c:	e59f1028 	ldr	r1, [pc, #40]	; abbc <newButtonPress+0x1c>
    ab90:	e0411000 	sub	r1, r1, r0
    ab94:	e1500009 	cmp	r0, r9
    ab98:	1a000000 	bne	aba0 <newButtonPress>
    ab9c:	e3a01000 	mov	r1, #0

0000aba0 <newButtonPress>:
    aba0:	e3310000 	teq	r1, #0
    aba4:	03a01000 	moveq	r1, #0
    aba8:	13a01001 	movne	r1, #1
    abac:	e1a09000 	mov	r9, r0
    abb0:	e1a0f00e 	mov	pc, lr
    abb4:	3f003004 	.word	0x3f003004
    abb8:	3f200000 	.word	0x3f200000
    abbc:	0000ffff 	.word	0x0000ffff

0000abc0 <main>:
    abc0:	e3a0d902 	mov	sp, #32768	; 0x8000
    abc4:	ebffff41 	bl	a8d0 <EnableJTAG>
    abc8:	ebffff63 	bl	a95c <InitFrameBuffer>
    abcc:	ea000027 	b	ac70 <StartGame>

0000abd0 <MainMenu>:
    abd0:	eb000190 	bl	b218 <ClearScreenBlack>
    abd4:	eb00043e 	bl	bcd4 <drawMainMenu>
    abd8:	e3a09000 	mov	r9, #0

0000abdc <MainMenuPrompt>:
    abdc:	e59f0f6c 	ldr	r0, [pc, #3948]	; bb50 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x70>
    abe0:	eb0007d8 	bl	cb48 <startTimer>
    abe4:	ebffff7c 	bl	a9dc <sampleSNES>
    abe8:	e1a0a000 	mov	sl, r0
    abec:	e3e01c01 	mvn	r1, #256	; 0x100
    abf0:	e1c00001 	bic	r0, r0, r1
    abf4:	e3500000 	cmp	r0, #0
    abf8:	0a00000a 	beq	ac28 <MainMenuAPressed>
    abfc:	e1a0000a 	mov	r0, sl
    ac00:	e3e01010 	mvn	r1, #16
    ac04:	e1c00001 	bic	r0, r0, r1
    ac08:	e3500000 	cmp	r0, #0
    ac0c:	0a000009 	beq	ac38 <MainMenuUpPressed>
    ac10:	e1a0000a 	mov	r0, sl
    ac14:	e3e01020 	mvn	r1, #32
    ac18:	e1c00001 	bic	r0, r0, r1
    ac1c:	e3500000 	cmp	r0, #0
    ac20:	0a00000b 	beq	ac54 <MainMenuDownPressed>
    ac24:	eaffffec 	b	abdc <MainMenuPrompt>

0000ac28 <MainMenuAPressed>:
    ac28:	e3590000 	cmp	r9, #0
    ac2c:	0a00000f 	beq	ac70 <StartGame>
    ac30:	eb000178 	bl	b218 <ClearScreenBlack>
    ac34:	ea000065 	b	add0 <mainEnd>

0000ac38 <MainMenuUpPressed>:
    ac38:	e3590000 	cmp	r9, #0
    ac3c:	0affffe6 	beq	abdc <MainMenuPrompt>
    ac40:	e3a09000 	mov	r9, #0
    ac44:	eb000485 	bl	be60 <setMainMenuIndicatorStart>
    ac48:	e3a00801 	mov	r0, #65536	; 0x10000
    ac4c:	eb0007bd 	bl	cb48 <startTimer>
    ac50:	eaffffe1 	b	abdc <MainMenuPrompt>

0000ac54 <MainMenuDownPressed>:
    ac54:	e3590001 	cmp	r9, #1
    ac58:	0affffdf 	beq	abdc <MainMenuPrompt>
    ac5c:	e3a09001 	mov	r9, #1
    ac60:	eb00048e 	bl	bea0 <setMainMenuIndicatorQuit>
    ac64:	e3a00801 	mov	r0, #65536	; 0x10000
    ac68:	eb0007b6 	bl	cb48 <startTimer>
    ac6c:	eaffffda 	b	abdc <MainMenuPrompt>

0000ac70 <StartGame>:
    ac70:	e3a01000 	mov	r1, #0
    ac74:	e59f0ed8 	ldr	r0, [pc, #3800]	; bb54 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x74>
    ac78:	e5801000 	str	r1, [r0]
    ac7c:	e59f0ed4 	ldr	r0, [pc, #3796]	; bb58 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x78>
    ac80:	e5801000 	str	r1, [r0]
    ac84:	e59f0ed0 	ldr	r0, [pc, #3792]	; bb5c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x7c>
    ac88:	e5801000 	str	r1, [r0]
    ac8c:	eb00016e 	bl	b24c <tetrisInitGrid>
    ac90:	eb000160 	bl	b218 <ClearScreenBlack>
    ac94:	eb0000d9 	bl	b000 <DrawBoard>
    ac98:	eb000219 	bl	b504 <tetrisCreateNewBlock>

0000ac9c <newBlock>:
    ac9c:	e59f0eb0 	ldr	r0, [pc, #3760]	; bb54 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x74>
    aca0:	e5901000 	ldr	r1, [r0]
    aca4:	e2811001 	add	r1, r1, #1
    aca8:	e5801000 	str	r1, [r0]
    acac:	eb00011c 	bl	b124 <UpdateScore>

0000acb0 <dropLoop>:
    acb0:	e59f0ea8 	ldr	r0, [pc, #3752]	; bb60 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x80>
    acb4:	e590a000 	ldr	sl, [r0]
    acb8:	e59f0ea4 	ldr	r0, [pc, #3748]	; bb64 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x84>
    acbc:	e08aa000 	add	sl, sl, r0

0000acc0 <rotateLoop>:
    acc0:	ebffff45 	bl	a9dc <sampleSNES>
    acc4:	e1a05000 	mov	r5, r0
    acc8:	e3e01008 	mvn	r1, #8
    accc:	e1c00001 	bic	r0, r0, r1
    acd0:	e3500000 	cmp	r0, #0
    acd4:	0a000014 	beq	ad2c <mainLoopStartPressed>
    acd8:	e1a00005 	mov	r0, r5
    acdc:	e3e01b01 	mvn	r1, #1024	; 0x400
    ace0:	e1c00001 	bic	r0, r0, r1
    ace4:	e3500000 	cmp	r0, #0
    ace8:	0a000011 	beq	ad34 <mainLoopLTPressed>
    acec:	e1a00005 	mov	r0, r5
    acf0:	e3e01b02 	mvn	r1, #2048	; 0x800
    acf4:	e1c00001 	bic	r0, r0, r1
    acf8:	e3500000 	cmp	r0, #0
    acfc:	0a000011 	beq	ad48 <mainLoopRTPressed>
    ad00:	e1a00005 	mov	r0, r5
    ad04:	e3e01040 	mvn	r1, #64	; 0x40
    ad08:	e1c00001 	bic	r0, r0, r1
    ad0c:	e3500000 	cmp	r0, #0
    ad10:	0a000011 	beq	ad5c <mainLoopLeftPressed>
    ad14:	e1a00005 	mov	r0, r5
    ad18:	e3e01080 	mvn	r1, #128	; 0x80
    ad1c:	e1c00001 	bic	r0, r0, r1
    ad20:	e3500000 	cmp	r0, #0
    ad24:	0a000012 	beq	ad74 <mainLoopRightPressed>
    ad28:	ea000017 	b	ad8c <userTranslationsDone>

0000ad2c <mainLoopStartPressed>:
    ad2c:	eb00007d 	bl	af28 <PauseMenuStart>
    ad30:	ea000015 	b	ad8c <userTranslationsDone>

0000ad34 <mainLoopLTPressed>:
    ad34:	e3a00000 	mov	r0, #0
    ad38:	eb0002f1 	bl	b904 <tetrisRotateBlock>
    ad3c:	eb000180 	bl	b344 <tetrisDrawGrid>
    ad40:	eb000282 	bl	b750 <tetrisDrawBlock>
    ad44:	ea000010 	b	ad8c <userTranslationsDone>

0000ad48 <mainLoopRTPressed>:
    ad48:	e3a00001 	mov	r0, #1
    ad4c:	eb0002ec 	bl	b904 <tetrisRotateBlock>
    ad50:	eb00017b 	bl	b344 <tetrisDrawGrid>
    ad54:	eb00027d 	bl	b750 <tetrisDrawBlock>
    ad58:	ea00000b 	b	ad8c <userTranslationsDone>

0000ad5c <mainLoopLeftPressed>:
    ad5c:	e3e00000 	mvn	r0, #0
    ad60:	e3a01000 	mov	r1, #0
    ad64:	eb00030a 	bl	b994 <tetrisTranslateBlock>
    ad68:	eb000175 	bl	b344 <tetrisDrawGrid>
    ad6c:	eb000277 	bl	b750 <tetrisDrawBlock>
    ad70:	ea000005 	b	ad8c <userTranslationsDone>

0000ad74 <mainLoopRightPressed>:
    ad74:	e3a00001 	mov	r0, #1
    ad78:	e3a01000 	mov	r1, #0
    ad7c:	eb000304 	bl	b994 <tetrisTranslateBlock>
    ad80:	eb00016f 	bl	b344 <tetrisDrawGrid>
    ad84:	eb000271 	bl	b750 <tetrisDrawBlock>
    ad88:	eaffffff 	b	ad8c <userTranslationsDone>

0000ad8c <userTranslationsDone>:
    ad8c:	e59f0dcc 	ldr	r0, [pc, #3532]	; bb60 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x80>
    ad90:	e5901000 	ldr	r1, [r0]
    ad94:	e151000a 	cmp	r1, sl
    ad98:	baffffc8 	blt	acc0 <rotateLoop>
    ad9c:	e3a00000 	mov	r0, #0
    ada0:	e3a01001 	mov	r1, #1
    ada4:	eb0002fa 	bl	b994 <tetrisTranslateBlock>
    ada8:	eb000036 	bl	ae88 <tetrisGridClearCompleteRows>
    adac:	eb000164 	bl	b344 <tetrisDrawGrid>
    adb0:	eb000266 	bl	b750 <tetrisDrawBlock>
    adb4:	e59f0da0 	ldr	r0, [pc, #3488]	; bb5c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x7c>
    adb8:	e5900000 	ldr	r0, [r0]
    adbc:	e3300000 	teq	r0, #0
    adc0:	0affffba 	beq	acb0 <dropLoop>
    adc4:	eb0004f6 	bl	c1a4 <drawLossScreen>
    adc8:	ea00010b 	b	b1fc <gameOver>
    adcc:	eaffffb7 	b	acb0 <dropLoop>

0000add0 <mainEnd>:
    add0:	eafffffe 	b	add0 <mainEnd>

0000add4 <tetrisGridIsRowComplete>:
    add4:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    add8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    addc:	e92d00f0 	push	{r4, r5, r6, r7}
    ade0:	e59f4d80 	ldr	r4, [pc, #3456]	; bb68 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x88>
    ade4:	e89400e0 	ldm	r4, {r5, r6, r7}
    ade8:	e59f8d7c 	ldr	r8, [pc, #3452]	; bb6c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x8c>
    adec:	e3a00000 	mov	r0, #0
    adf0:	e3a03001 	mov	r3, #1
    adf4:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

0000adf8 <tetrisGridIsRowComplete_for_x_lt_cols_loop>:
    adf8:	e92d0003 	push	{r0, r1}
    adfc:	e92d0003 	push	{r0, r1}
    ae00:	eb000130 	bl	b2c8 <tetrisGetGridBlockColor>
    ae04:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)
    ae08:	e3330000 	teq	r3, #0
    ae0c:	e8bd0003 	pop	{r0, r1}
    ae10:	049d3004 	popeq	{r3}		; (ldreq r3, [sp], #4)
    ae14:	03a03000 	moveq	r3, #0
    ae18:	052d3004 	pusheq	{r3}		; (streq r3, [sp, #-4]!)
    ae1c:	0a000002 	beq	ae2c <tetrisGridIsRowCompleteEnd>
    ae20:	e2800001 	add	r0, r0, #1
    ae24:	e1500005 	cmp	r0, r5
    ae28:	bafffff2 	blt	adf8 <tetrisGridIsRowComplete_for_x_lt_cols_loop>

0000ae2c <tetrisGridIsRowCompleteEnd>:
    ae2c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    ae30:	e8bd00f0 	pop	{r4, r5, r6, r7}
    ae34:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ae38:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ae3c:	e1a0f00e 	mov	pc, lr

0000ae40 <tetrisGridClearRow>:
    ae40:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    ae44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ae48:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    ae4c:	e92d0070 	push	{r4, r5, r6}
    ae50:	e59f4d10 	ldr	r4, [pc, #3344]	; bb68 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x88>
    ae54:	e8940060 	ldm	r4, {r5, r6}
    ae58:	e3a00000 	mov	r0, #0

0000ae5c <tetrisGridClearRow_for_x_lt_cols_loop>:
    ae5c:	e92d0003 	push	{r0, r1}
    ae60:	e92d0003 	push	{r0, r1}
    ae64:	eb000130 	bl	b32c <tetrisClearGridBlock>
    ae68:	e8bd0003 	pop	{r0, r1}
    ae6c:	0a000002 	beq	ae7c <tetrisGridClearRowEnd>
    ae70:	e2800001 	add	r0, r0, #1
    ae74:	e1500005 	cmp	r0, r5
    ae78:	bafffff7 	blt	ae5c <tetrisGridClearRow_for_x_lt_cols_loop>

0000ae7c <tetrisGridClearRowEnd>:
    ae7c:	e8bd0070 	pop	{r4, r5, r6}
    ae80:	eb000167 	bl	b424 <tetrisUpdateGrid>
    ae84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ae88 <tetrisGridClearCompleteRows>:
    ae88:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ae8c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    ae90:	e59f5cd0 	ldr	r5, [pc, #3280]	; bb68 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x88>
    ae94:	e89501c0 	ldm	r5, {r6, r7, r8}
    ae98:	e59f9ccc 	ldr	r9, [pc, #3276]	; bb6c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x8c>
    ae9c:	e1a04007 	mov	r4, r7
    aea0:	e2444001 	sub	r4, r4, #1
    aea4:	e3a0a000 	mov	sl, #0

0000aea8 <tetrisGridClearCompleteRows_for_curRow_ge_0_loop>:
    aea8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    aeac:	ebffffc8 	bl	add4 <tetrisGridIsRowComplete>
    aeb0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    aeb4:	e3300000 	teq	r0, #0
    aeb8:	0a000004 	beq	aed0 <tetrisGridClearCompleteRowsRowIsNotComplete>
    aebc:	1affffff 	bne	aec0 <tetrisGridClearCompleteRowsRowIsComplete>

0000aec0 <tetrisGridClearCompleteRowsRowIsComplete>:
    aec0:	e28aa001 	add	sl, sl, #1
    aec4:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    aec8:	e2844001 	add	r4, r4, #1
    aecc:	ebffffdb 	bl	ae40 <tetrisGridClearRow>

0000aed0 <tetrisGridClearCompleteRowsRowIsNotComplete>:
    aed0:	e2444001 	sub	r4, r4, #1
    aed4:	e3540000 	cmp	r4, #0
    aed8:	aafffff2 	bge	aea8 <tetrisGridClearCompleteRows_for_curRow_ge_0_loop>
    aedc:	e1a0000a 	mov	r0, sl
    aee0:	e33a0000 	teq	sl, #0
    aee4:	0a00000c 	beq	af1c <tetrisGridClearCompleteRowsEnd>
    aee8:	e33a0001 	teq	sl, #1
    aeec:	03a0200a 	moveq	r2, #10
    aef0:	e33a0002 	teq	sl, #2
    aef4:	03a02019 	moveq	r2, #25
    aef8:	e33a0003 	teq	sl, #3
    aefc:	03a0202d 	moveq	r2, #45	; 0x2d
    af00:	e33a0004 	teq	sl, #4
    af04:	03a02046 	moveq	r2, #70	; 0x46
    af08:	e59f0c44 	ldr	r0, [pc, #3140]	; bb54 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x74>
    af0c:	e5901000 	ldr	r1, [r0]
    af10:	e0811002 	add	r1, r1, r2
    af14:	e5801000 	str	r1, [r0]
    af18:	eb000081 	bl	b124 <UpdateScore>

0000af1c <tetrisGridClearCompleteRowsEnd>:
    af1c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    af20:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    af24:	e1a0f00e 	mov	pc, lr

0000af28 <PauseMenuStart>:
    af28:	e92d4610 	push	{r4, r9, sl, lr}
    af2c:	eb000331 	bl	bbf8 <drawPauseMenu>
    af30:	e3a09000 	mov	r9, #0

0000af34 <PauseMenuPrompt>:
    af34:	e59f0c14 	ldr	r0, [pc, #3092]	; bb50 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x70>
    af38:	eb000702 	bl	cb48 <startTimer>
    af3c:	ebfffea6 	bl	a9dc <sampleSNES>
    af40:	e1a0a000 	mov	sl, r0
    af44:	e3e01008 	mvn	r1, #8
    af48:	e1c00001 	bic	r0, r0, r1
    af4c:	e3500000 	cmp	r0, #0
    af50:	0a00000f 	beq	af94 <PauseMenuStartPressed>
    af54:	e1a0000a 	mov	r0, sl
    af58:	e3e01c01 	mvn	r1, #256	; 0x100
    af5c:	e1c00001 	bic	r0, r0, r1
    af60:	e3500000 	cmp	r0, #0
    af64:	0a000013 	beq	afb8 <PauseMenuAPressed>
    af68:	e1a0000a 	mov	r0, sl
    af6c:	e3e01010 	mvn	r1, #16
    af70:	e1c00001 	bic	r0, r0, r1
    af74:	e3500000 	cmp	r0, #0
    af78:	0a000011 	beq	afc4 <PauseMenuUpPressed>
    af7c:	e1a0000a 	mov	r0, sl
    af80:	e3e01020 	mvn	r1, #32
    af84:	e1c00001 	bic	r0, r0, r1
    af88:	e3500000 	cmp	r0, #0
    af8c:	0a000013 	beq	afe0 <PauseMenuDownPressed>
    af90:	eaffffe7 	b	af34 <PauseMenuPrompt>

0000af94 <PauseMenuStartPressed>:
    af94:	e3a04000 	mov	r4, #0
    af98:	e3a03f9a 	mov	r3, #616	; 0x268
    af9c:	e3a02fa2 	mov	r2, #648	; 0x288
    afa0:	e3a0104c 	mov	r1, #76	; 0x4c
    afa4:	e3a000bc 	mov	r0, #188	; 0xbc
    afa8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    afac:	eb0006ca 	bl	cadc <drawRect>
    afb0:	eb000012 	bl	b000 <DrawBoard>
    afb4:	e8bd8610 	pop	{r4, r9, sl, pc}

0000afb8 <PauseMenuAPressed>:
    afb8:	e3590000 	cmp	r9, #0
    afbc:	0affff2b 	beq	ac70 <StartGame>
    afc0:	eaffff02 	b	abd0 <MainMenu>

0000afc4 <PauseMenuUpPressed>:
    afc4:	e3590000 	cmp	r9, #0
    afc8:	0affffd9 	beq	af34 <PauseMenuPrompt>
    afcc:	e3a09000 	mov	r9, #0
    afd0:	eb000382 	bl	bde0 <setPauseMenuIndicatorRestart>
    afd4:	e3a00801 	mov	r0, #65536	; 0x10000
    afd8:	eb0006da 	bl	cb48 <startTimer>
    afdc:	eaffffd4 	b	af34 <PauseMenuPrompt>

0000afe0 <PauseMenuDownPressed>:
    afe0:	e3590001 	cmp	r9, #1
    afe4:	0affffd2 	beq	af34 <PauseMenuPrompt>
    afe8:	e3a09001 	mov	r9, #1
    afec:	eb00038b 	bl	be20 <setPauseMenuIndicatorQuit>
    aff0:	e3a00801 	mov	r0, #65536	; 0x10000
    aff4:	eb0006d3 	bl	cb48 <startTimer>
    aff8:	eaffffcd 	b	af34 <PauseMenuPrompt>
    affc:	e8bd8610 	pop	{r4, r9, sl, pc}

0000b000 <DrawBoard>:
    b000:	e92d4010 	push	{r4, lr}
    b004:	e3a04a0e 	mov	r4, #57344	; 0xe000
    b008:	e3a03004 	mov	r3, #4
    b00c:	e3a02fa2 	mov	r2, #648	; 0x288
    b010:	e3a0104c 	mov	r1, #76	; 0x4c
    b014:	e3a000bc 	mov	r0, #188	; 0xbc
    b018:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b01c:	eb0006ae 	bl	cadc <drawRect>
    b020:	e3a04a0e 	mov	r4, #57344	; 0xe000
    b024:	e3a03004 	mov	r3, #4
    b028:	e3a02fa2 	mov	r2, #648	; 0x288
    b02c:	e3a01e2b 	mov	r1, #688	; 0x2b0
    b030:	e3a000bc 	mov	r0, #188	; 0xbc
    b034:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b038:	eb0006a7 	bl	cadc <drawRect>
    b03c:	e3a04a0e 	mov	r4, #57344	; 0xe000
    b040:	e3a03e26 	mov	r3, #608	; 0x260
    b044:	e3a02004 	mov	r2, #4
    b048:	e3a01050 	mov	r1, #80	; 0x50
    b04c:	e3a000bc 	mov	r0, #188	; 0xbc
    b050:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b054:	eb0006a0 	bl	cadc <drawRect>
    b058:	e3a04a0e 	mov	r4, #57344	; 0xe000
    b05c:	e3a03e26 	mov	r3, #608	; 0x260
    b060:	e3a02004 	mov	r2, #4
    b064:	e3a01050 	mov	r1, #80	; 0x50
    b068:	e3a00c02 	mov	r0, #512	; 0x200
    b06c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b070:	eb000699 	bl	cadc <drawRect>
    b074:	e3a04a0e 	mov	r4, #57344	; 0xe000
    b078:	e3a03e26 	mov	r3, #608	; 0x260
    b07c:	e3a02004 	mov	r2, #4
    b080:	e3a01050 	mov	r1, #80	; 0x50
    b084:	e3a00d0d 	mov	r0, #832	; 0x340
    b088:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b08c:	eb000692 	bl	cadc <drawRect>
    b090:	e59f0ad8 	ldr	r0, [pc, #2776]	; bb70 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x90>
    b094:	e59f1ad8 	ldr	r1, [pc, #2776]	; bb74 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x94>
    b098:	e59f2ad8 	ldr	r2, [pc, #2776]	; bb78 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x98>
    b09c:	e3a030e6 	mov	r3, #230	; 0xe6
    b0a0:	eb00033d 	bl	bd9c <WriteSentence>
    b0a4:	e59f4ac8 	ldr	r4, [pc, #2760]	; bb74 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x94>
    b0a8:	e3a03036 	mov	r3, #54	; 0x36
    b0ac:	e3a02036 	mov	r2, #54	; 0x36
    b0b0:	e3a010d3 	mov	r1, #211	; 0xd3
    b0b4:	e59f0ac0 	ldr	r0, [pc, #2752]	; bb7c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x9c>
    b0b8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b0bc:	eb000686 	bl	cadc <drawRect>
    b0c0:	e59f4ab8 	ldr	r4, [pc, #2744]	; bb80 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xa0>
    b0c4:	e3a03032 	mov	r3, #50	; 0x32
    b0c8:	e3a02032 	mov	r2, #50	; 0x32
    b0cc:	e3a010d5 	mov	r1, #213	; 0xd5
    b0d0:	e59f0aac 	ldr	r0, [pc, #2732]	; bb84 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xa4>
    b0d4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b0d8:	eb00067f 	bl	cadc <drawRect>
    b0dc:	e59f0aa4 	ldr	r0, [pc, #2724]	; bb88 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xa8>
    b0e0:	e59f1aa4 	ldr	r1, [pc, #2724]	; bb8c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xac>
    b0e4:	e59f2aa4 	ldr	r2, [pc, #2724]	; bb90 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb0>
    b0e8:	e59f3aa4 	ldr	r3, [pc, #2724]	; bb94 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb4>
    b0ec:	eb00032a 	bl	bd9c <WriteSentence>
    b0f0:	e59f4a94 	ldr	r4, [pc, #2708]	; bb8c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xac>
    b0f4:	e3a03088 	mov	r3, #136	; 0x88
    b0f8:	e3a02088 	mov	r2, #136	; 0x88
    b0fc:	e3a01e21 	mov	r1, #528	; 0x210
    b100:	e3a00fa1 	mov	r0, #644	; 0x284
    b104:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b108:	eb000673 	bl	cadc <drawRect>
    b10c:	ebfffddb 	bl	a880 <randomNumber>
    b110:	e59f1a80 	ldr	r1, [pc, #2688]	; bb98 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb8>
    b114:	e5810000 	str	r0, [r1]
    b118:	eb000118 	bl	b580 <drawQueue>
    b11c:	eb000000 	bl	b124 <UpdateScore>
    b120:	e8bd8010 	pop	{r4, pc}

0000b124 <UpdateScore>:
    b124:	e92d4010 	push	{r4, lr}
    b128:	e59f4a50 	ldr	r4, [pc, #2640]	; bb80 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xa0>
    b12c:	e3a03014 	mov	r3, #20
    b130:	e3a02018 	mov	r2, #24
    b134:	e3a010e4 	mov	r1, #228	; 0xe4
    b138:	e59f0a5c 	ldr	r0, [pc, #2652]	; bb9c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xbc>
    b13c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b140:	eb000665 	bl	cadc <drawRect>
    b144:	e59f0a08 	ldr	r0, [pc, #2568]	; bb54 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x74>
    b148:	e5901000 	ldr	r1, [r0]
    b14c:	e3510063 	cmp	r1, #99	; 0x63
    b150:	ca000011 	bgt	b19c <threeDigitScore>
    b154:	e3510009 	cmp	r1, #9
    b158:	ca000003 	bgt	b16c <twoDigitScore>

0000b15c <oneDigitScore>:
    b15c:	e59f0a3c 	ldr	r0, [pc, #2620]	; bba0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xc0>
    b160:	e2811030 	add	r1, r1, #48	; 0x30
    b164:	e5c01006 	strb	r1, [r0, #6]
    b168:	ea000010 	b	b1b0 <PrintScore>

0000b16c <twoDigitScore>:
    b16c:	e59f0a2c 	ldr	r0, [pc, #2604]	; bba0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xc0>
    b170:	e3a02000 	mov	r2, #0

0000b174 <twoDigitScoreLoop>:
    b174:	e351000a 	cmp	r1, #10
    b178:	ba000002 	blt	b188 <twoDigitScoreLoopDone>
    b17c:	e241100a 	sub	r1, r1, #10
    b180:	e2822001 	add	r2, r2, #1
    b184:	eafffffa 	b	b174 <twoDigitScoreLoop>

0000b188 <twoDigitScoreLoopDone>:
    b188:	e2811030 	add	r1, r1, #48	; 0x30
    b18c:	e2822030 	add	r2, r2, #48	; 0x30
    b190:	e5c02005 	strb	r2, [r0, #5]
    b194:	e5c01006 	strb	r1, [r0, #6]
    b198:	ea000004 	b	b1b0 <PrintScore>

0000b19c <threeDigitScore>:
    b19c:	e2411064 	sub	r1, r1, #100	; 0x64
    b1a0:	e59f09f8 	ldr	r0, [pc, #2552]	; bba0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xc0>
    b1a4:	e3a02031 	mov	r2, #49	; 0x31
    b1a8:	e5c02004 	strb	r2, [r0, #4]
    b1ac:	eaffffee 	b	b16c <twoDigitScore>

0000b1b0 <PrintScore>:
    b1b0:	e59f09e8 	ldr	r0, [pc, #2536]	; bba0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xc0>
    b1b4:	e3a01000 	mov	r1, #0
    b1b8:	e59f29dc 	ldr	r2, [pc, #2524]	; bb9c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xbc>
    b1bc:	e3a030e6 	mov	r3, #230	; 0xe6
    b1c0:	eb0002f5 	bl	bd9c <WriteSentence>
    b1c4:	e59f0988 	ldr	r0, [pc, #2440]	; bb54 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x74>
    b1c8:	e5900000 	ldr	r0, [r0]
    b1cc:	e59f1984 	ldr	r1, [pc, #2436]	; bb58 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x78>
    b1d0:	e3a02001 	mov	r2, #1
    b1d4:	e3500096 	cmp	r0, #150	; 0x96
    b1d8:	a5812000 	strge	r2, [r1]
    b1dc:	e59f0974 	ldr	r0, [pc, #2420]	; bb58 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x78>
    b1e0:	e5900000 	ldr	r0, [r0]
    b1e4:	e3500001 	cmp	r0, #1
    b1e8:	ba000002 	blt	b1f8 <ScoreReturn>
    b1ec:	eb00033b 	bl	bee0 <drawVictoryScreen>
    b1f0:	e8bd0011 	pop	{r0, r4}
    b1f4:	ea000000 	b	b1fc <gameOver>

0000b1f8 <ScoreReturn>:
    b1f8:	e8bd8010 	pop	{r4, pc}

0000b1fc <gameOver>:
    b1fc:	e59f094c 	ldr	r0, [pc, #2380]	; bb50 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x70>
    b200:	eb000650 	bl	cb48 <startTimer>
    b204:	ebfffdf4 	bl	a9dc <sampleSNES>
    b208:	e59f1994 	ldr	r1, [pc, #2452]	; bba4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xc4>
    b20c:	e1500001 	cmp	r0, r1
    b210:	1afffe6e 	bne	abd0 <MainMenu>
    b214:	eafffff8 	b	b1fc <gameOver>

0000b218 <ClearScreenBlack>:
    b218:	e92d4600 	push	{r9, sl, lr}
    b21c:	e59f0984 	ldr	r0, [pc, #2436]	; bba8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xc8>
    b220:	e5909014 	ldr	r9, [r0, #20]
    b224:	e590a018 	ldr	sl, [r0, #24]
    b228:	e3a00000 	mov	r0, #0
    b22c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b230:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    b234:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    b238:	e3a00000 	mov	r0, #0
    b23c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b240:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b244:	eb000624 	bl	cadc <drawRect>
    b248:	e8bd8600 	pop	{r9, sl, pc}

0000b24c <tetrisInitGrid>:
    b24c:	e59f0914 	ldr	r0, [pc, #2324]	; bb68 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x88>
    b250:	e280100c 	add	r1, r0, #12
    b254:	e59f2910 	ldr	r2, [pc, #2320]	; bb6c <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x8c>
    b258:	e3a03000 	mov	r3, #0

0000b25c <forEach_block_in_tetrisGrid_loop>:
    b25c:	e5813000 	str	r3, [r1]
    b260:	e2811004 	add	r1, r1, #4
    b264:	e1510002 	cmp	r1, r2
    b268:	aa000000 	bge	b270 <forEach_block_in_tetrisGrid_loopEnd>
    b26c:	bafffffa 	blt	b25c <forEach_block_in_tetrisGrid_loop>

0000b270 <forEach_block_in_tetrisGrid_loopEnd>:
    b270:	e1a0f00e 	mov	pc, lr

0000b274 <tetrisSetGridBlockColor>:
    b274:	e8bd0007 	pop	{r0, r1, r2}
    b278:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b27c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b280:	e59f38e0 	ldr	r3, [pc, #2272]	; bb68 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x88>
    b284:	e8930070 	ldm	r3, {r4, r5, r6}
    b288:	e283700c 	add	r7, r3, #12
    b28c:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    b290:	e92d0013 	push	{r0, r1, r4}
    b294:	eb000626 	bl	cb34 <positionToArrayOffset>
    b298:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    b29c:	e1a08108 	lsl	r8, r8, #2
    b2a0:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
    b2a4:	e7872008 	str	r2, [r7, r8]
    b2a8:	e0000594 	mul	r0, r4, r5
    b2ac:	e1a00100 	lsl	r0, r0, #2
    b2b0:	e0870000 	add	r0, r7, r0
    b2b4:	e282200a 	add	r2, r2, #10
    b2b8:	e7802008 	str	r2, [r0, r8]
    b2bc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b2c0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b2c4:	e1a0f00e 	mov	pc, lr

0000b2c8 <tetrisGetGridBlockColor>:
    b2c8:	e8bd0006 	pop	{r1, r2}
    b2cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b2d0:	e92d03f0 	push	{r4, r5, r6, r7, r8, r9}
    b2d4:	e59f388c 	ldr	r3, [pc, #2188]	; bb68 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x88>
    b2d8:	e8930070 	ldm	r3, {r4, r5, r6}
    b2dc:	e283700c 	add	r7, r3, #12
    b2e0:	e3e094ff 	mvn	r9, #-16777216	; 0xff000000
    b2e4:	e3510000 	cmp	r1, #0
    b2e8:	ba00000a 	blt	b318 <tetrisGetGridBlockColorEnd>
    b2ec:	e1510004 	cmp	r1, r4
    b2f0:	aa000008 	bge	b318 <tetrisGetGridBlockColorEnd>
    b2f4:	e3520000 	cmp	r2, #0
    b2f8:	ba000006 	blt	b318 <tetrisGetGridBlockColorEnd>
    b2fc:	e1520005 	cmp	r2, r5
    b300:	aa000004 	bge	b318 <tetrisGetGridBlockColorEnd>

0000b304 <tetrisGetGridBlockColor_validInput>:
    b304:	e92d0016 	push	{r1, r2, r4}
    b308:	eb000609 	bl	cb34 <positionToArrayOffset>
    b30c:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    b310:	e1a08108 	lsl	r8, r8, #2
    b314:	e7979008 	ldr	r9, [r7, r8]

0000b318 <tetrisGetGridBlockColorEnd>:
    b318:	e1a00009 	mov	r0, r9
    b31c:	e8bd03f0 	pop	{r4, r5, r6, r7, r8, r9}
    b320:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b324:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b328:	e1a0f00e 	mov	pc, lr

0000b32c <tetrisClearGridBlock>:
    b32c:	e8bd0003 	pop	{r0, r1}
    b330:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b334:	e3a02000 	mov	r2, #0
    b338:	e92d0007 	push	{r0, r1, r2}
    b33c:	ebffffcc 	bl	b274 <tetrisSetGridBlockColor>
    b340:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b344 <tetrisDrawGrid>:
    b344:	e1a0000d 	mov	r0, sp
    b348:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b34c:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    b350:	e59f7810 	ldr	r7, [pc, #2064]	; bb68 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x88>
    b354:	e8970700 	ldm	r7, {r8, r9, sl}
    b358:	e287b00c 	add	fp, r7, #12
    b35c:	e1a07000 	mov	r7, r0
    b360:	e3a04000 	mov	r4, #0
    b364:	e3a05000 	mov	r5, #0
    b368:	e3a06000 	mov	r6, #0

0000b36c <tetrisDrawGrid_for_curCol_lt_cols_loop>:
    b36c:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000b370 <tetrisDrawGrid_for_curRow_lt_rows_loop>:
    b370:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    b374:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b378:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    b37c:	e89707c0 	ldm	r7, {r6, r7, r8, r9, sl}
    b380:	e92d07c0 	push	{r6, r7, r8, r9, sl}
    b384:	e92d0030 	push	{r4, r5}
    b388:	eb0001a7 	bl	ba2c <tetrisBlockHasDataForGridPoint>
    b38c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b390:	e3300000 	teq	r0, #0
    b394:	e8bd07c0 	pop	{r6, r7, r8, r9, sl}
    b398:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    b39c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b3a0:	0a000000 	beq	b3a8 <tetrisDrawGridBlock>

0000b3a4 <tetrisDrawGridBlockSkip>:
    b3a4:	ea000014 	b	b3fc <tetrisDrawGridBlockEnd>

0000b3a8 <tetrisDrawGridBlock>:
    b3a8:	e92d0130 	push	{r4, r5, r8}
    b3ac:	eb0005e0 	bl	cb34 <positionToArrayOffset>
    b3b0:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    b3b4:	e1a0c10c 	lsl	ip, ip, #2
    b3b8:	e79b600c 	ldr	r6, [fp, ip]
    b3bc:	e0000998 	mul	r0, r8, r9
    b3c0:	e1a00100 	lsl	r0, r0, #2
    b3c4:	e08b0000 	add	r0, fp, r0
    b3c8:	e790100c 	ldr	r1, [r0, ip]
    b3cc:	e3310000 	teq	r1, #0
    b3d0:	e780100c 	str	r1, [r0, ip]
    b3d4:	0a000008 	beq	b3fc <tetrisDrawGridBlockEnd>
    b3d8:	e92d000f 	push	{r0, r1, r2, r3}
    b3dc:	e92d0030 	push	{r4, r5}
    b3e0:	eb00003c 	bl	b4d8 <tetrisGetRectForGridPosition>
    b3e4:	e8bd000f 	pop	{r0, r1, r2, r3}
    b3e8:	e28000c0 	add	r0, r0, #192	; 0xc0
    b3ec:	e2811050 	add	r1, r1, #80	; 0x50
    b3f0:	e92d004f 	push	{r0, r1, r2, r3, r6}
    b3f4:	eb0005b8 	bl	cadc <drawRect>
    b3f8:	e8bd000f 	pop	{r0, r1, r2, r3}

0000b3fc <tetrisDrawGridBlockEnd>:
    b3fc:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    b400:	e2855001 	add	r5, r5, #1
    b404:	e1550009 	cmp	r5, r9
    b408:	baffffd8 	blt	b370 <tetrisDrawGrid_for_curRow_lt_rows_loop>
    b40c:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    b410:	e2844001 	add	r4, r4, #1
    b414:	e1540008 	cmp	r4, r8
    b418:	baffffd3 	blt	b36c <tetrisDrawGrid_for_curCol_lt_cols_loop>
    b41c:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    b420:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b424 <tetrisUpdateGrid>:
    b424:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b428:	e2400001 	sub	r0, r0, #1
    b42c:	e3500000 	cmp	r0, #0
    b430:	b3a00000 	movlt	r0, #0
    b434:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b438:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    b43c:	e59f7724 	ldr	r7, [pc, #1828]	; bb68 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x88>
    b440:	e8970700 	ldm	r7, {r8, r9, sl}
    b444:	e287b00c 	add	fp, r7, #12
    b448:	e3a04000 	mov	r4, #0
    b44c:	e1a05000 	mov	r5, r0
    b450:	e3a06000 	mov	r6, #0

0000b454 <tetrisUpdateGrid_for_curCol_lt_cols_loop>:
    b454:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000b458 <tetrisUpdateGrid_for_curRow_ge_0_loop>:
    b458:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    b45c:	e92d0030 	push	{r4, r5}
    b460:	e92d0030 	push	{r4, r5}
    b464:	ebffff97 	bl	b2c8 <tetrisGetGridBlockColor>
    b468:	e49d6004 	pop	{r6}		; (ldr r6, [sp], #4)
    b46c:	e3360000 	teq	r6, #0
    b470:	e8bd0030 	pop	{r4, r5}
    b474:	0a00000d 	beq	b4b0 <tetrisUpdateGridBlockBelowHasData>
    b478:	1affffff 	bne	b47c <tetrisUpdateGridCurrentBlockHasData>

0000b47c <tetrisUpdateGridCurrentBlockHasData>:
    b47c:	e1a00004 	mov	r0, r4
    b480:	e2851001 	add	r1, r5, #1
    b484:	e92d0003 	push	{r0, r1}
    b488:	e92d0003 	push	{r0, r1}
    b48c:	ebffff8d 	bl	b2c8 <tetrisGetGridBlockColor>
    b490:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
    b494:	e3320000 	teq	r2, #0
    b498:	e8bd0003 	pop	{r0, r1}
    b49c:	1a000003 	bne	b4b0 <tetrisUpdateGridBlockBelowHasData>
    b4a0:	e92d0043 	push	{r0, r1, r6}
    b4a4:	ebffff72 	bl	b274 <tetrisSetGridBlockColor>
    b4a8:	e92d0030 	push	{r4, r5}
    b4ac:	ebffff9e 	bl	b32c <tetrisClearGridBlock>

0000b4b0 <tetrisUpdateGridBlockBelowHasData>:
    b4b0:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    b4b4:	e2455001 	sub	r5, r5, #1
    b4b8:	e3550000 	cmp	r5, #0
    b4bc:	aaffffe5 	bge	b458 <tetrisUpdateGrid_for_curRow_ge_0_loop>
    b4c0:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    b4c4:	e2844001 	add	r4, r4, #1
    b4c8:	e1540008 	cmp	r4, r8
    b4cc:	baffffe0 	blt	b454 <tetrisUpdateGrid_for_curCol_lt_cols_loop>
    b4d0:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    b4d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b4d8 <tetrisGetRectForGridPosition>:
    b4d8:	e8bd0003 	pop	{r0, r1}
    b4dc:	e92d00f0 	push	{r4, r5, r6, r7}
    b4e0:	e59f4680 	ldr	r4, [pc, #1664]	; bb68 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x88>
    b4e4:	e89400e0 	ldm	r4, {r5, r6, r7}
    b4e8:	e1a02007 	mov	r2, r7
    b4ec:	e1a03007 	mov	r3, r7
    b4f0:	e0000092 	mul	r0, r2, r0
    b4f4:	e0010193 	mul	r1, r3, r1
    b4f8:	e8bd00f0 	pop	{r4, r5, r6, r7}
    b4fc:	e92d000f 	push	{r0, r1, r2, r3}
    b500:	e1a0f00e 	mov	pc, lr

0000b504 <tetrisCreateNewBlock>:
    b504:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b508:	e59f069c 	ldr	r0, [pc, #1692]	; bbac <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xcc>
    b50c:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}

0000b510 <initializeTetrisBlock>:
    b510:	e59f0680 	ldr	r0, [pc, #1664]	; bb98 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb8>
    b514:	e5900000 	ldr	r0, [r0]
    b518:	e3a04004 	mov	r4, #4
    b51c:	e3a05000 	mov	r5, #0
    b520:	e59f6688 	ldr	r6, [pc, #1672]	; bbb0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xd0>
    b524:	e1a01100 	lsl	r1, r0, #2
    b528:	e7966001 	ldr	r6, [r6, r1]
    b52c:	e59f7680 	ldr	r7, [pc, #1664]	; bbb4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xd4>
    b530:	e3300001 	teq	r0, #1
    b534:	059f767c 	ldreq	r7, [pc, #1660]	; bbb8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xd8>
    b538:	e3300002 	teq	r0, #2
    b53c:	059f7678 	ldreq	r7, [pc, #1656]	; bbbc <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xdc>
    b540:	e3300003 	teq	r0, #3
    b544:	059f7674 	ldreq	r7, [pc, #1652]	; bbc0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xe0>
    b548:	e3300004 	teq	r0, #4
    b54c:	059f7670 	ldreq	r7, [pc, #1648]	; bbc4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xe4>
    b550:	e3300005 	teq	r0, #5
    b554:	059f766c 	ldreq	r7, [pc, #1644]	; bbc8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xe8>
    b558:	e3300006 	teq	r0, #6
    b55c:	059f7668 	ldreq	r7, [pc, #1640]	; bbcc <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xec>
    b560:	e3a08000 	mov	r8, #0

0000b564 <initializeTetrisBlockEnd>:
    b564:	ebfffcc5 	bl	a880 <randomNumber>
    b568:	e59f1628 	ldr	r1, [pc, #1576]	; bb98 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb8>
    b56c:	e5810000 	str	r0, [r1]
    b570:	eb000002 	bl	b580 <drawQueue>
    b574:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b578:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b57c:	e1a0f00e 	mov	pc, lr

0000b580 <drawQueue>:
    b580:	e92d4010 	push	{r4, lr}
    b584:	e59f45f4 	ldr	r4, [pc, #1524]	; bb80 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xa0>
    b588:	e3a03084 	mov	r3, #132	; 0x84
    b58c:	e3a02084 	mov	r2, #132	; 0x84
    b590:	e59f1638 	ldr	r1, [pc, #1592]	; bbd0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xf0>
    b594:	e59f0638 	ldr	r0, [pc, #1592]	; bbd4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xf4>
    b598:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b59c:	eb00054e 	bl	cadc <drawRect>
    b5a0:	e59f15f0 	ldr	r1, [pc, #1520]	; bb98 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xb8>
    b5a4:	e5914000 	ldr	r4, [r1]
    b5a8:	e3340000 	teq	r4, #0
    b5ac:	0a00000b 	beq	b5e0 <QueueA>
    b5b0:	e3340001 	teq	r4, #1
    b5b4:	0a000011 	beq	b600 <QueueB>
    b5b8:	e3340002 	teq	r4, #2
    b5bc:	0a00001e 	beq	b63c <QueueC>
    b5c0:	e3340003 	teq	r4, #3
    b5c4:	0a00002b 	beq	b678 <QueueD>
    b5c8:	e3340004 	teq	r4, #4
    b5cc:	0a000031 	beq	b698 <QueueE>
    b5d0:	e3340005 	teq	r4, #5
    b5d4:	0a00003e 	beq	b6d4 <QueueF>
    b5d8:	e3340006 	teq	r4, #6
    b5dc:	0a00004b 	beq	b710 <QueueG>

0000b5e0 <QueueA>:
    b5e0:	e59f45f0 	ldr	r4, [pc, #1520]	; bbd8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xf8>
    b5e4:	e3a03080 	mov	r3, #128	; 0x80
    b5e8:	e3a02020 	mov	r2, #32
    b5ec:	e3a01f85 	mov	r1, #532	; 0x214
    b5f0:	e3a00fae 	mov	r0, #696	; 0x2b8
    b5f4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b5f8:	eb000537 	bl	cadc <drawRect>
    b5fc:	ea000052 	b	b74c <QueueDone>

0000b600 <QueueB>:
    b600:	e59f45d4 	ldr	r4, [pc, #1492]	; bbdc <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xfc>
    b604:	e3a03040 	mov	r3, #64	; 0x40
    b608:	e3a02020 	mov	r2, #32
    b60c:	e3a01f8d 	mov	r1, #564	; 0x234
    b610:	e3a00fa6 	mov	r0, #664	; 0x298
    b614:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b618:	eb00052f 	bl	cadc <drawRect>
    b61c:	e59f45b8 	ldr	r4, [pc, #1464]	; bbdc <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0xfc>
    b620:	e3a03020 	mov	r3, #32
    b624:	e3a02040 	mov	r2, #64	; 0x40
    b628:	e3a01f95 	mov	r1, #596	; 0x254
    b62c:	e3a00fae 	mov	r0, #696	; 0x2b8
    b630:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b634:	eb000528 	bl	cadc <drawRect>
    b638:	ea000043 	b	b74c <QueueDone>

0000b63c <QueueC>:
    b63c:	e59f459c 	ldr	r4, [pc, #1436]	; bbe0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x100>
    b640:	e3a03020 	mov	r3, #32
    b644:	e3a02060 	mov	r2, #96	; 0x60
    b648:	e3a01f95 	mov	r1, #596	; 0x254
    b64c:	e3a00fa6 	mov	r0, #664	; 0x298
    b650:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b654:	eb000520 	bl	cadc <drawRect>
    b658:	e59f4580 	ldr	r4, [pc, #1408]	; bbe0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x100>
    b65c:	e3a03020 	mov	r3, #32
    b660:	e3a02020 	mov	r2, #32
    b664:	e3a01f8d 	mov	r1, #564	; 0x234
    b668:	e3a00fb6 	mov	r0, #728	; 0x2d8
    b66c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b670:	eb000519 	bl	cadc <drawRect>
    b674:	ea000034 	b	b74c <QueueDone>

0000b678 <QueueD>:
    b678:	e59f4564 	ldr	r4, [pc, #1380]	; bbe4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x104>
    b67c:	e3a03040 	mov	r3, #64	; 0x40
    b680:	e3a02040 	mov	r2, #64	; 0x40
    b684:	e3a01f8d 	mov	r1, #564	; 0x234
    b688:	e59f0558 	ldr	r0, [pc, #1368]	; bbe8 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x108>
    b68c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b690:	eb000511 	bl	cadc <drawRect>
    b694:	ea00002c 	b	b74c <QueueDone>

0000b698 <QueueE>:
    b698:	e59f454c 	ldr	r4, [pc, #1356]	; bbec <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x10c>
    b69c:	e3a03020 	mov	r3, #32
    b6a0:	e3a02040 	mov	r2, #64	; 0x40
    b6a4:	e3a01f8d 	mov	r1, #564	; 0x234
    b6a8:	e3a00fae 	mov	r0, #696	; 0x2b8
    b6ac:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b6b0:	eb000509 	bl	cadc <drawRect>
    b6b4:	e59f4530 	ldr	r4, [pc, #1328]	; bbec <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x10c>
    b6b8:	e3a03020 	mov	r3, #32
    b6bc:	e3a02040 	mov	r2, #64	; 0x40
    b6c0:	e3a01f95 	mov	r1, #596	; 0x254
    b6c4:	e3a00fa6 	mov	r0, #664	; 0x298
    b6c8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b6cc:	eb000502 	bl	cadc <drawRect>
    b6d0:	ea00001d 	b	b74c <QueueDone>

0000b6d4 <QueueF>:
    b6d4:	e59f4514 	ldr	r4, [pc, #1300]	; bbf0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x110>
    b6d8:	e3a03020 	mov	r3, #32
    b6dc:	e3a02020 	mov	r2, #32
    b6e0:	e3a01f8d 	mov	r1, #564	; 0x234
    b6e4:	e3a00fae 	mov	r0, #696	; 0x2b8
    b6e8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b6ec:	eb0004fa 	bl	cadc <drawRect>
    b6f0:	e59f44f8 	ldr	r4, [pc, #1272]	; bbf0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x110>
    b6f4:	e3a03020 	mov	r3, #32
    b6f8:	e3a02060 	mov	r2, #96	; 0x60
    b6fc:	e3a01f95 	mov	r1, #596	; 0x254
    b700:	e3a00fa6 	mov	r0, #664	; 0x298
    b704:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b708:	eb0004f3 	bl	cadc <drawRect>
    b70c:	ea00000e 	b	b74c <QueueDone>

0000b710 <QueueG>:
    b710:	e59f44dc 	ldr	r4, [pc, #1244]	; bbf4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x114>
    b714:	e3a03020 	mov	r3, #32
    b718:	e3a02040 	mov	r2, #64	; 0x40
    b71c:	e3a01f8d 	mov	r1, #564	; 0x234
    b720:	e3a00fa6 	mov	r0, #664	; 0x298
    b724:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b728:	eb0004eb 	bl	cadc <drawRect>
    b72c:	e59f44c0 	ldr	r4, [pc, #1216]	; bbf4 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop+0x114>
    b730:	e3a03020 	mov	r3, #32
    b734:	e3a02040 	mov	r2, #64	; 0x40
    b738:	e3a01f95 	mov	r1, #596	; 0x254
    b73c:	e3a00fae 	mov	r0, #696	; 0x2b8
    b740:	e92d001f 	push	{r0, r1, r2, r3, r4}
    b744:	eb0004e4 	bl	cadc <drawRect>
    b748:	eaffffff 	b	b74c <QueueDone>

0000b74c <QueueDone>:
    b74c:	e8bd8010 	pop	{r4, pc}

0000b750 <tetrisDrawBlock>:
    b750:	e1a0000d 	mov	r0, sp
    b754:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b758:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b75c:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b760:	e92d1800 	push	{fp, ip}
    b764:	e3a0b000 	mov	fp, #0
    b768:	e3a0c000 	mov	ip, #0

0000b76c <for_i_lt_4_loop>:
    b76c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000b770 <for_j_lt_4_loop>:
    b770:	e92d0070 	push	{r4, r5, r6}
    b774:	e19720b8 	ldrh	r2, [r7, r8]
    b778:	e084400b 	add	r4, r4, fp
    b77c:	e085500c 	add	r5, r5, ip
    b780:	e3a01004 	mov	r1, #4
    b784:	e0010c91 	mul	r1, r1, ip
    b788:	e081100b 	add	r1, r1, fp
    b78c:	e1a02112 	lsl	r2, r2, r1
    b790:	e3a01902 	mov	r1, #32768	; 0x8000
    b794:	e0011002 	and	r1, r1, r2
    b798:	e3310000 	teq	r1, #0
    b79c:	e52d6004 	push	{r6}		; (str r6, [sp, #-4]!)
    b7a0:	03a06000 	moveq	r6, #0
    b7a4:	0a00000a 	beq	b7d4 <blockHasNoData>

0000b7a8 <blockHasData>:
    b7a8:	e92d000f 	push	{r0, r1, r2, r3}
    b7ac:	e320f000 	nop	{0}
    b7b0:	e92d0030 	push	{r4, r5}
    b7b4:	ebffff47 	bl	b4d8 <tetrisGetRectForGridPosition>
    b7b8:	e8bd000f 	pop	{r0, r1, r2, r3}
    b7bc:	e320f000 	nop	{0}
    b7c0:	e28000c0 	add	r0, r0, #192	; 0xc0
    b7c4:	e2811050 	add	r1, r1, #80	; 0x50
    b7c8:	e92d004f 	push	{r0, r1, r2, r3, r6}
    b7cc:	eb0004c2 	bl	cadc <drawRect>
    b7d0:	e8bd000f 	pop	{r0, r1, r2, r3}

0000b7d4 <blockHasNoData>:
    b7d4:	e49d6004 	pop	{r6}		; (ldr r6, [sp], #4)
    b7d8:	e8bd0070 	pop	{r4, r5, r6}
    b7dc:	e28cc001 	add	ip, ip, #1
    b7e0:	e35c0004 	cmp	ip, #4
    b7e4:	baffffe1 	blt	b770 <for_j_lt_4_loop>
    b7e8:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    b7ec:	e28bb001 	add	fp, fp, #1
    b7f0:	e35b0004 	cmp	fp, #4
    b7f4:	baffffdc 	blt	b76c <for_i_lt_4_loop>
    b7f8:	e8bd1800 	pop	{fp, ip}
    b7fc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b800:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b804:	e1a0f00e 	mov	pc, lr

0000b808 <tetrisCheckBlockGridCollisions>:
    b808:	e1a0000d 	mov	r0, sp
    b80c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b810:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b814:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b818:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b81c:	eb0000a6 	bl	babc <tetrisGetGridBitmaskForBlock>
    b820:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b824:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b828:	e320f000 	nop	{0}
    b82c:	e19710b8 	ldrh	r1, [r7, r8]
    b830:	e0000001 	and	r0, r0, r1
    b834:	e3500000 	cmp	r0, #0
    b838:	13a00001 	movne	r0, #1
    b83c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b840:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b844:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b848:	e1a0f00e 	mov	pc, lr

0000b84c <tetrisOnBlockCollision>:
    b84c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b850:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b854:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b858:	e19730b8 	ldrh	r3, [r7, r8]
    b85c:	e320f000 	nop	{0}
    b860:	eb000005 	bl	b87c <writeBlockToGrid>
    b864:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b868:	ebffff25 	bl	b504 <tetrisCreateNewBlock>
    b86c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b870:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b874:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b878:	e1a0f00e 	mov	pc, lr

0000b87c <writeBlockToGrid>:
    b87c:	e1a0000d 	mov	r0, sp
    b880:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b884:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b888:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b88c:	e92d1800 	push	{fp, ip}
    b890:	e3a0b000 	mov	fp, #0
    b894:	e3a0c000 	mov	ip, #0

0000b898 <writeBlockToGrid_for_i_lt_4_loop>:
    b898:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000b89c <writeBlockToGrid_for_j_lt_4_loop>:
    b89c:	e92d0070 	push	{r4, r5, r6}
    b8a0:	e19720b8 	ldrh	r2, [r7, r8]
    b8a4:	e084400b 	add	r4, r4, fp
    b8a8:	e085500c 	add	r5, r5, ip
    b8ac:	e3a01004 	mov	r1, #4
    b8b0:	e0010c91 	mul	r1, r1, ip
    b8b4:	e081100b 	add	r1, r1, fp
    b8b8:	e1a02112 	lsl	r2, r2, r1
    b8bc:	e3a01902 	mov	r1, #32768	; 0x8000
    b8c0:	e0011002 	and	r1, r1, r2
    b8c4:	e3310000 	teq	r1, #0
    b8c8:	0a000001 	beq	b8d4 <writeBlockToGrid_blockHasNoData>

0000b8cc <writeBlockToGrid_blockHasData>:
    b8cc:	e92d0070 	push	{r4, r5, r6}
    b8d0:	ebfffe67 	bl	b274 <tetrisSetGridBlockColor>

0000b8d4 <writeBlockToGrid_blockHasNoData>:
    b8d4:	e8bd0070 	pop	{r4, r5, r6}
    b8d8:	e28cc001 	add	ip, ip, #1
    b8dc:	e35c0004 	cmp	ip, #4
    b8e0:	baffffed 	blt	b89c <writeBlockToGrid_for_j_lt_4_loop>
    b8e4:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    b8e8:	e28bb001 	add	fp, fp, #1
    b8ec:	e35b0004 	cmp	fp, #4
    b8f0:	baffffe8 	blt	b898 <writeBlockToGrid_for_i_lt_4_loop>
    b8f4:	e8bd1800 	pop	{fp, ip}
    b8f8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b8fc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b900:	e1a0f00e 	mov	pc, lr

0000b904 <tetrisRotateBlock>:
    b904:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b908:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b90c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b910:	e3300000 	teq	r0, #0
    b914:	0a000000 	beq	b91c <handleRotateLeft>
    b918:	1a000003 	bne	b92c <handleRotateRight>

0000b91c <handleRotateLeft>:
    b91c:	e2888002 	add	r8, r8, #2
    b920:	e3580006 	cmp	r8, #6
    b924:	c3a08000 	movgt	r8, #0
    b928:	ea000003 	b	b93c <handleRotateEnd>

0000b92c <handleRotateRight>:
    b92c:	e2488002 	sub	r8, r8, #2
    b930:	e3580000 	cmp	r8, #0
    b934:	b3a08006 	movlt	r8, #6
    b938:	eaffffff 	b	b93c <handleRotateEnd>

0000b93c <handleRotateEnd>:
    b93c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b940:	ebffffb0 	bl	b808 <tetrisCheckBlockGridCollisions>
    b944:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b948:	e3300000 	teq	r0, #0
    b94c:	1a000000 	bne	b954 <onRotationCollision>
    b950:	0a000004 	beq	b968 <onNoRotationCollision>

0000b954 <onRotationCollision>:
    b954:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b958:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b95c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b960:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b964:	ea000009 	b	b990 <tetrisRotateBlockEnd>

0000b968 <onNoRotationCollision>:
    b968:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b96c:	e1a0c006 	mov	ip, r6
    b970:	e3a06000 	mov	r6, #0
    b974:	e58d6008 	str	r6, [sp, #8]
    b978:	ebffffbf 	bl	b87c <writeBlockToGrid>
    b97c:	e1a0600c 	mov	r6, ip
    b980:	028dd014 	addeq	sp, sp, #20
    b984:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b988:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b98c:	eaffffff 	b	b990 <tetrisRotateBlockEnd>

0000b990 <tetrisRotateBlockEnd>:
    b990:	e1a0f00e 	mov	pc, lr

0000b994 <tetrisTranslateBlock>:
    b994:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b998:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b99c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b9a0:	e0844000 	add	r4, r4, r0
    b9a4:	e0855001 	add	r5, r5, r1
    b9a8:	e92d0003 	push	{r0, r1}
    b9ac:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b9b0:	ebffff94 	bl	b808 <tetrisCheckBlockGridCollisions>
    b9b4:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)
    b9b8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b9bc:	e8bd0003 	pop	{r0, r1}
    b9c0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b9c4:	e3330000 	teq	r3, #0
    b9c8:	1a000000 	bne	b9d0 <onTranslationCollision>
    b9cc:	0a00000d 	beq	ba08 <onNoTranslationCollision>

0000b9d0 <onTranslationCollision>:
    b9d0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b9d4:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b9d8:	e3310000 	teq	r1, #0
    b9dc:	0a000000 	beq	b9e4 <onTranslationCollision_Horizontal>
    b9e0:	1a000002 	bne	b9f0 <onTranslationCollision_Vertical>

0000b9e4 <onTranslationCollision_Horizontal>:
    b9e4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b9e8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b9ec:	ea00000d 	b	ba28 <tetrisTranslateBlockEnd>

0000b9f0 <onTranslationCollision_Vertical>:
    b9f0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b9f4:	ebffff94 	bl	b84c <tetrisOnBlockCollision>
    b9f8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b9fc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ba00:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ba04:	eafffca4 	b	ac9c <newBlock>

0000ba08 <onNoTranslationCollision>:
    ba08:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ba0c:	e3a00000 	mov	r0, #0
    ba10:	e58d0008 	str	r0, [sp, #8]
    ba14:	ebffff4d 	bl	b750 <tetrisDrawBlock>
    ba18:	028dd014 	addeq	sp, sp, #20
    ba1c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ba20:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ba24:	eaffffff 	b	ba28 <tetrisTranslateBlockEnd>

0000ba28 <tetrisTranslateBlockEnd>:
    ba28:	e1a0f00e 	mov	pc, lr

0000ba2c <tetrisBlockHasDataForGridPoint>:
    ba2c:	e8bd0003 	pop	{r0, r1}
    ba30:	e89d01f0 	ldm	sp, {r4, r5, r6, r7, r8}
    ba34:	e1500004 	cmp	r0, r4
    ba38:	b3a02000 	movlt	r2, #0
    ba3c:	ba00001c 	blt	bab4 <tetrisBlockHasDataForGridPointEnd>
    ba40:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    ba44:	e2844004 	add	r4, r4, #4
    ba48:	e1500004 	cmp	r0, r4
    ba4c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    ba50:	a3a02000 	movge	r2, #0
    ba54:	aa000016 	bge	bab4 <tetrisBlockHasDataForGridPointEnd>
    ba58:	e1510005 	cmp	r1, r5
    ba5c:	b3a02000 	movlt	r2, #0
    ba60:	ba000013 	blt	bab4 <tetrisBlockHasDataForGridPointEnd>
    ba64:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
    ba68:	e2855004 	add	r5, r5, #4
    ba6c:	e1510005 	cmp	r1, r5
    ba70:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    ba74:	a3a02000 	movge	r2, #0
    ba78:	aa00000d 	bge	bab4 <tetrisBlockHasDataForGridPointEnd>
    ba7c:	e0400004 	sub	r0, r0, r4
    ba80:	e0411005 	sub	r1, r1, r5
    ba84:	e52d8004 	push	{r8}		; (str r8, [sp, #-4]!)
    ba88:	e19790b8 	ldrh	r9, [r7, r8]
    ba8c:	e3a08004 	mov	r8, #4
    ba90:	e0080198 	mul	r8, r8, r1
    ba94:	e0888000 	add	r8, r8, r0
    ba98:	e1a09819 	lsl	r9, r9, r8
    ba9c:	e3a08902 	mov	r8, #32768	; 0x8000
    baa0:	e0088009 	and	r8, r8, r9
    baa4:	e3380000 	teq	r8, #0
    baa8:	03a02000 	moveq	r2, #0
    baac:	13a02001 	movne	r2, #1
    bab0:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)

0000bab4 <tetrisBlockHasDataForGridPointEnd>:
    bab4:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    bab8:	e1a0f00e 	mov	pc, lr

0000babc <tetrisGetGridBitmaskForBlock>:
    babc:	e1a0000d 	mov	r0, sp
    bac0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    bac4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    bac8:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    bacc:	e92d1800 	push	{fp, ip}
    bad0:	e3a00000 	mov	r0, #0
    bad4:	e3a0b000 	mov	fp, #0
    bad8:	e3a0c000 	mov	ip, #0

0000badc <tetrisGetGridBitmaskForBlock_for_i_lt_4_loop>:
    badc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000bae0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop>:
    bae0:	e92d0070 	push	{r4, r5, r6}
    bae4:	e084400b 	add	r4, r4, fp
    bae8:	e085500c 	add	r5, r5, ip
    baec:	e92d1801 	push	{r0, fp, ip}
    baf0:	e92d0030 	push	{r4, r5}
    baf4:	ebfffdf3 	bl	b2c8 <tetrisGetGridBlockColor>
    baf8:	e49d6004 	pop	{r6}		; (ldr r6, [sp], #4)
    bafc:	e8bd1801 	pop	{r0, fp, ip}
    bb00:	e3360000 	teq	r6, #0
    bb04:	13a01004 	movne	r1, #4
    bb08:	1001019c 	mulne	r1, ip, r1
    bb0c:	1081100b 	addne	r1, r1, fp
    bb10:	13a02902 	movne	r2, #32768	; 0x8000
    bb14:	11a02132 	lsrne	r2, r2, r1
    bb18:	11800002 	orrne	r0, r0, r2
    bb1c:	e8bd0070 	pop	{r4, r5, r6}
    bb20:	e28cc001 	add	ip, ip, #1
    bb24:	e35c0004 	cmp	ip, #4
    bb28:	baffffec 	blt	bae0 <tetrisGetGridBitmaskForBlock_for_j_lt_4_loop>
    bb2c:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    bb30:	e28bb001 	add	fp, fp, #1
    bb34:	e35b0004 	cmp	fp, #4
    bb38:	baffffe7 	blt	badc <tetrisGetGridBitmaskForBlock_for_i_lt_4_loop>
    bb3c:	e8bd1800 	pop	{fp, ip}
    bb40:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    bb44:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    bb48:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    bb4c:	e1a0f00e 	mov	pc, lr
    bb50:	00002710 	.word	0x00002710
    bb54:	000096f0 	.word	0x000096f0
    bb58:	00009700 	.word	0x00009700
    bb5c:	00009710 	.word	0x00009710
    bb60:	3f003004 	.word	0x3f003004
    bb64:	00061a80 	.word	0x00061a80
    bb68:	000090f0 	.word	0x000090f0
    bb6c:	000096ec 	.word	0x000096ec
    bb70:	00009fd0 	.word	0x00009fd0
    bb74:	000034a0 	.word	0x000034a0
    bb78:	00000269 	.word	0x00000269
    bb7c:	00000297 	.word	0x00000297
    bb80:	0000adb5 	.word	0x0000adb5
    bb84:	00000299 	.word	0x00000299
    bb88:	00009ff0 	.word	0x00009ff0
    bb8c:	00000618 	.word	0x00000618
    bb90:	0000023e 	.word	0x0000023e
    bb94:	0000024a 	.word	0x0000024a
    bb98:	0000a000 	.word	0x0000a000
    bb9c:	000002a6 	.word	0x000002a6
    bba0:	00009fe0 	.word	0x00009fe0
    bba4:	0000ffff 	.word	0x0000ffff
    bba8:	00009080 	.word	0x00009080
    bbac:	00009720 	.word	0x00009720
    bbb0:	00009740 	.word	0x00009740
    bbb4:	00009760 	.word	0x00009760
    bbb8:	00009770 	.word	0x00009770
    bbbc:	00009780 	.word	0x00009780
    bbc0:	00009790 	.word	0x00009790
    bbc4:	000097a0 	.word	0x000097a0
    bbc8:	000097b0 	.word	0x000097b0
    bbcc:	000097c0 	.word	0x000097c0
    bbd0:	00000212 	.word	0x00000212
    bbd4:	00000286 	.word	0x00000286
    bbd8:	000027df 	.word	0x000027df
    bbdc:	000029ff 	.word	0x000029ff
    bbe0:	0000fca2 	.word	0x0000fca2
    bbe4:	0000ffe8 	.word	0x0000ffe8
    bbe8:	000002aa 	.word	0x000002aa
    bbec:	000057e5 	.word	0x000057e5
    bbf0:	0000c99f 	.word	0x0000c99f
    bbf4:	0000f8e4 	.word	0x0000f8e4

0000bbf8 <drawPauseMenu>:
    bbf8:	e92d4010 	push	{r4, lr}
    bbfc:	e59f4d84 	ldr	r4, [pc, #3460]	; c988 <noPixel$+0x20>
    bc00:	e3a03f7d 	mov	r3, #500	; 0x1f4
    bc04:	e3a02f96 	mov	r2, #600	; 0x258
    bc08:	e3a01086 	mov	r1, #134	; 0x86
    bc0c:	e3a000d0 	mov	r0, #208	; 0xd0
    bc10:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc14:	eb0003b0 	bl	cadc <drawRect>
    bc18:	e3a04902 	mov	r4, #32768	; 0x8000
    bc1c:	e3a03004 	mov	r3, #4
    bc20:	e3a02e26 	mov	r2, #608	; 0x260
    bc24:	e3a01082 	mov	r1, #130	; 0x82
    bc28:	e3a000cc 	mov	r0, #204	; 0xcc
    bc2c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc30:	eb0003a9 	bl	cadc <drawRect>
    bc34:	e3a04902 	mov	r4, #32768	; 0x8000
    bc38:	e3a03004 	mov	r3, #4
    bc3c:	e3a02e26 	mov	r2, #608	; 0x260
    bc40:	e59f1d44 	ldr	r1, [pc, #3396]	; c98c <noPixel$+0x24>
    bc44:	e3a000cc 	mov	r0, #204	; 0xcc
    bc48:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc4c:	eb0003a2 	bl	cadc <drawRect>
    bc50:	e3a04902 	mov	r4, #32768	; 0x8000
    bc54:	e3a03f7d 	mov	r3, #500	; 0x1f4
    bc58:	e3a02004 	mov	r2, #4
    bc5c:	e3a01086 	mov	r1, #134	; 0x86
    bc60:	e3a000cc 	mov	r0, #204	; 0xcc
    bc64:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc68:	eb00039b 	bl	cadc <drawRect>
    bc6c:	e3a04902 	mov	r4, #32768	; 0x8000
    bc70:	e3a03f7d 	mov	r3, #500	; 0x1f4
    bc74:	e3a02004 	mov	r2, #4
    bc78:	e3a01086 	mov	r1, #134	; 0x86
    bc7c:	e3a00fca 	mov	r0, #808	; 0x328
    bc80:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bc84:	eb000394 	bl	cadc <drawRect>
    bc88:	eb000213 	bl	c4dc <drawPaused>
    bc8c:	e59f0cfc 	ldr	r0, [pc, #3324]	; c990 <noPixel$+0x28>
    bc90:	e3a01e1d 	mov	r1, #464	; 0x1d0
    bc94:	eb0001f3 	bl	c468 <drawMenuButton>
    bc98:	e59f0cf4 	ldr	r0, [pc, #3316]	; c994 <noPixel$+0x2c>
    bc9c:	e3a01000 	mov	r1, #0
    bca0:	e59f2cf0 	ldr	r2, [pc, #3312]	; c998 <noPixel$+0x30>
    bca4:	e59f3cec 	ldr	r3, [pc, #3308]	; c998 <noPixel$+0x30>
    bca8:	eb00003b 	bl	bd9c <WriteSentence>
    bcac:	e59f0cdc 	ldr	r0, [pc, #3292]	; c990 <noPixel$+0x28>
    bcb0:	e59f1ce4 	ldr	r1, [pc, #3300]	; c99c <noPixel$+0x34>
    bcb4:	eb0001eb 	bl	c468 <drawMenuButton>
    bcb8:	e59f0ce0 	ldr	r0, [pc, #3296]	; c9a0 <noPixel$+0x38>
    bcbc:	e3a01000 	mov	r1, #0
    bcc0:	e59f2cdc 	ldr	r2, [pc, #3292]	; c9a4 <noPixel$+0x3c>
    bcc4:	e3a03f8d 	mov	r3, #564	; 0x234
    bcc8:	eb000033 	bl	bd9c <WriteSentence>
    bccc:	eb000043 	bl	bde0 <setPauseMenuIndicatorRestart>
    bcd0:	e8bd8010 	pop	{r4, pc}

0000bcd4 <drawMainMenu>:
    bcd4:	e92d4610 	push	{r4, r9, sl, lr}
    bcd8:	e59f0cc8 	ldr	r0, [pc, #3272]	; c9a8 <noPixel$+0x40>
    bcdc:	e5909014 	ldr	r9, [r0, #20]
    bce0:	e590a018 	ldr	sl, [r0, #24]
    bce4:	e59f0c9c 	ldr	r0, [pc, #3228]	; c988 <noPixel$+0x20>
    bce8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    bcec:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    bcf0:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    bcf4:	e3a00000 	mov	r0, #0
    bcf8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    bcfc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    bd00:	eb000375 	bl	cadc <drawRect>
    bd04:	e59f4ca0 	ldr	r4, [pc, #3232]	; c9ac <noPixel$+0x44>
    bd08:	e3a030c8 	mov	r3, #200	; 0xc8
    bd0c:	e3a02f96 	mov	r2, #600	; 0x258
    bd10:	e3a01054 	mov	r1, #84	; 0x54
    bd14:	e3a000d4 	mov	r0, #212	; 0xd4
    bd18:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd1c:	eb00036e 	bl	cadc <drawRect>
    bd20:	e59f4c84 	ldr	r4, [pc, #3204]	; c9ac <noPixel$+0x44>
    bd24:	e3a030c8 	mov	r3, #200	; 0xc8
    bd28:	e3a020c8 	mov	r2, #200	; 0xc8
    bd2c:	e3a01f47 	mov	r1, #284	; 0x11c
    bd30:	e3a00f67 	mov	r0, #412	; 0x19c
    bd34:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bd38:	eb000367 	bl	cadc <drawRect>
    bd3c:	eb00027b 	bl	c730 <drawTitle>
    bd40:	e59f0c68 	ldr	r0, [pc, #3176]	; c9b0 <noPixel$+0x48>
    bd44:	e3a01000 	mov	r1, #0
    bd48:	e59f2c64 	ldr	r2, [pc, #3172]	; c9b4 <noPixel$+0x4c>
    bd4c:	e3a03044 	mov	r3, #68	; 0x44
    bd50:	eb000011 	bl	bd9c <WriteSentence>
    bd54:	e59f0c34 	ldr	r0, [pc, #3124]	; c990 <noPixel$+0x28>
    bd58:	e3a01f8d 	mov	r1, #564	; 0x234
    bd5c:	eb0001c1 	bl	c468 <drawMenuButton>
    bd60:	e59f0c50 	ldr	r0, [pc, #3152]	; c9b8 <noPixel$+0x50>
    bd64:	e3a01000 	mov	r1, #0
    bd68:	e59f2c4c 	ldr	r2, [pc, #3148]	; c9bc <noPixel$+0x54>
    bd6c:	e59f3c4c 	ldr	r3, [pc, #3148]	; c9c0 <noPixel$+0x58>
    bd70:	eb000009 	bl	bd9c <WriteSentence>
    bd74:	e59f0c14 	ldr	r0, [pc, #3092]	; c990 <noPixel$+0x28>
    bd78:	e59f1c44 	ldr	r1, [pc, #3140]	; c9c4 <noPixel$+0x5c>
    bd7c:	eb0001b9 	bl	c468 <drawMenuButton>
    bd80:	e59f0c18 	ldr	r0, [pc, #3096]	; c9a0 <noPixel$+0x38>
    bd84:	e3a01000 	mov	r1, #0
    bd88:	e59f2c14 	ldr	r2, [pc, #3092]	; c9a4 <noPixel$+0x3c>
    bd8c:	e3a03fa6 	mov	r3, #664	; 0x298
    bd90:	eb000001 	bl	bd9c <WriteSentence>
    bd94:	eb000031 	bl	be60 <setMainMenuIndicatorStart>
    bd98:	e8bd8610 	pop	{r4, r9, sl, pc}

0000bd9c <WriteSentence>:
    bd9c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    bda0:	e1a05000 	mov	r5, r0
    bda4:	e5954000 	ldr	r4, [r5]
    bda8:	e2855004 	add	r5, r5, #4
    bdac:	e1a06001 	mov	r6, r1
    bdb0:	e1a08002 	mov	r8, r2
    bdb4:	e1a07003 	mov	r7, r3

0000bdb8 <LoadChar>:
    bdb8:	e4d50001 	ldrb	r0, [r5], #1
    bdbc:	e1a01006 	mov	r1, r6
    bdc0:	e1a02007 	mov	r2, r7
    bdc4:	e1a03008 	mov	r3, r8
    bdc8:	eb0002d8 	bl	c930 <DrawChar>
    bdcc:	e2888008 	add	r8, r8, #8
    bdd0:	e2444001 	sub	r4, r4, #1
    bdd4:	e3540000 	cmp	r4, #0
    bdd8:	cafffff6 	bgt	bdb8 <LoadChar>
    bddc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000bde0 <setPauseMenuIndicatorRestart>:
    bde0:	e92d4010 	push	{r4, lr}
    bde4:	e59f4bdc 	ldr	r4, [pc, #3036]	; c9c8 <noPixel$+0x60>
    bde8:	e3a03014 	mov	r3, #20
    bdec:	e3a02014 	mov	r2, #20
    bdf0:	e3a01e23 	mov	r1, #560	; 0x230
    bdf4:	e3a00f71 	mov	r0, #452	; 0x1c4
    bdf8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bdfc:	eb000336 	bl	cadc <drawRect>
    be00:	e3a04000 	mov	r4, #0
    be04:	e3a03014 	mov	r3, #20
    be08:	e3a02014 	mov	r2, #20
    be0c:	e59f1bb8 	ldr	r1, [pc, #3000]	; c9cc <noPixel$+0x64>
    be10:	e3a00f71 	mov	r0, #452	; 0x1c4
    be14:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be18:	eb00032f 	bl	cadc <drawRect>
    be1c:	e8bd8010 	pop	{r4, pc}

0000be20 <setPauseMenuIndicatorQuit>:
    be20:	e92d4010 	push	{r4, lr}
    be24:	e59f4b9c 	ldr	r4, [pc, #2972]	; c9c8 <noPixel$+0x60>
    be28:	e3a03014 	mov	r3, #20
    be2c:	e3a02014 	mov	r2, #20
    be30:	e59f1b94 	ldr	r1, [pc, #2964]	; c9cc <noPixel$+0x64>
    be34:	e3a00f71 	mov	r0, #452	; 0x1c4
    be38:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be3c:	eb000326 	bl	cadc <drawRect>
    be40:	e3a04000 	mov	r4, #0
    be44:	e3a03014 	mov	r3, #20
    be48:	e3a02014 	mov	r2, #20
    be4c:	e3a01e23 	mov	r1, #560	; 0x230
    be50:	e3a00f71 	mov	r0, #452	; 0x1c4
    be54:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be58:	eb00031f 	bl	cadc <drawRect>
    be5c:	e8bd8010 	pop	{r4, pc}

0000be60 <setMainMenuIndicatorStart>:
    be60:	e92d4010 	push	{r4, lr}
    be64:	e59f4b5c 	ldr	r4, [pc, #2908]	; c9c8 <noPixel$+0x60>
    be68:	e3a03014 	mov	r3, #20
    be6c:	e3a02014 	mov	r2, #20
    be70:	e3a01fa5 	mov	r1, #660	; 0x294
    be74:	e3a00f71 	mov	r0, #452	; 0x1c4
    be78:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be7c:	eb000316 	bl	cadc <drawRect>
    be80:	e3a04000 	mov	r4, #0
    be84:	e3a03014 	mov	r3, #20
    be88:	e3a02014 	mov	r2, #20
    be8c:	e59f1b3c 	ldr	r1, [pc, #2876]	; c9d0 <noPixel$+0x68>
    be90:	e3a00f71 	mov	r0, #452	; 0x1c4
    be94:	e92d001f 	push	{r0, r1, r2, r3, r4}
    be98:	eb00030f 	bl	cadc <drawRect>
    be9c:	e8bd8010 	pop	{r4, pc}

0000bea0 <setMainMenuIndicatorQuit>:
    bea0:	e92d4010 	push	{r4, lr}
    bea4:	e59f4b1c 	ldr	r4, [pc, #2844]	; c9c8 <noPixel$+0x60>
    bea8:	e3a03014 	mov	r3, #20
    beac:	e3a02014 	mov	r2, #20
    beb0:	e59f1b18 	ldr	r1, [pc, #2840]	; c9d0 <noPixel$+0x68>
    beb4:	e3a00f71 	mov	r0, #452	; 0x1c4
    beb8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bebc:	eb000306 	bl	cadc <drawRect>
    bec0:	e3a04000 	mov	r4, #0
    bec4:	e3a03014 	mov	r3, #20
    bec8:	e3a02014 	mov	r2, #20
    becc:	e3a01fa5 	mov	r1, #660	; 0x294
    bed0:	e3a00f71 	mov	r0, #452	; 0x1c4
    bed4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bed8:	eb0002ff 	bl	cadc <drawRect>
    bedc:	e8bd8010 	pop	{r4, pc}

0000bee0 <drawVictoryScreen>:
    bee0:	e92d4010 	push	{r4, lr}
    bee4:	e59f4ae8 	ldr	r4, [pc, #2792]	; c9d4 <noPixel$+0x6c>
    bee8:	e3a0305a 	mov	r3, #90	; 0x5a
    beec:	e3a0201e 	mov	r2, #30
    bef0:	e3a010c8 	mov	r1, #200	; 0xc8
    bef4:	e3a00057 	mov	r0, #87	; 0x57
    bef8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    befc:	eb0002f6 	bl	cadc <drawRect>
    bf00:	e59f4acc 	ldr	r4, [pc, #2764]	; c9d4 <noPixel$+0x6c>
    bf04:	e3a0305a 	mov	r3, #90	; 0x5a
    bf08:	e3a0201e 	mov	r2, #30
    bf0c:	e3a010c8 	mov	r1, #200	; 0xc8
    bf10:	e3a00093 	mov	r0, #147	; 0x93
    bf14:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf18:	eb0002ef 	bl	cadc <drawRect>
    bf1c:	e59f4ab0 	ldr	r4, [pc, #2736]	; c9d4 <noPixel$+0x6c>
    bf20:	e3a0305a 	mov	r3, #90	; 0x5a
    bf24:	e3a0201e 	mov	r2, #30
    bf28:	e3a01f41 	mov	r1, #260	; 0x104
    bf2c:	e3a00075 	mov	r0, #117	; 0x75
    bf30:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf34:	eb0002e8 	bl	cadc <drawRect>
    bf38:	e59f4a94 	ldr	r4, [pc, #2708]	; c9d4 <noPixel$+0x6c>
    bf3c:	e3a0305a 	mov	r3, #90	; 0x5a
    bf40:	e3a0201e 	mov	r2, #30
    bf44:	e3a010e6 	mov	r1, #230	; 0xe6
    bf48:	e3a000bb 	mov	r0, #187	; 0xbb
    bf4c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf50:	eb0002e1 	bl	cadc <drawRect>
    bf54:	e59f4a78 	ldr	r4, [pc, #2680]	; c9d4 <noPixel$+0x6c>
    bf58:	e3a0305a 	mov	r3, #90	; 0x5a
    bf5c:	e3a0201e 	mov	r2, #30
    bf60:	e3a010e6 	mov	r1, #230	; 0xe6
    bf64:	e3a000f7 	mov	r0, #247	; 0xf7
    bf68:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf6c:	eb0002da 	bl	cadc <drawRect>
    bf70:	e59f4a5c 	ldr	r4, [pc, #2652]	; c9d4 <noPixel$+0x6c>
    bf74:	e3a0301e 	mov	r3, #30
    bf78:	e3a0201e 	mov	r2, #30
    bf7c:	e3a010c8 	mov	r1, #200	; 0xc8
    bf80:	e3a000d9 	mov	r0, #217	; 0xd9
    bf84:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bf88:	eb0002d3 	bl	cadc <drawRect>
    bf8c:	e59f4a40 	ldr	r4, [pc, #2624]	; c9d4 <noPixel$+0x6c>
    bf90:	e3a0301e 	mov	r3, #30
    bf94:	e3a0201e 	mov	r2, #30
    bf98:	e3a01d05 	mov	r1, #320	; 0x140
    bf9c:	e3a000d9 	mov	r0, #217	; 0xd9
    bfa0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bfa4:	eb0002cc 	bl	cadc <drawRect>
    bfa8:	e59f4a24 	ldr	r4, [pc, #2596]	; c9d4 <noPixel$+0x6c>
    bfac:	e3a03078 	mov	r3, #120	; 0x78
    bfb0:	e3a0201e 	mov	r2, #30
    bfb4:	e3a010c8 	mov	r1, #200	; 0xc8
    bfb8:	e59f0a18 	ldr	r0, [pc, #2584]	; c9d8 <noPixel$+0x70>
    bfbc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bfc0:	eb0002c5 	bl	cadc <drawRect>
    bfc4:	e59f4a08 	ldr	r4, [pc, #2568]	; c9d4 <noPixel$+0x6c>
    bfc8:	e3a03078 	mov	r3, #120	; 0x78
    bfcc:	e3a0201e 	mov	r2, #30
    bfd0:	e3a010c8 	mov	r1, #200	; 0xc8
    bfd4:	e59f0a00 	ldr	r0, [pc, #2560]	; c9dc <noPixel$+0x74>
    bfd8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bfdc:	eb0002be 	bl	cadc <drawRect>
    bfe0:	e59f49ec 	ldr	r4, [pc, #2540]	; c9d4 <noPixel$+0x6c>
    bfe4:	e3a0301e 	mov	r3, #30
    bfe8:	e3a0201e 	mov	r2, #30
    bfec:	e3a01d05 	mov	r1, #320	; 0x140
    bff0:	e59f09e8 	ldr	r0, [pc, #2536]	; c9e0 <noPixel$+0x78>
    bff4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    bff8:	eb0002b7 	bl	cadc <drawRect>
    bffc:	e59f49d0 	ldr	r4, [pc, #2512]	; c9d4 <noPixel$+0x6c>
    c000:	e3a03078 	mov	r3, #120	; 0x78
    c004:	e3a0201e 	mov	r2, #30
    c008:	e3a010c8 	mov	r1, #200	; 0xc8
    c00c:	e59f09a8 	ldr	r0, [pc, #2472]	; c9bc <noPixel$+0x54>
    c010:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c014:	eb0002b0 	bl	cadc <drawRect>
    c018:	e59f49b4 	ldr	r4, [pc, #2484]	; c9d4 <noPixel$+0x6c>
    c01c:	e3a03078 	mov	r3, #120	; 0x78
    c020:	e3a0201e 	mov	r2, #30
    c024:	e3a010c8 	mov	r1, #200	; 0xc8
    c028:	e59f09b4 	ldr	r0, [pc, #2484]	; c9e4 <noPixel$+0x7c>
    c02c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c030:	eb0002a9 	bl	cadc <drawRect>
    c034:	e59f4998 	ldr	r4, [pc, #2456]	; c9d4 <noPixel$+0x6c>
    c038:	e3a03078 	mov	r3, #120	; 0x78
    c03c:	e3a0201e 	mov	r2, #30
    c040:	e3a010c8 	mov	r1, #200	; 0xc8
    c044:	e59f099c 	ldr	r0, [pc, #2460]	; c9e8 <noPixel$+0x80>
    c048:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c04c:	eb0002a2 	bl	cadc <drawRect>
    c050:	e59f497c 	ldr	r4, [pc, #2428]	; c9d4 <noPixel$+0x6c>
    c054:	e3a0301e 	mov	r3, #30
    c058:	e3a0201e 	mov	r2, #30
    c05c:	e3a01d05 	mov	r1, #320	; 0x140
    c060:	e59f0984 	ldr	r0, [pc, #2436]	; c9ec <noPixel$+0x84>
    c064:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c068:	eb00029b 	bl	cadc <drawRect>
    c06c:	e59f4960 	ldr	r4, [pc, #2400]	; c9d4 <noPixel$+0x6c>
    c070:	e3a0301e 	mov	r3, #30
    c074:	e3a0201e 	mov	r2, #30
    c078:	e3a01d05 	mov	r1, #320	; 0x140
    c07c:	e59f096c 	ldr	r0, [pc, #2412]	; c9f0 <noPixel$+0x88>
    c080:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c084:	eb000294 	bl	cadc <drawRect>
    c088:	e59f4944 	ldr	r4, [pc, #2372]	; c9d4 <noPixel$+0x6c>
    c08c:	e3a0301e 	mov	r3, #30
    c090:	e3a0205a 	mov	r2, #90	; 0x5a
    c094:	e3a010c8 	mov	r1, #200	; 0xc8
    c098:	e59f0954 	ldr	r0, [pc, #2388]	; c9f4 <noPixel$+0x8c>
    c09c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c0a0:	eb00028d 	bl	cadc <drawRect>
    c0a4:	e59f4928 	ldr	r4, [pc, #2344]	; c9d4 <noPixel$+0x6c>
    c0a8:	e3a0301e 	mov	r3, #30
    c0ac:	e3a0205a 	mov	r2, #90	; 0x5a
    c0b0:	e3a01d05 	mov	r1, #320	; 0x140
    c0b4:	e59f0938 	ldr	r0, [pc, #2360]	; c9f4 <noPixel$+0x8c>
    c0b8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c0bc:	eb000286 	bl	cadc <drawRect>
    c0c0:	e59f490c 	ldr	r4, [pc, #2316]	; c9d4 <noPixel$+0x6c>
    c0c4:	e3a0305a 	mov	r3, #90	; 0x5a
    c0c8:	e3a0201e 	mov	r2, #30
    c0cc:	e3a010e6 	mov	r1, #230	; 0xe6
    c0d0:	e59f0920 	ldr	r0, [pc, #2336]	; c9f8 <noPixel$+0x90>
    c0d4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c0d8:	eb00027f 	bl	cadc <drawRect>
    c0dc:	e59f48f0 	ldr	r4, [pc, #2288]	; c9d4 <noPixel$+0x6c>
    c0e0:	e3a03096 	mov	r3, #150	; 0x96
    c0e4:	e3a0201e 	mov	r2, #30
    c0e8:	e3a010c8 	mov	r1, #200	; 0xc8
    c0ec:	e59f0908 	ldr	r0, [pc, #2312]	; c9fc <noPixel$+0x94>
    c0f0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c0f4:	eb000278 	bl	cadc <drawRect>
    c0f8:	e59f48d4 	ldr	r4, [pc, #2260]	; c9d4 <noPixel$+0x6c>
    c0fc:	e3a0301e 	mov	r3, #30
    c100:	e3a0201e 	mov	r2, #30
    c104:	e3a010e6 	mov	r1, #230	; 0xe6
    c108:	e59f08f0 	ldr	r0, [pc, #2288]	; ca00 <noPixel$+0x98>
    c10c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c110:	eb000271 	bl	cadc <drawRect>
    c114:	e59f48b8 	ldr	r4, [pc, #2232]	; c9d4 <noPixel$+0x6c>
    c118:	e3a0301e 	mov	r3, #30
    c11c:	e3a0201e 	mov	r2, #30
    c120:	e3a01f41 	mov	r1, #260	; 0x104
    c124:	e59f08d8 	ldr	r0, [pc, #2264]	; ca04 <noPixel$+0x9c>
    c128:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c12c:	eb00026a 	bl	cadc <drawRect>
    c130:	e59f489c 	ldr	r4, [pc, #2204]	; c9d4 <noPixel$+0x6c>
    c134:	e3a0301e 	mov	r3, #30
    c138:	e3a0201e 	mov	r2, #30
    c13c:	e59f18c4 	ldr	r1, [pc, #2244]	; ca08 <noPixel$+0xa0>
    c140:	e59f08c4 	ldr	r0, [pc, #2244]	; ca0c <noPixel$+0xa4>
    c144:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c148:	eb000263 	bl	cadc <drawRect>
    c14c:	e59f4880 	ldr	r4, [pc, #2176]	; c9d4 <noPixel$+0x6c>
    c150:	e3a03096 	mov	r3, #150	; 0x96
    c154:	e3a0201e 	mov	r2, #30
    c158:	e3a010c8 	mov	r1, #200	; 0xc8
    c15c:	e59f08ac 	ldr	r0, [pc, #2220]	; ca10 <noPixel$+0xa8>
    c160:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c164:	eb00025c 	bl	cadc <drawRect>
    c168:	e59f4864 	ldr	r4, [pc, #2148]	; c9d4 <noPixel$+0x6c>
    c16c:	e3a0305a 	mov	r3, #90	; 0x5a
    c170:	e3a0201e 	mov	r2, #30
    c174:	e3a010c8 	mov	r1, #200	; 0xc8
    c178:	e59f0894 	ldr	r0, [pc, #2196]	; ca14 <noPixel$+0xac>
    c17c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c180:	eb000255 	bl	cadc <drawRect>
    c184:	e59f4848 	ldr	r4, [pc, #2120]	; c9d4 <noPixel$+0x6c>
    c188:	e3a0301e 	mov	r3, #30
    c18c:	e3a0201e 	mov	r2, #30
    c190:	e3a01d05 	mov	r1, #320	; 0x140
    c194:	e59f0878 	ldr	r0, [pc, #2168]	; ca14 <noPixel$+0xac>
    c198:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c19c:	eb00024e 	bl	cadc <drawRect>
    c1a0:	e8bd8010 	pop	{r4, pc}

0000c1a4 <drawLossScreen>:
    c1a4:	e92d4010 	push	{r4, lr}
    c1a8:	e59f4868 	ldr	r4, [pc, #2152]	; ca18 <noPixel$+0xb0>
    c1ac:	e3a0305a 	mov	r3, #90	; 0x5a
    c1b0:	e3a0201e 	mov	r2, #30
    c1b4:	e3a010c8 	mov	r1, #200	; 0xc8
    c1b8:	e3a00075 	mov	r0, #117	; 0x75
    c1bc:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c1c0:	eb000245 	bl	cadc <drawRect>
    c1c4:	e59f484c 	ldr	r4, [pc, #2124]	; ca18 <noPixel$+0xb0>
    c1c8:	e3a0305a 	mov	r3, #90	; 0x5a
    c1cc:	e3a0201e 	mov	r2, #30
    c1d0:	e3a010c8 	mov	r1, #200	; 0xc8
    c1d4:	e3a000b1 	mov	r0, #177	; 0xb1
    c1d8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c1dc:	eb00023e 	bl	cadc <drawRect>
    c1e0:	e59f4830 	ldr	r4, [pc, #2096]	; ca18 <noPixel$+0xb0>
    c1e4:	e3a0305a 	mov	r3, #90	; 0x5a
    c1e8:	e3a0201e 	mov	r2, #30
    c1ec:	e3a01f41 	mov	r1, #260	; 0x104
    c1f0:	e3a00093 	mov	r0, #147	; 0x93
    c1f4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c1f8:	eb000237 	bl	cadc <drawRect>
    c1fc:	e59f4814 	ldr	r4, [pc, #2068]	; ca18 <noPixel$+0xb0>
    c200:	e3a0305a 	mov	r3, #90	; 0x5a
    c204:	e3a0201e 	mov	r2, #30
    c208:	e3a010e6 	mov	r1, #230	; 0xe6
    c20c:	e3a000d9 	mov	r0, #217	; 0xd9
    c210:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c214:	eb000230 	bl	cadc <drawRect>
    c218:	e59f47f8 	ldr	r4, [pc, #2040]	; ca18 <noPixel$+0xb0>
    c21c:	e3a0305a 	mov	r3, #90	; 0x5a
    c220:	e3a0201e 	mov	r2, #30
    c224:	e3a010e6 	mov	r1, #230	; 0xe6
    c228:	e59f07ec 	ldr	r0, [pc, #2028]	; ca1c <noPixel$+0xb4>
    c22c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c230:	eb000229 	bl	cadc <drawRect>
    c234:	e59f47dc 	ldr	r4, [pc, #2012]	; ca18 <noPixel$+0xb0>
    c238:	e3a0301e 	mov	r3, #30
    c23c:	e3a0201e 	mov	r2, #30
    c240:	e3a010c8 	mov	r1, #200	; 0xc8
    c244:	e3a000f7 	mov	r0, #247	; 0xf7
    c248:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c24c:	eb000222 	bl	cadc <drawRect>
    c250:	e59f47c0 	ldr	r4, [pc, #1984]	; ca18 <noPixel$+0xb0>
    c254:	e3a0301e 	mov	r3, #30
    c258:	e3a0201e 	mov	r2, #30
    c25c:	e3a01d05 	mov	r1, #320	; 0x140
    c260:	e3a000f7 	mov	r0, #247	; 0xf7
    c264:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c268:	eb00021b 	bl	cadc <drawRect>
    c26c:	e59f47a4 	ldr	r4, [pc, #1956]	; ca18 <noPixel$+0xb0>
    c270:	e3a03078 	mov	r3, #120	; 0x78
    c274:	e3a0201e 	mov	r2, #30
    c278:	e3a010c8 	mov	r1, #200	; 0xc8
    c27c:	e59f075c 	ldr	r0, [pc, #1884]	; c9e0 <noPixel$+0x78>
    c280:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c284:	eb000214 	bl	cadc <drawRect>
    c288:	e59f4788 	ldr	r4, [pc, #1928]	; ca18 <noPixel$+0xb0>
    c28c:	e3a03078 	mov	r3, #120	; 0x78
    c290:	e3a0201e 	mov	r2, #30
    c294:	e3a010c8 	mov	r1, #200	; 0xc8
    c298:	e59f0780 	ldr	r0, [pc, #1920]	; ca20 <noPixel$+0xb8>
    c29c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c2a0:	eb00020d 	bl	cadc <drawRect>
    c2a4:	e59f476c 	ldr	r4, [pc, #1900]	; ca18 <noPixel$+0xb0>
    c2a8:	e3a0301e 	mov	r3, #30
    c2ac:	e3a0201e 	mov	r2, #30
    c2b0:	e3a01d05 	mov	r1, #320	; 0x140
    c2b4:	e59f0720 	ldr	r0, [pc, #1824]	; c9dc <noPixel$+0x74>
    c2b8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c2bc:	eb000206 	bl	cadc <drawRect>
    c2c0:	e59f4750 	ldr	r4, [pc, #1872]	; ca18 <noPixel$+0xb0>
    c2c4:	e3a03096 	mov	r3, #150	; 0x96
    c2c8:	e3a0201e 	mov	r2, #30
    c2cc:	e3a010c8 	mov	r1, #200	; 0xc8
    c2d0:	e59f0714 	ldr	r0, [pc, #1812]	; c9ec <noPixel$+0x84>
    c2d4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c2d8:	eb0001ff 	bl	cadc <drawRect>
    c2dc:	e59f4734 	ldr	r4, [pc, #1844]	; ca18 <noPixel$+0xb0>
    c2e0:	e3a0301e 	mov	r3, #30
    c2e4:	e3a0203c 	mov	r2, #60	; 0x3c
    c2e8:	e3a01d05 	mov	r1, #320	; 0x140
    c2ec:	e59f06f0 	ldr	r0, [pc, #1776]	; c9e4 <noPixel$+0x7c>
    c2f0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c2f4:	eb0001f8 	bl	cadc <drawRect>
    c2f8:	e59f4718 	ldr	r4, [pc, #1816]	; ca18 <noPixel$+0xb0>
    c2fc:	e3a0305a 	mov	r3, #90	; 0x5a
    c300:	e3a0201e 	mov	r2, #30
    c304:	e3a010e6 	mov	r1, #230	; 0xe6
    c308:	e59f0714 	ldr	r0, [pc, #1812]	; ca24 <noPixel$+0xbc>
    c30c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c310:	eb0001f1 	bl	cadc <drawRect>
    c314:	e59f46fc 	ldr	r4, [pc, #1788]	; ca18 <noPixel$+0xb0>
    c318:	e3a0305a 	mov	r3, #90	; 0x5a
    c31c:	e3a0201e 	mov	r2, #30
    c320:	e3a010e6 	mov	r1, #230	; 0xe6
    c324:	e59f06cc 	ldr	r0, [pc, #1740]	; c9f8 <noPixel$+0x90>
    c328:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c32c:	eb0001ea 	bl	cadc <drawRect>
    c330:	e59f46e0 	ldr	r4, [pc, #1760]	; ca18 <noPixel$+0xb0>
    c334:	e3a0301e 	mov	r3, #30
    c338:	e3a0201e 	mov	r2, #30
    c33c:	e3a010c8 	mov	r1, #200	; 0xc8
    c340:	e59f06ac 	ldr	r0, [pc, #1708]	; c9f4 <noPixel$+0x8c>
    c344:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c348:	eb0001e3 	bl	cadc <drawRect>
    c34c:	e59f46c4 	ldr	r4, [pc, #1732]	; ca18 <noPixel$+0xb0>
    c350:	e3a0301e 	mov	r3, #30
    c354:	e3a0201e 	mov	r2, #30
    c358:	e3a01d05 	mov	r1, #320	; 0x140
    c35c:	e59f0690 	ldr	r0, [pc, #1680]	; c9f4 <noPixel$+0x8c>
    c360:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c364:	eb0001dc 	bl	cadc <drawRect>
    c368:	e59f46a8 	ldr	r4, [pc, #1704]	; ca18 <noPixel$+0xb0>
    c36c:	e3a0301e 	mov	r3, #30
    c370:	e3a0205a 	mov	r2, #90	; 0x5a
    c374:	e3a010c8 	mov	r1, #200	; 0xc8
    c378:	e59f06a8 	ldr	r0, [pc, #1704]	; ca28 <noPixel$+0xc0>
    c37c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c380:	eb0001d5 	bl	cadc <drawRect>
    c384:	e59f468c 	ldr	r4, [pc, #1676]	; ca18 <noPixel$+0xb0>
    c388:	e3a0301e 	mov	r3, #30
    c38c:	e3a0201e 	mov	r2, #30
    c390:	e3a010e6 	mov	r1, #230	; 0xe6
    c394:	e59f068c 	ldr	r0, [pc, #1676]	; ca28 <noPixel$+0xc0>
    c398:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c39c:	eb0001ce 	bl	cadc <drawRect>
    c3a0:	e59f4670 	ldr	r4, [pc, #1648]	; ca18 <noPixel$+0xb0>
    c3a4:	e3a0301e 	mov	r3, #30
    c3a8:	e3a0205a 	mov	r2, #90	; 0x5a
    c3ac:	e3a01f41 	mov	r1, #260	; 0x104
    c3b0:	e59f0670 	ldr	r0, [pc, #1648]	; ca28 <noPixel$+0xc0>
    c3b4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c3b8:	eb0001c7 	bl	cadc <drawRect>
    c3bc:	e59f4654 	ldr	r4, [pc, #1620]	; ca18 <noPixel$+0xb0>
    c3c0:	e3a0301e 	mov	r3, #30
    c3c4:	e3a0201e 	mov	r2, #30
    c3c8:	e59f1638 	ldr	r1, [pc, #1592]	; ca08 <noPixel$+0xa0>
    c3cc:	e59f062c 	ldr	r0, [pc, #1580]	; ca00 <noPixel$+0x98>
    c3d0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c3d4:	eb0001c0 	bl	cadc <drawRect>
    c3d8:	e59f4638 	ldr	r4, [pc, #1592]	; ca18 <noPixel$+0xb0>
    c3dc:	e3a0301e 	mov	r3, #30
    c3e0:	e3a0205a 	mov	r2, #90	; 0x5a
    c3e4:	e3a01d05 	mov	r1, #320	; 0x140
    c3e8:	e59f0638 	ldr	r0, [pc, #1592]	; ca28 <noPixel$+0xc0>
    c3ec:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c3f0:	eb0001b9 	bl	cadc <drawRect>
    c3f4:	e59f461c 	ldr	r4, [pc, #1564]	; ca18 <noPixel$+0xb0>
    c3f8:	e3a03096 	mov	r3, #150	; 0x96
    c3fc:	e3a0201e 	mov	r2, #30
    c400:	e3a010c8 	mov	r1, #200	; 0xc8
    c404:	e59f0620 	ldr	r0, [pc, #1568]	; ca2c <noPixel$+0xc4>
    c408:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c40c:	eb0001b2 	bl	cadc <drawRect>
    c410:	e59f4600 	ldr	r4, [pc, #1536]	; ca18 <noPixel$+0xb0>
    c414:	e3a0301e 	mov	r3, #30
    c418:	e3a0203c 	mov	r2, #60	; 0x3c
    c41c:	e3a010c8 	mov	r1, #200	; 0xc8
    c420:	e59f0608 	ldr	r0, [pc, #1544]	; ca30 <noPixel$+0xc8>
    c424:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c428:	eb0001ab 	bl	cadc <drawRect>
    c42c:	e59f45e4 	ldr	r4, [pc, #1508]	; ca18 <noPixel$+0xb0>
    c430:	e3a0301e 	mov	r3, #30
    c434:	e3a0203c 	mov	r2, #60	; 0x3c
    c438:	e3a01f41 	mov	r1, #260	; 0x104
    c43c:	e59f05ec 	ldr	r0, [pc, #1516]	; ca30 <noPixel$+0xc8>
    c440:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c444:	eb0001a4 	bl	cadc <drawRect>
    c448:	e59f45c8 	ldr	r4, [pc, #1480]	; ca18 <noPixel$+0xb0>
    c44c:	e3a0301e 	mov	r3, #30
    c450:	e3a0203c 	mov	r2, #60	; 0x3c
    c454:	e3a01d05 	mov	r1, #320	; 0x140
    c458:	e59f05d0 	ldr	r0, [pc, #1488]	; ca30 <noPixel$+0xc8>
    c45c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c460:	eb00019d 	bl	cadc <drawRect>
    c464:	e8bd8010 	pop	{r4, pc}

0000c468 <drawMenuButton>:
    c468:	e92d4610 	push	{r4, r9, sl, lr}
    c46c:	e1a09000 	mov	r9, r0
    c470:	e1a0a001 	mov	sl, r1
    c474:	e3a04000 	mov	r4, #0
    c478:	e3a03032 	mov	r3, #50	; 0x32
    c47c:	e3a02096 	mov	r2, #150	; 0x96
    c480:	e1a0100a 	mov	r1, sl
    c484:	e1a00009 	mov	r0, r9
    c488:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c48c:	eb000192 	bl	cadc <drawRect>
    c490:	e2899005 	add	r9, r9, #5
    c494:	e28aa005 	add	sl, sl, #5
    c498:	e59f4594 	ldr	r4, [pc, #1428]	; ca34 <noPixel$+0xcc>
    c49c:	e3a03028 	mov	r3, #40	; 0x28
    c4a0:	e3a0208c 	mov	r2, #140	; 0x8c
    c4a4:	e1a0100a 	mov	r1, sl
    c4a8:	e1a00009 	mov	r0, r9
    c4ac:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c4b0:	eb000189 	bl	cadc <drawRect>
    c4b4:	e2899005 	add	r9, r9, #5
    c4b8:	e28aa005 	add	sl, sl, #5
    c4bc:	e59f4504 	ldr	r4, [pc, #1284]	; c9c8 <noPixel$+0x60>
    c4c0:	e3a0301e 	mov	r3, #30
    c4c4:	e3a0201e 	mov	r2, #30
    c4c8:	e1a0100a 	mov	r1, sl
    c4cc:	e1a00009 	mov	r0, r9
    c4d0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c4d4:	eb000180 	bl	cadc <drawRect>
    c4d8:	e8bd8610 	pop	{r4, r9, sl, pc}

0000c4dc <drawPaused>:
    c4dc:	e92d4010 	push	{r4, lr}
    c4e0:	e3a04000 	mov	r4, #0
    c4e4:	e3a03096 	mov	r3, #150	; 0x96
    c4e8:	e3a0201e 	mov	r2, #30
    c4ec:	e3a010ae 	mov	r1, #174	; 0xae
    c4f0:	e3a000e4 	mov	r0, #228	; 0xe4
    c4f4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c4f8:	eb000177 	bl	cadc <drawRect>
    c4fc:	e3a04000 	mov	r4, #0
    c500:	e3a0301e 	mov	r3, #30
    c504:	e3a0203c 	mov	r2, #60	; 0x3c
    c508:	e3a010ae 	mov	r1, #174	; 0xae
    c50c:	e59f0524 	ldr	r0, [pc, #1316]	; ca38 <noPixel$+0xd0>
    c510:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c514:	eb000170 	bl	cadc <drawRect>
    c518:	e3a04000 	mov	r4, #0
    c51c:	e3a0301e 	mov	r3, #30
    c520:	e3a0203c 	mov	r2, #60	; 0x3c
    c524:	e3a010ea 	mov	r1, #234	; 0xea
    c528:	e59f0508 	ldr	r0, [pc, #1288]	; ca38 <noPixel$+0xd0>
    c52c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c530:	eb000169 	bl	cadc <drawRect>
    c534:	e3a04000 	mov	r4, #0
    c538:	e3a0301e 	mov	r3, #30
    c53c:	e3a0201e 	mov	r2, #30
    c540:	e3a010cc 	mov	r1, #204	; 0xcc
    c544:	e3a00e12 	mov	r0, #288	; 0x120
    c548:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c54c:	eb000162 	bl	cadc <drawRect>
    c550:	e3a04000 	mov	r4, #0
    c554:	e3a03078 	mov	r3, #120	; 0x78
    c558:	e3a0201e 	mov	r2, #30
    c55c:	e3a010cc 	mov	r1, #204	; 0xcc
    c560:	e3a00f52 	mov	r0, #328	; 0x148
    c564:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c568:	eb00015b 	bl	cadc <drawRect>
    c56c:	e3a04000 	mov	r4, #0
    c570:	e3a03078 	mov	r3, #120	; 0x78
    c574:	e3a0201e 	mov	r2, #30
    c578:	e3a010cc 	mov	r1, #204	; 0xcc
    c57c:	e3a00f61 	mov	r0, #388	; 0x184
    c580:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c584:	eb000154 	bl	cadc <drawRect>
    c588:	e3a04000 	mov	r4, #0
    c58c:	e3a0301e 	mov	r3, #30
    c590:	e3a0201e 	mov	r2, #30
    c594:	e3a010ae 	mov	r1, #174	; 0xae
    c598:	e59f049c 	ldr	r0, [pc, #1180]	; ca3c <noPixel$+0xd4>
    c59c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c5a0:	eb00014d 	bl	cadc <drawRect>
    c5a4:	e3a04000 	mov	r4, #0
    c5a8:	e3a0301e 	mov	r3, #30
    c5ac:	e3a0201e 	mov	r2, #30
    c5b0:	e3a010ea 	mov	r1, #234	; 0xea
    c5b4:	e59f0480 	ldr	r0, [pc, #1152]	; ca3c <noPixel$+0xd4>
    c5b8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c5bc:	eb000146 	bl	cadc <drawRect>
    c5c0:	e3a04000 	mov	r4, #0
    c5c4:	e3a03078 	mov	r3, #120	; 0x78
    c5c8:	e3a0201e 	mov	r2, #30
    c5cc:	e3a010ae 	mov	r1, #174	; 0xae
    c5d0:	e3a00f6b 	mov	r0, #428	; 0x1ac
    c5d4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c5d8:	eb00013f 	bl	cadc <drawRect>
    c5dc:	e3a04000 	mov	r4, #0
    c5e0:	e3a03078 	mov	r3, #120	; 0x78
    c5e4:	e3a0201e 	mov	r2, #30
    c5e8:	e3a010ae 	mov	r1, #174	; 0xae
    c5ec:	e3a00f7a 	mov	r0, #488	; 0x1e8
    c5f0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c5f4:	eb000138 	bl	cadc <drawRect>
    c5f8:	e3a04000 	mov	r4, #0
    c5fc:	e3a0301e 	mov	r3, #30
    c600:	e3a0201e 	mov	r2, #30
    c604:	e59f1434 	ldr	r1, [pc, #1076]	; ca40 <noPixel$+0xd8>
    c608:	e59f0434 	ldr	r0, [pc, #1076]	; ca44 <noPixel$+0xdc>
    c60c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c610:	eb000131 	bl	cadc <drawRect>
    c614:	e3a04000 	mov	r4, #0
    c618:	e3a03096 	mov	r3, #150	; 0x96
    c61c:	e3a0204b 	mov	r2, #75	; 0x4b
    c620:	e3a010ae 	mov	r1, #174	; 0xae
    c624:	e3a00e21 	mov	r0, #528	; 0x210
    c628:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c62c:	eb00012a 	bl	cadc <drawRect>
    c630:	e59f4350 	ldr	r4, [pc, #848]	; c988 <noPixel$+0x20>
    c634:	e3a0301e 	mov	r3, #30
    c638:	e3a0202d 	mov	r2, #45	; 0x2d
    c63c:	e3a01f42 	mov	r1, #264	; 0x108
    c640:	e3a00e21 	mov	r0, #528	; 0x210
    c644:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c648:	eb000123 	bl	cadc <drawRect>
    c64c:	e59f4334 	ldr	r4, [pc, #820]	; c988 <noPixel$+0x20>
    c650:	e3a0301e 	mov	r3, #30
    c654:	e3a0202d 	mov	r2, #45	; 0x2d
    c658:	e3a010cc 	mov	r1, #204	; 0xcc
    c65c:	e59f03e4 	ldr	r0, [pc, #996]	; ca48 <noPixel$+0xe0>
    c660:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c664:	eb00011c 	bl	cadc <drawRect>
    c668:	e3a04000 	mov	r4, #0
    c66c:	e3a03096 	mov	r3, #150	; 0x96
    c670:	e3a0204b 	mov	r2, #75	; 0x4b
    c674:	e3a010ae 	mov	r1, #174	; 0xae
    c678:	e59f03cc 	ldr	r0, [pc, #972]	; ca4c <noPixel$+0xe4>
    c67c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c680:	eb000115 	bl	cadc <drawRect>
    c684:	e59f42fc 	ldr	r4, [pc, #764]	; c988 <noPixel$+0x20>
    c688:	e3a0301e 	mov	r3, #30
    c68c:	e3a0202d 	mov	r2, #45	; 0x2d
    c690:	e3a01f42 	mov	r1, #264	; 0x108
    c694:	e59f03b4 	ldr	r0, [pc, #948]	; ca50 <noPixel$+0xe8>
    c698:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c69c:	eb00010e 	bl	cadc <drawRect>
    c6a0:	e59f42e0 	ldr	r4, [pc, #736]	; c988 <noPixel$+0x20>
    c6a4:	e3a0301e 	mov	r3, #30
    c6a8:	e3a0202d 	mov	r2, #45	; 0x2d
    c6ac:	e3a010cc 	mov	r1, #204	; 0xcc
    c6b0:	e59f0398 	ldr	r0, [pc, #920]	; ca50 <noPixel$+0xe8>
    c6b4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c6b8:	eb000107 	bl	cadc <drawRect>
    c6bc:	e3a04000 	mov	r4, #0
    c6c0:	e3a03096 	mov	r3, #150	; 0x96
    c6c4:	e3a0201e 	mov	r2, #30
    c6c8:	e3a010ae 	mov	r1, #174	; 0xae
    c6cc:	e59f0380 	ldr	r0, [pc, #896]	; ca54 <noPixel$+0xec>
    c6d0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c6d4:	eb000100 	bl	cadc <drawRect>
    c6d8:	e3a04000 	mov	r4, #0
    c6dc:	e3a0301e 	mov	r3, #30
    c6e0:	e3a0201e 	mov	r2, #30
    c6e4:	e3a010ae 	mov	r1, #174	; 0xae
    c6e8:	e3a00fb6 	mov	r0, #728	; 0x2d8
    c6ec:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c6f0:	eb0000f9 	bl	cadc <drawRect>
    c6f4:	e3a04000 	mov	r4, #0
    c6f8:	e3a0301e 	mov	r3, #30
    c6fc:	e3a0201e 	mov	r2, #30
    c700:	e59f1338 	ldr	r1, [pc, #824]	; ca40 <noPixel$+0xd8>
    c704:	e3a00fb6 	mov	r0, #728	; 0x2d8
    c708:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c70c:	eb0000f2 	bl	cadc <drawRect>
    c710:	e3a04000 	mov	r4, #0
    c714:	e3a0305a 	mov	r3, #90	; 0x5a
    c718:	e3a0201e 	mov	r2, #30
    c71c:	e3a010cc 	mov	r1, #204	; 0xcc
    c720:	e59f0330 	ldr	r0, [pc, #816]	; ca58 <noPixel$+0xf0>
    c724:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c728:	eb0000eb 	bl	cadc <drawRect>
    c72c:	e8bd8010 	pop	{r4, pc}

0000c730 <drawTitle>:
    c730:	e92d4010 	push	{r4, lr}
    c734:	e3a04000 	mov	r4, #0
    c738:	e3a0301e 	mov	r3, #30
    c73c:	e3a0205a 	mov	r2, #90	; 0x5a
    c740:	e3a0106d 	mov	r1, #109	; 0x6d
    c744:	e3a000e3 	mov	r0, #227	; 0xe3
    c748:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c74c:	eb0000e2 	bl	cadc <drawRect>
    c750:	e3a04000 	mov	r4, #0
    c754:	e3a03078 	mov	r3, #120	; 0x78
    c758:	e3a0201e 	mov	r2, #30
    c75c:	e3a0108b 	mov	r1, #139	; 0x8b
    c760:	e59f02f4 	ldr	r0, [pc, #756]	; ca5c <noPixel$+0xf4>
    c764:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c768:	eb0000db 	bl	cadc <drawRect>
    c76c:	e3a04000 	mov	r4, #0
    c770:	e3a03096 	mov	r3, #150	; 0x96
    c774:	e3a0204b 	mov	r2, #75	; 0x4b
    c778:	e3a0106d 	mov	r1, #109	; 0x6d
    c77c:	e59f02dc 	ldr	r0, [pc, #732]	; ca60 <noPixel$+0xf8>
    c780:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c784:	eb0000d4 	bl	cadc <drawRect>
    c788:	e59f421c 	ldr	r4, [pc, #540]	; c9ac <noPixel$+0x44>
    c78c:	e3a0301e 	mov	r3, #30
    c790:	e3a0202d 	mov	r2, #45	; 0x2d
    c794:	e3a0108b 	mov	r1, #139	; 0x8b
    c798:	e59f02c4 	ldr	r0, [pc, #708]	; ca64 <noPixel$+0xfc>
    c79c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c7a0:	eb0000cd 	bl	cadc <drawRect>
    c7a4:	e59f4200 	ldr	r4, [pc, #512]	; c9ac <noPixel$+0x44>
    c7a8:	e3a0301e 	mov	r3, #30
    c7ac:	e3a0202d 	mov	r2, #45	; 0x2d
    c7b0:	e3a010c7 	mov	r1, #199	; 0xc7
    c7b4:	e59f02a8 	ldr	r0, [pc, #680]	; ca64 <noPixel$+0xfc>
    c7b8:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c7bc:	eb0000c6 	bl	cadc <drawRect>
    c7c0:	e3a04000 	mov	r4, #0
    c7c4:	e3a0301e 	mov	r3, #30
    c7c8:	e3a0205a 	mov	r2, #90	; 0x5a
    c7cc:	e3a0106d 	mov	r1, #109	; 0x6d
    c7d0:	e3a00f67 	mov	r0, #412	; 0x19c
    c7d4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c7d8:	eb0000bf 	bl	cadc <drawRect>
    c7dc:	e3a04000 	mov	r4, #0
    c7e0:	e3a03078 	mov	r3, #120	; 0x78
    c7e4:	e3a0201e 	mov	r2, #30
    c7e8:	e3a0108b 	mov	r1, #139	; 0x8b
    c7ec:	e59f0274 	ldr	r0, [pc, #628]	; ca68 <noPixel$+0x100>
    c7f0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c7f4:	eb0000b8 	bl	cadc <drawRect>
    c7f8:	e3a04000 	mov	r4, #0
    c7fc:	e3a0305a 	mov	r3, #90	; 0x5a
    c800:	e3a0205a 	mov	r2, #90	; 0x5a
    c804:	e3a0106d 	mov	r1, #109	; 0x6d
    c808:	e3a00c02 	mov	r0, #512	; 0x200
    c80c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c810:	eb0000b1 	bl	cadc <drawRect>
    c814:	e59f4190 	ldr	r4, [pc, #400]	; c9ac <noPixel$+0x44>
    c818:	e3a0301e 	mov	r3, #30
    c81c:	e3a0201e 	mov	r2, #30
    c820:	e3a0108b 	mov	r1, #139	; 0x8b
    c824:	e59f0240 	ldr	r0, [pc, #576]	; ca6c <noPixel$+0x104>
    c828:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c82c:	eb0000aa 	bl	cadc <drawRect>
    c830:	e3a04000 	mov	r4, #0
    c834:	e3a0303c 	mov	r3, #60	; 0x3c
    c838:	e3a0201e 	mov	r2, #30
    c83c:	e3a010c7 	mov	r1, #199	; 0xc7
    c840:	e3a00c02 	mov	r0, #512	; 0x200
    c844:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c848:	eb0000a3 	bl	cadc <drawRect>
    c84c:	e3a04000 	mov	r4, #0
    c850:	e3a0301e 	mov	r3, #30
    c854:	e3a0201e 	mov	r2, #30
    c858:	e3a010c7 	mov	r1, #199	; 0xc7
    c85c:	e59f020c 	ldr	r0, [pc, #524]	; ca70 <noPixel$+0x108>
    c860:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c864:	eb00009c 	bl	cadc <drawRect>
    c868:	e3a04000 	mov	r4, #0
    c86c:	e3a0301e 	mov	r3, #30
    c870:	e3a0201e 	mov	r2, #30
    c874:	e3a010e5 	mov	r1, #229	; 0xe5
    c878:	e3a00f8f 	mov	r0, #572	; 0x23c
    c87c:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c880:	eb000095 	bl	cadc <drawRect>
    c884:	e3a04000 	mov	r4, #0
    c888:	e3a0301e 	mov	r3, #30
    c88c:	e3a0205a 	mov	r2, #90	; 0x5a
    c890:	e3a0106d 	mov	r1, #109	; 0x6d
    c894:	e3a00f99 	mov	r0, #612	; 0x264
    c898:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c89c:	eb00008e 	bl	cadc <drawRect>
    c8a0:	e3a04000 	mov	r4, #0
    c8a4:	e3a0301e 	mov	r3, #30
    c8a8:	e3a0205a 	mov	r2, #90	; 0x5a
    c8ac:	e3a010e5 	mov	r1, #229	; 0xe5
    c8b0:	e3a00f99 	mov	r0, #612	; 0x264
    c8b4:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c8b8:	eb000087 	bl	cadc <drawRect>
    c8bc:	e3a04000 	mov	r4, #0
    c8c0:	e3a0305a 	mov	r3, #90	; 0x5a
    c8c4:	e3a0201e 	mov	r2, #30
    c8c8:	e3a0108b 	mov	r1, #139	; 0x8b
    c8cc:	e59f01a0 	ldr	r0, [pc, #416]	; ca74 <noPixel$+0x10c>
    c8d0:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c8d4:	eb000080 	bl	cadc <drawRect>
    c8d8:	e3a04000 	mov	r4, #0
    c8dc:	e3a03096 	mov	r3, #150	; 0x96
    c8e0:	e3a02050 	mov	r2, #80	; 0x50
    c8e4:	e3a0106d 	mov	r1, #109	; 0x6d
    c8e8:	e3a00fb2 	mov	r0, #712	; 0x2c8
    c8ec:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c8f0:	eb000079 	bl	cadc <drawRect>
    c8f4:	e59f40b0 	ldr	r4, [pc, #176]	; c9ac <noPixel$+0x44>
    c8f8:	e3a0301e 	mov	r3, #30
    c8fc:	e3a02032 	mov	r2, #50	; 0x32
    c900:	e3a0108b 	mov	r1, #139	; 0x8b
    c904:	e59f016c 	ldr	r0, [pc, #364]	; ca78 <noPixel$+0x110>
    c908:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c90c:	eb000072 	bl	cadc <drawRect>
    c910:	e59f4094 	ldr	r4, [pc, #148]	; c9ac <noPixel$+0x44>
    c914:	e3a0301e 	mov	r3, #30
    c918:	e3a02032 	mov	r2, #50	; 0x32
    c91c:	e3a010c7 	mov	r1, #199	; 0xc7
    c920:	e3a00fb2 	mov	r0, #712	; 0x2c8
    c924:	e92d001f 	push	{r0, r1, r2, r3, r4}
    c928:	eb00006b 	bl	cadc <drawRect>
    c92c:	e8bd8010 	pop	{r4, pc}

0000c930 <DrawChar>:
    c930:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    c934:	e1a09001 	mov	r9, r1
    c938:	e59f413c 	ldr	r4, [pc, #316]	; ca7c <noPixel$+0x114>
    c93c:	e0844200 	add	r4, r4, r0, lsl #4
    c940:	e1a06002 	mov	r6, r2

0000c944 <charLoop$>:
    c944:	e1a05003 	mov	r5, r3
    c948:	e3a08001 	mov	r8, #1
    c94c:	e4d47001 	ldrb	r7, [r4], #1

0000c950 <rowLoop$>:
    c950:	e1170008 	tst	r7, r8
    c954:	0a000003 	beq	c968 <noPixel$>
    c958:	e1a00005 	mov	r0, r5
    c95c:	e1a01006 	mov	r1, r6
    c960:	e1a02009 	mov	r2, r9
    c964:	eb000052 	bl	cab4 <drawPixel>

0000c968 <noPixel$>:
    c968:	e2855001 	add	r5, r5, #1
    c96c:	e1a08088 	lsl	r8, r8, #1
    c970:	e3180c01 	tst	r8, #256	; 0x100
    c974:	0afffff5 	beq	c950 <rowLoop$>
    c978:	e2866001 	add	r6, r6, #1
    c97c:	e314000f 	tst	r4, #15
    c980:	1affffef 	bne	c944 <charLoop$>
    c984:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    c988:	0000967f 	.word	0x0000967f
    c98c:	0000027a 	.word	0x0000027a
    c990:	000001b5 	.word	0x000001b5
    c994:	0000a870 	.word	0x0000a870
    c998:	000001e3 	.word	0x000001e3
    c99c:	00000221 	.word	0x00000221
    c9a0:	0000a860 	.word	0x0000a860
    c9a4:	000001eb 	.word	0x000001eb
    c9a8:	00009080 	.word	0x00009080
    c9ac:	0000297e 	.word	0x0000297e
    c9b0:	0000a810 	.word	0x0000a810
    c9b4:	00000172 	.word	0x00000172
    c9b8:	0000a850 	.word	0x0000a850
    c9bc:	000001e7 	.word	0x000001e7
    c9c0:	00000247 	.word	0x00000247
    c9c4:	00000285 	.word	0x00000285
    c9c8:	0000ffff 	.word	0x0000ffff
    c9cc:	000001df 	.word	0x000001df
    c9d0:	00000243 	.word	0x00000243
    c9d4:	00003707 	.word	0x00003707
    c9d8:	0000011f 	.word	0x0000011f
    c9dc:	0000015b 	.word	0x0000015b
    c9e0:	0000013d 	.word	0x0000013d
    c9e4:	00000223 	.word	0x00000223
    c9e8:	0000025f 	.word	0x0000025f
    c9ec:	00000205 	.word	0x00000205
    c9f0:	00000241 	.word	0x00000241
    c9f4:	00000287 	.word	0x00000287
    c9f8:	000002a5 	.word	0x000002a5
    c9fc:	000002eb 	.word	0x000002eb
    ca00:	00000309 	.word	0x00000309
    ca04:	00000327 	.word	0x00000327
    ca08:	00000122 	.word	0x00000122
    ca0c:	00000345 	.word	0x00000345
    ca10:	00000363 	.word	0x00000363
    ca14:	0000038b 	.word	0x0000038b
    ca18:	0000ff27 	.word	0x0000ff27
    ca1c:	00000115 	.word	0x00000115
    ca20:	00000179 	.word	0x00000179
    ca24:	00000269 	.word	0x00000269
    ca28:	000002cd 	.word	0x000002cd
    ca2c:	00000331 	.word	0x00000331
    ca30:	0000034f 	.word	0x0000034f
    ca34:	00000d7f 	.word	0x00000d7f
    ca38:	00000102 	.word	0x00000102
    ca3c:	00000166 	.word	0x00000166
    ca40:	00000126 	.word	0x00000126
    ca44:	000001ca 	.word	0x000001ca
    ca48:	0000022e 	.word	0x0000022e
    ca4c:	00000265 	.word	0x00000265
    ca50:	00000283 	.word	0x00000283
    ca54:	000002ba 	.word	0x000002ba
    ca58:	000002f6 	.word	0x000002f6
    ca5c:	00000101 	.word	0x00000101
    ca60:	00000147 	.word	0x00000147
    ca64:	00000165 	.word	0x00000165
    ca68:	000001ba 	.word	0x000001ba
    ca6c:	0000021e 	.word	0x0000021e
    ca70:	0000022d 	.word	0x0000022d
    ca74:	00000282 	.word	0x00000282
    ca78:	000002e6 	.word	0x000002e6
    ca7c:	0000a010 	.word	0x0000a010

0000ca80 <clearScreen>:
    ca80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ca84:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ca88:	e3a04000 	mov	r4, #0
    ca8c:	e3a05000 	mov	r5, #0
    ca90:	e59f00d0 	ldr	r0, [pc, #208]	; cb68 <waitLoop+0x10>
    ca94:	e5906014 	ldr	r6, [r0, #20]
    ca98:	e5907018 	ldr	r7, [r0, #24]
    ca9c:	e3a08000 	mov	r8, #0
    caa0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    caa4:	eb00000c 	bl	cadc <drawRect>
    caa8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    caac:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    cab0:	e1a0f00e 	mov	pc, lr

0000cab4 <drawPixel>:
    cab4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    cab8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    cabc:	e0804501 	add	r4, r0, r1, lsl #10
    cac0:	e1a04084 	lsl	r4, r4, #1
    cac4:	e59f00a0 	ldr	r0, [pc, #160]	; cb6c <waitLoop+0x14>
    cac8:	e5900000 	ldr	r0, [r0]
    cacc:	e18020b4 	strh	r2, [r0, r4]
    cad0:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    cad4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    cad8:	e1a0f00e 	mov	pc, lr

0000cadc <drawRect>:
    cadc:	e1a0000d 	mov	r0, sp
    cae0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    cae4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    cae8:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    caec:	e0866004 	add	r6, r6, r4
    caf0:	e0877005 	add	r7, r7, r5

0000caf4 <drawRectForLoopX>:
    caf4:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000caf8 <drawRectForLoopY>:
    caf8:	e1a00004 	mov	r0, r4
    cafc:	e1a01005 	mov	r1, r5
    cb00:	e1a02008 	mov	r2, r8
    cb04:	ebffffea 	bl	cab4 <drawPixel>
    cb08:	e2855001 	add	r5, r5, #1
    cb0c:	e1550007 	cmp	r5, r7
    cb10:	bafffff8 	blt	caf8 <drawRectForLoopY>
    cb14:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    cb18:	e2844001 	add	r4, r4, #1
    cb1c:	e1540006 	cmp	r4, r6
    cb20:	bafffff3 	blt	caf4 <drawRectForLoopX>
    cb24:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    cb28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    cb2c:	e28dd014 	add	sp, sp, #20
    cb30:	e1a0f00e 	mov	pc, lr

0000cb34 <positionToArrayOffset>:
    cb34:	e8bd0007 	pop	{r0, r1, r2}
    cb38:	e0030192 	mul	r3, r2, r1
    cb3c:	e0833000 	add	r3, r3, r0
    cb40:	e92d0008 	stmfd	sp!, {r3}
    cb44:	e1a0f00e 	mov	pc, lr

0000cb48 <startTimer>:
    cb48:	e1a03000 	mov	r3, r0
    cb4c:	e59f001c 	ldr	r0, [pc, #28]	; cb70 <waitLoop+0x18>
    cb50:	e5901000 	ldr	r1, [r0]
    cb54:	e0811003 	add	r1, r1, r3

0000cb58 <waitLoop>:
    cb58:	e5902000 	ldr	r2, [r0]
    cb5c:	e1510002 	cmp	r1, r2
    cb60:	8afffffc 	bhi	cb58 <waitLoop>
    cb64:	e1a0f00e 	mov	pc, lr
    cb68:	00009080 	.word	0x00009080
    cb6c:	000090e0 	.word	0x000090e0
    cb70:	3f003004 	.word	0x3f003004
