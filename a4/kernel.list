
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea0007c2 	b	9f10 <main>

Disassembly of section .text:

00009c20 <EnableJTAG>:
    9c20:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9c24:	e59f0064 	ldr	r0, [pc, #100]	; 9c90 <dowaitloop+0xc>
    9c28:	e0211001 	eor	r1, r1, r1
    9c2c:	e5801000 	str	r1, [r0]
    9c30:	eb000012 	bl	9c80 <dowait>
    9c34:	e59f0058 	ldr	r0, [pc, #88]	; 9c94 <dowaitloop+0x10>
    9c38:	e59f1058 	ldr	r1, [pc, #88]	; 9c98 <dowaitloop+0x14>
    9c3c:	e5801000 	str	r1, [r0]
    9c40:	eb00000e 	bl	9c80 <dowait>
    9c44:	e0211001 	eor	r1, r1, r1
    9c48:	e5801000 	str	r1, [r0]
    9c4c:	e59f0048 	ldr	r0, [pc, #72]	; 9c9c <dowaitloop+0x18>
    9c50:	e5901000 	ldr	r1, [r0]
    9c54:	e3c11a07 	bic	r1, r1, #28672	; 0x7000
    9c58:	e3811a02 	orr	r1, r1, #8192	; 0x2000
    9c5c:	e5801000 	str	r1, [r0]
    9c60:	e59f0038 	ldr	r0, [pc, #56]	; 9ca0 <dowaitloop+0x1c>
    9c64:	e5901000 	ldr	r1, [r0]
    9c68:	e59f2034 	ldr	r2, [pc, #52]	; 9ca4 <dowaitloop+0x20>
    9c6c:	e1c11002 	bic	r1, r1, r2
    9c70:	e59f2030 	ldr	r2, [pc, #48]	; 9ca8 <dowaitloop+0x24>
    9c74:	e1811002 	orr	r1, r1, r2
    9c78:	e5801000 	str	r1, [r0]
    9c7c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009c80 <dowait>:
    9c80:	e3a02f4b 	mov	r2, #300	; 0x12c

00009c84 <dowaitloop>:
    9c84:	e2522001 	subs	r2, r2, #1
    9c88:	1afffffd 	bne	9c84 <dowaitloop>
    9c8c:	e12fff1e 	bx	lr
    9c90:	3f200094 	.word	0x3f200094
    9c94:	3f200098 	.word	0x3f200098
    9c98:	0bc00010 	.word	0x0bc00010
    9c9c:	3f200000 	.word	0x3f200000
    9ca0:	3f200008 	.word	0x3f200008
    9ca4:	00e3ffc0 	.word	0x00e3ffc0
    9ca8:	0061b6c0 	.word	0x0061b6c0

00009cac <InitFrameBuffer>:
    9cac:	e59f2068 	ldr	r2, [pc, #104]	; 9d1c <pointerWaitLoop$+0x1c>
    9cb0:	e59f3068 	ldr	r3, [pc, #104]	; 9d20 <pointerWaitLoop$+0x20>

00009cb4 <mBoxFullLoop$>:
    9cb4:	e5920018 	ldr	r0, [r2, #24]
    9cb8:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    9cbc:	1afffffc 	bne	9cb4 <mBoxFullLoop$>
    9cc0:	e2830101 	add	r0, r3, #1073741824	; 0x40000000
    9cc4:	e3800008 	orr	r0, r0, #8
    9cc8:	e5820020 	str	r0, [r2, #32]

00009ccc <mBoxEmptyLoop$>:
    9ccc:	e5920018 	ldr	r0, [r2, #24]
    9cd0:	e3100101 	tst	r0, #1073741824	; 0x40000000
    9cd4:	1afffffc 	bne	9ccc <mBoxEmptyLoop$>
    9cd8:	e5920000 	ldr	r0, [r2]
    9cdc:	e200100f 	and	r1, r0, #15
    9ce0:	e3310008 	teq	r1, #8
    9ce4:	1afffff8 	bne	9ccc <mBoxEmptyLoop$>
    9ce8:	e59f0030 	ldr	r0, [pc, #48]	; 9d20 <pointerWaitLoop$+0x20>
    9cec:	e5901004 	ldr	r1, [r0, #4]
    9cf0:	e3310102 	teq	r1, #-2147483648	; 0x80000000
    9cf4:	0a000001 	beq	9d00 <pointerWaitLoop$>
    9cf8:	13a00000 	movne	r0, #0
    9cfc:	112fff1e 	bxne	lr

00009d00 <pointerWaitLoop$>:
    9d00:	e59f001c 	ldr	r0, [pc, #28]	; 9d24 <pointerWaitLoop$+0x24>
    9d04:	e5900000 	ldr	r0, [r0]
    9d08:	e3300000 	teq	r0, #0
    9d0c:	0afffffb 	beq	9d00 <pointerWaitLoop$>
    9d10:	e59f3010 	ldr	r3, [pc, #16]	; 9d28 <pointerWaitLoop$+0x28>
    9d14:	e5830000 	str	r0, [r3]
    9d18:	e12fff1e 	bx	lr
    9d1c:	3f00b880 	.word	0x3f00b880
    9d20:	00009080 	.word	0x00009080
    9d24:	000090cc 	.word	0x000090cc
    9d28:	000090e0 	.word	0x000090e0

00009d2c <sampleSNES>:
    9d2c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}

00009d30 <initSNES>:
    9d30:	e3a00001 	mov	r0, #1
    9d34:	eb000048 	bl	9e5c <setCLOCKFunction>
    9d38:	e3a00001 	mov	r0, #1
    9d3c:	eb00003d 	bl	9e38 <setLATCHFunction>
    9d40:	e3a00000 	mov	r0, #0
    9d44:	eb000034 	bl	9e1c <setDATAFunction>

00009d48 <startSamplingSNESButtons>:
    9d48:	e3a0000b 	mov	r0, #11
    9d4c:	e3a01001 	mov	r1, #1
    9d50:	eb000056 	bl	9eb0 <writeGPIO>
    9d54:	e3a00009 	mov	r0, #9
    9d58:	e3a01001 	mov	r1, #1
    9d5c:	eb000053 	bl	9eb0 <writeGPIO>
    9d60:	e3a0000c 	mov	r0, #12
    9d64:	eb000019 	bl	9dd0 <startTimer>
    9d68:	e3a00009 	mov	r0, #9
    9d6c:	e3a01000 	mov	r1, #0
    9d70:	eb00004e 	bl	9eb0 <writeGPIO>
    9d74:	e3a08000 	mov	r8, #0
    9d78:	e3a07000 	mov	r7, #0

00009d7c <pulseLoop>:
    9d7c:	e3a00006 	mov	r0, #6
    9d80:	eb000012 	bl	9dd0 <startTimer>
    9d84:	e3a0000b 	mov	r0, #11
    9d88:	e3a01000 	mov	r1, #0
    9d8c:	eb000047 	bl	9eb0 <writeGPIO>
    9d90:	e3a00006 	mov	r0, #6
    9d94:	eb00000d 	bl	9dd0 <startTimer>
    9d98:	e3a0000a 	mov	r0, #10
    9d9c:	e3a01000 	mov	r1, #0
    9da0:	eb000036 	bl	9e80 <readGPIO>
    9da4:	e1a00710 	lsl	r0, r0, r7
    9da8:	e1888000 	orr	r8, r8, r0
    9dac:	e3a0000b 	mov	r0, #11
    9db0:	e3a01001 	mov	r1, #1
    9db4:	eb00003d 	bl	9eb0 <writeGPIO>
    9db8:	e2877001 	add	r7, r7, #1
    9dbc:	e3570010 	cmp	r7, #16
    9dc0:	baffffed 	blt	9d7c <pulseLoop>

00009dc4 <pulseLoopEnd>:
    9dc4:	e1a00008 	mov	r0, r8

00009dc8 <mainEnd>:
    9dc8:	eaffffff 	b	9dcc <killProgram>

00009dcc <killProgram>:
    9dcc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

00009dd0 <startTimer>:
    9dd0:	e1a03000 	mov	r3, r0
    9dd4:	e59f0128 	ldr	r0, [pc, #296]	; 9f04 <newButtonPress+0x14>
    9dd8:	e5901000 	ldr	r1, [r0]
    9ddc:	e0811003 	add	r1, r1, r3

00009de0 <waitLoop>:
    9de0:	e5902000 	ldr	r2, [r0]
    9de4:	e1510002 	cmp	r1, r2
    9de8:	8afffffc 	bhi	9de0 <waitLoop>
    9dec:	e1a0f00e 	mov	pc, lr

00009df0 <setGPIOFunction>:
    9df0:	e59f3110 	ldr	r3, [pc, #272]	; 9f08 <newButtonPress+0x18>
    9df4:	e3a04004 	mov	r4, #4
    9df8:	e0000094 	mul	r0, r4, r0
    9dfc:	e7934000 	ldr	r4, [r3, r0]
    9e00:	e3a05007 	mov	r5, #7
    9e04:	e1a05215 	lsl	r5, r5, r2
    9e08:	e1c33005 	bic	r3, r3, r5
    9e0c:	e1a01211 	lsl	r1, r1, r2
    9e10:	e1844001 	orr	r4, r4, r1
    9e14:	e7834000 	str	r4, [r3, r0]
    9e18:	e1a0f00e 	mov	pc, lr

00009e1c <setDATAFunction>:
    9e1c:	e59f10e4 	ldr	r1, [pc, #228]	; 9f08 <newButtonPress+0x18>
    9e20:	e5912004 	ldr	r2, [r1, #4]
    9e24:	e3a03007 	mov	r3, #7
    9e28:	e1c22003 	bic	r2, r2, r3
    9e2c:	e1822000 	orr	r2, r2, r0
    9e30:	e5812004 	str	r2, [r1, #4]
    9e34:	e1a0f00e 	mov	pc, lr

00009e38 <setLATCHFunction>:
    9e38:	e59f10c8 	ldr	r1, [pc, #200]	; 9f08 <newButtonPress+0x18>
    9e3c:	e5912000 	ldr	r2, [r1]
    9e40:	e3a03007 	mov	r3, #7
    9e44:	e1a03d83 	lsl	r3, r3, #27
    9e48:	e1c22003 	bic	r2, r2, r3
    9e4c:	e1a00d80 	lsl	r0, r0, #27
    9e50:	e1822000 	orr	r2, r2, r0
    9e54:	e5812000 	str	r2, [r1]
    9e58:	e1a0f00e 	mov	pc, lr

00009e5c <setCLOCKFunction>:
    9e5c:	e59f10a4 	ldr	r1, [pc, #164]	; 9f08 <newButtonPress+0x18>
    9e60:	e5912004 	ldr	r2, [r1, #4]
    9e64:	e3a03007 	mov	r3, #7
    9e68:	e1a03183 	lsl	r3, r3, #3
    9e6c:	e1c22003 	bic	r2, r2, r3
    9e70:	e1a00180 	lsl	r0, r0, #3
    9e74:	e1822000 	orr	r2, r2, r0
    9e78:	e5812004 	str	r2, [r1, #4]
    9e7c:	e1a0f00e 	mov	pc, lr

00009e80 <readGPIO>:
    9e80:	e59f1080 	ldr	r1, [pc, #128]	; 9f08 <newButtonPress+0x18>
    9e84:	e3500020 	cmp	r0, #32
    9e88:	b5912034 	ldrlt	r2, [r1, #52]	; 0x34
    9e8c:	a5912038 	ldrge	r2, [r1, #56]	; 0x38
    9e90:	a2400020 	subge	r0, r0, #32
    9e94:	e3a03001 	mov	r3, #1
    9e98:	e1a03013 	lsl	r3, r3, r0
    9e9c:	e0022003 	and	r2, r2, r3
    9ea0:	e3320000 	teq	r2, #0
    9ea4:	03a00000 	moveq	r0, #0
    9ea8:	13a00001 	movne	r0, #1
    9eac:	e1a0f00e 	mov	pc, lr

00009eb0 <writeGPIO>:
    9eb0:	e3310000 	teq	r1, #0
    9eb4:	e59f104c 	ldr	r1, [pc, #76]	; 9f08 <newButtonPress+0x18>
    9eb8:	1281201c 	addne	r2, r1, #28
    9ebc:	02812028 	addeq	r2, r1, #40	; 0x28
    9ec0:	e3500020 	cmp	r0, #32
    9ec4:	a2400020 	subge	r0, r0, #32
    9ec8:	e3a01001 	mov	r1, #1
    9ecc:	e1a01011 	lsl	r1, r1, r0
    9ed0:	b5821000 	strlt	r1, [r2]
    9ed4:	a5821004 	strge	r1, [r2, #4]
    9ed8:	e1a0f00e 	mov	pc, lr

00009edc <areAnySNESButtonsPressed>:
    9edc:	e59f1028 	ldr	r1, [pc, #40]	; 9f0c <newButtonPress+0x1c>
    9ee0:	e0411000 	sub	r1, r1, r0
    9ee4:	e1500009 	cmp	r0, r9
    9ee8:	1a000000 	bne	9ef0 <newButtonPress>
    9eec:	e3a01000 	mov	r1, #0

00009ef0 <newButtonPress>:
    9ef0:	e3310000 	teq	r1, #0
    9ef4:	03a01000 	moveq	r1, #0
    9ef8:	13a01001 	movne	r1, #1
    9efc:	e1a09000 	mov	r9, r0
    9f00:	e1a0f00e 	mov	pc, lr
    9f04:	3f003004 	.word	0x3f003004
    9f08:	3f200000 	.word	0x3f200000
    9f0c:	0000ffff 	.word	0x0000ffff

00009f10 <main>:
    9f10:	e3a0d902 	mov	sp, #32768	; 0x8000
    9f14:	ebffff41 	bl	9c20 <EnableJTAG>
    9f18:	ebffff63 	bl	9cac <InitFrameBuffer>
    9f1c:	ebffff82 	bl	9d2c <sampleSNES>
    9f20:	eb000117 	bl	a384 <tetrisInitGrid>
    9f24:	e3a00000 	mov	r0, #0
    9f28:	e3a01006 	mov	r1, #6
    9f2c:	e59f2a0c 	ldr	r2, [pc, #2572]	; a940 <waitLoop+0x10>
    9f30:	e92d0007 	push	{r0, r1, r2}
    9f34:	eb00011c 	bl	a3ac <tetrisSetGridBlockColor>
    9f38:	e3a00001 	mov	r0, #1
    9f3c:	e3a01006 	mov	r1, #6
    9f40:	e59f29f8 	ldr	r2, [pc, #2552]	; a940 <waitLoop+0x10>
    9f44:	e92d0007 	push	{r0, r1, r2}
    9f48:	eb000117 	bl	a3ac <tetrisSetGridBlockColor>
    9f4c:	e3a00002 	mov	r0, #2
    9f50:	e3a01006 	mov	r1, #6
    9f54:	e59f29e4 	ldr	r2, [pc, #2532]	; a940 <waitLoop+0x10>
    9f58:	e92d0007 	push	{r0, r1, r2}
    9f5c:	eb000112 	bl	a3ac <tetrisSetGridBlockColor>
    9f60:	e3a00003 	mov	r0, #3
    9f64:	e3a01006 	mov	r1, #6
    9f68:	e59f29d0 	ldr	r2, [pc, #2512]	; a940 <waitLoop+0x10>
    9f6c:	e92d0007 	push	{r0, r1, r2}
    9f70:	eb00010d 	bl	a3ac <tetrisSetGridBlockColor>
    9f74:	e3a00000 	mov	r0, #0
    9f78:	e3a01005 	mov	r1, #5
    9f7c:	e59f29c0 	ldr	r2, [pc, #2496]	; a944 <waitLoop+0x14>
    9f80:	e92d0007 	push	{r0, r1, r2}
    9f84:	eb000108 	bl	a3ac <tetrisSetGridBlockColor>
    9f88:	e3a00001 	mov	r0, #1
    9f8c:	e3a01005 	mov	r1, #5
    9f90:	e59f29ac 	ldr	r2, [pc, #2476]	; a944 <waitLoop+0x14>
    9f94:	e92d0007 	push	{r0, r1, r2}
    9f98:	eb000103 	bl	a3ac <tetrisSetGridBlockColor>
    9f9c:	e3a00002 	mov	r0, #2
    9fa0:	e3a01005 	mov	r1, #5
    9fa4:	e59f299c 	ldr	r2, [pc, #2460]	; a948 <waitLoop+0x18>
    9fa8:	e92d0007 	push	{r0, r1, r2}
    9fac:	eb0000fe 	bl	a3ac <tetrisSetGridBlockColor>
    9fb0:	e3a00003 	mov	r0, #3
    9fb4:	e3a01005 	mov	r1, #5
    9fb8:	e59f2988 	ldr	r2, [pc, #2440]	; a948 <waitLoop+0x18>
    9fbc:	e92d0007 	push	{r0, r1, r2}
    9fc0:	eb0000f9 	bl	a3ac <tetrisSetGridBlockColor>
    9fc4:	eb0001ab 	bl	a678 <tetrisCreateNewBlock>

00009fc8 <mainLoop>:
    9fc8:	eb00017d 	bl	a5c4 <tetrisUpdateGridWithBlock>
    9fcc:	e320f000 	nop	{0}
    9fd0:	eb00013f 	bl	a4d4 <tetrisDrawGrid>
    9fd4:	e320f000 	nop	{0}
    9fd8:	e320f000 	nop	{0}
    9fdc:	e3a00000 	mov	r0, #0
    9fe0:	e3a01001 	mov	r1, #1
    9fe4:	e320f000 	nop	{0}
    9fe8:	eb0001e5 	bl	a784 <tetrisTranslateBlock>
    9fec:	eb0001c2 	bl	a6fc <tetrisCheckBlockGridCollisions>
    9ff0:	e3300000 	teq	r0, #0
    9ff4:	1b0001ce 	blne	a734 <tetrisOnBlockCollision>
    9ff8:	e59f094c 	ldr	r0, [pc, #2380]	; a94c <waitLoop+0x1c>
    9ffc:	eb000247 	bl	a920 <startTimer>
    a000:	eafffff0 	b	9fc8 <mainLoop>

0000a004 <mainEnd>:
    a004:	eafffffe 	b	a004 <mainEnd>

0000a008 <DrawTitle>:
    a008:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a00c:	e3a00000 	mov	r0, #0
    a010:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a014:	e3a0001e 	mov	r0, #30
    a018:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a01c:	e3a00064 	mov	r0, #100	; 0x64
    a020:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a024:	e3a0005e 	mov	r0, #94	; 0x5e
    a028:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a02c:	e3a000de 	mov	r0, #222	; 0xde
    a030:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a034:	eb000227 	bl	a8d8 <drawRect>
    a038:	e3a00000 	mov	r0, #0
    a03c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a040:	e3a00096 	mov	r0, #150	; 0x96
    a044:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a048:	e3a0001e 	mov	r0, #30
    a04c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a050:	e3a0007c 	mov	r0, #124	; 0x7c
    a054:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a058:	e59f08f0 	ldr	r0, [pc, #2288]	; a950 <waitLoop+0x20>
    a05c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a060:	eb00021c 	bl	a8d8 <drawRect>
    a064:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a068 <SetMainMenuIndicatorStart>:
    a068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a06c:	e59f08d8 	ldr	r0, [pc, #2264]	; a94c <waitLoop+0x1c>
    a070:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a074:	e3a00014 	mov	r0, #20
    a078:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a07c:	e3a00014 	mov	r0, #20
    a080:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a084:	e3a00fa5 	mov	r0, #660	; 0x294
    a088:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a08c:	e3a00f71 	mov	r0, #452	; 0x1c4
    a090:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a094:	eb00020f 	bl	a8d8 <drawRect>
    a098:	e3a00000 	mov	r0, #0
    a09c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0a0:	e3a00014 	mov	r0, #20
    a0a4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0a8:	e3a00014 	mov	r0, #20
    a0ac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0b0:	e59f089c 	ldr	r0, [pc, #2204]	; a954 <waitLoop+0x24>
    a0b4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0b8:	e3a00f71 	mov	r0, #452	; 0x1c4
    a0bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0c0:	eb000204 	bl	a8d8 <drawRect>
    a0c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a0c8 <SetMainMenuIndicatorQuit>:
    a0c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a0cc:	e59f0878 	ldr	r0, [pc, #2168]	; a94c <waitLoop+0x1c>
    a0d0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0d4:	e3a00014 	mov	r0, #20
    a0d8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0dc:	e3a00014 	mov	r0, #20
    a0e0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0e4:	e59f0868 	ldr	r0, [pc, #2152]	; a954 <waitLoop+0x24>
    a0e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0ec:	e3a00f71 	mov	r0, #452	; 0x1c4
    a0f0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0f4:	eb0001f7 	bl	a8d8 <drawRect>
    a0f8:	e3a00000 	mov	r0, #0
    a0fc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a100:	e3a00014 	mov	r0, #20
    a104:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a108:	e3a00014 	mov	r0, #20
    a10c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a110:	e3a00fa5 	mov	r0, #660	; 0x294
    a114:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a118:	e3a00f71 	mov	r0, #452	; 0x1c4
    a11c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a120:	eb0001ec 	bl	a8d8 <drawRect>
    a124:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a128 <ClearScreenBlack>:
    a128:	e92d4600 	push	{r9, sl, lr}
    a12c:	e59f0824 	ldr	r0, [pc, #2084]	; a958 <waitLoop+0x28>
    a130:	e5909014 	ldr	r9, [r0, #20]
    a134:	e590a018 	ldr	sl, [r0, #24]
    a138:	e3a00000 	mov	r0, #0
    a13c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a140:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    a144:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    a148:	e3a00000 	mov	r0, #0
    a14c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a150:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a154:	eb0001df 	bl	a8d8 <drawRect>
    a158:	e8bd8600 	pop	{r9, sl, pc}

0000a15c <DrawMainMenu>:
    a15c:	e92d4600 	push	{r9, sl, lr}
    a160:	e59f07f0 	ldr	r0, [pc, #2032]	; a958 <waitLoop+0x28>
    a164:	e5909014 	ldr	r9, [r0, #20]
    a168:	e590a018 	ldr	sl, [r0, #24]
    a16c:	e59f07e8 	ldr	r0, [pc, #2024]	; a95c <waitLoop+0x2c>
    a170:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a174:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    a178:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    a17c:	e3a00000 	mov	r0, #0
    a180:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a184:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a188:	eb0001d2 	bl	a8d8 <drawRect>
    a18c:	e59f07cc 	ldr	r0, [pc, #1996]	; a960 <waitLoop+0x30>
    a190:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a194:	e3a000c8 	mov	r0, #200	; 0xc8
    a198:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a19c:	e3a00f96 	mov	r0, #600	; 0x258
    a1a0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1a4:	e3a00054 	mov	r0, #84	; 0x54
    a1a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1ac:	e3a000d4 	mov	r0, #212	; 0xd4
    a1b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1b4:	eb0001c7 	bl	a8d8 <drawRect>
    a1b8:	e59f07a0 	ldr	r0, [pc, #1952]	; a960 <waitLoop+0x30>
    a1bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1c0:	e3a000c8 	mov	r0, #200	; 0xc8
    a1c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1c8:	e3a000c8 	mov	r0, #200	; 0xc8
    a1cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1d0:	e3a00f47 	mov	r0, #284	; 0x11c
    a1d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1d8:	e3a00f67 	mov	r0, #412	; 0x19c
    a1dc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1e0:	eb0001bc 	bl	a8d8 <drawRect>
    a1e4:	ebffff87 	bl	a008 <DrawTitle>
    a1e8:	e59f0774 	ldr	r0, [pc, #1908]	; a964 <waitLoop+0x34>
    a1ec:	e3a01000 	mov	r1, #0
    a1f0:	e59f2770 	ldr	r2, [pc, #1904]	; a968 <waitLoop+0x38>
    a1f4:	e3a03044 	mov	r3, #68	; 0x44
    a1f8:	eb00003a 	bl	a2e8 <WriteSentence>
    a1fc:	e59f0768 	ldr	r0, [pc, #1896]	; a96c <waitLoop+0x3c>
    a200:	e3a01f8d 	mov	r1, #564	; 0x234
    a204:	eb00000e 	bl	a244 <drawStartMenuButton>
    a208:	e59f0760 	ldr	r0, [pc, #1888]	; a970 <waitLoop+0x40>
    a20c:	e3a01000 	mov	r1, #0
    a210:	e59f275c 	ldr	r2, [pc, #1884]	; a974 <waitLoop+0x44>
    a214:	e59f375c 	ldr	r3, [pc, #1884]	; a978 <waitLoop+0x48>
    a218:	eb000032 	bl	a2e8 <WriteSentence>
    a21c:	e59f0748 	ldr	r0, [pc, #1864]	; a96c <waitLoop+0x3c>
    a220:	e59f1754 	ldr	r1, [pc, #1876]	; a97c <waitLoop+0x4c>
    a224:	eb000006 	bl	a244 <drawStartMenuButton>
    a228:	e59f0750 	ldr	r0, [pc, #1872]	; a980 <waitLoop+0x50>
    a22c:	e3a01000 	mov	r1, #0
    a230:	e59f274c 	ldr	r2, [pc, #1868]	; a984 <waitLoop+0x54>
    a234:	e3a03fa6 	mov	r3, #664	; 0x298
    a238:	eb00002a 	bl	a2e8 <WriteSentence>
    a23c:	ebffff89 	bl	a068 <SetMainMenuIndicatorStart>
    a240:	e8bd8600 	pop	{r9, sl, pc}

0000a244 <drawStartMenuButton>:
    a244:	e92d4600 	push	{r9, sl, lr}
    a248:	e1a09000 	mov	r9, r0
    a24c:	e1a0a001 	mov	sl, r1
    a250:	e3a00000 	mov	r0, #0
    a254:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a258:	e3a00032 	mov	r0, #50	; 0x32
    a25c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a260:	e3a00096 	mov	r0, #150	; 0x96
    a264:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a268:	e1a0000a 	mov	r0, sl
    a26c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a270:	e1a00009 	mov	r0, r9
    a274:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a278:	eb000196 	bl	a8d8 <drawRect>
    a27c:	e2899005 	add	r9, r9, #5
    a280:	e28aa005 	add	sl, sl, #5
    a284:	e59f06fc 	ldr	r0, [pc, #1788]	; a988 <waitLoop+0x58>
    a288:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a28c:	e3a00028 	mov	r0, #40	; 0x28
    a290:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a294:	e3a0008c 	mov	r0, #140	; 0x8c
    a298:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a29c:	e1a0000a 	mov	r0, sl
    a2a0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a2a4:	e1a00009 	mov	r0, r9
    a2a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a2ac:	eb000189 	bl	a8d8 <drawRect>
    a2b0:	e2899005 	add	r9, r9, #5
    a2b4:	e28aa005 	add	sl, sl, #5
    a2b8:	e59f068c 	ldr	r0, [pc, #1676]	; a94c <waitLoop+0x1c>
    a2bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a2c0:	e3a0001e 	mov	r0, #30
    a2c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a2c8:	e3a0001e 	mov	r0, #30
    a2cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a2d0:	e1a0000a 	mov	r0, sl
    a2d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a2d8:	e1a00009 	mov	r0, r9
    a2dc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a2e0:	eb00017c 	bl	a8d8 <drawRect>
    a2e4:	e8bd8600 	pop	{r9, sl, pc}

0000a2e8 <WriteSentence>:
    a2e8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a2ec:	e1a05000 	mov	r5, r0
    a2f0:	e5954000 	ldr	r4, [r5]
    a2f4:	e2855004 	add	r5, r5, #4
    a2f8:	e1a06001 	mov	r6, r1
    a2fc:	e1a08002 	mov	r8, r2
    a300:	e1a07003 	mov	r7, r3

0000a304 <LoadChar>:
    a304:	e4d50001 	ldrb	r0, [r5], #1
    a308:	e1a01006 	mov	r1, r6
    a30c:	e1a02007 	mov	r2, r7
    a310:	e1a03008 	mov	r3, r8
    a314:	eb000004 	bl	a32c <DrawChar>
    a318:	e2888008 	add	r8, r8, #8
    a31c:	e2444001 	sub	r4, r4, #1
    a320:	e3540000 	cmp	r4, #0
    a324:	cafffff6 	bgt	a304 <LoadChar>
    a328:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000a32c <DrawChar>:
    a32c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a330:	e1a09001 	mov	r9, r1
    a334:	e59f4650 	ldr	r4, [pc, #1616]	; a98c <waitLoop+0x5c>
    a338:	e0844200 	add	r4, r4, r0, lsl #4
    a33c:	e1a06002 	mov	r6, r2

0000a340 <charLoop$>:
    a340:	e1a05003 	mov	r5, r3
    a344:	e3a08001 	mov	r8, #1
    a348:	e4d47001 	ldrb	r7, [r4], #1

0000a34c <rowLoop$>:
    a34c:	e1170008 	tst	r7, r8
    a350:	0a000003 	beq	a364 <noPixel$>
    a354:	e1a00005 	mov	r0, r5
    a358:	e1a01006 	mov	r1, r6
    a35c:	e1a02009 	mov	r2, r9
    a360:	eb000152 	bl	a8b0 <drawPixel>

0000a364 <noPixel$>:
    a364:	e2855001 	add	r5, r5, #1
    a368:	e1a08088 	lsl	r8, r8, #1
    a36c:	e3180c01 	tst	r8, #256	; 0x100
    a370:	0afffff5 	beq	a34c <rowLoop$>
    a374:	e2866001 	add	r6, r6, #1
    a378:	e314000f 	tst	r4, #15
    a37c:	1affffef 	bne	a340 <charLoop$>
    a380:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000a384 <tetrisInitGrid>:
    a384:	e59f0604 	ldr	r0, [pc, #1540]	; a990 <waitLoop+0x60>
    a388:	e280100c 	add	r1, r0, #12
    a38c:	e59f2600 	ldr	r2, [pc, #1536]	; a994 <waitLoop+0x64>
    a390:	e3a03000 	mov	r3, #0

0000a394 <forEach_block_in_tetrisGrid_loop>:
    a394:	e5813000 	str	r3, [r1]
    a398:	e2811004 	add	r1, r1, #4
    a39c:	e1510002 	cmp	r1, r2
    a3a0:	aa000000 	bge	a3a8 <forEach_block_in_tetrisGrid_loopEnd>
    a3a4:	bafffffa 	blt	a394 <forEach_block_in_tetrisGrid_loop>

0000a3a8 <forEach_block_in_tetrisGrid_loopEnd>:
    a3a8:	e1a0f00e 	mov	pc, lr

0000a3ac <tetrisSetGridBlockColor>:
    a3ac:	e8bd0007 	pop	{r0, r1, r2}
    a3b0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a3b4:	e59f35d4 	ldr	r3, [pc, #1492]	; a990 <waitLoop+0x60>
    a3b8:	e5934000 	ldr	r4, [r3]
    a3bc:	e5935004 	ldr	r5, [r3, #4]
    a3c0:	e5936008 	ldr	r6, [r3, #8]
    a3c4:	e283700c 	add	r7, r3, #12
    a3c8:	e0080195 	mul	r8, r5, r1
    a3cc:	e0888000 	add	r8, r8, r0
    a3d0:	e1a08108 	lsl	r8, r8, #2
    a3d4:	e7872008 	str	r2, [r7, r8]
    a3d8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    a3dc:	e1a0f00e 	mov	pc, lr

0000a3e0 <tetrisGetGridBlockColor>:
    a3e0:	e8bd0006 	pop	{r1, r2}
    a3e4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a3e8:	e59f35a0 	ldr	r3, [pc, #1440]	; a990 <waitLoop+0x60>
    a3ec:	e5934000 	ldr	r4, [r3]
    a3f0:	e5935004 	ldr	r5, [r3, #4]
    a3f4:	e5936008 	ldr	r6, [r3, #8]
    a3f8:	e283700c 	add	r7, r3, #12
    a3fc:	e0080295 	mul	r8, r5, r2
    a400:	e0888001 	add	r8, r8, r1
    a404:	e1a08108 	lsl	r8, r8, #2
    a408:	e7970008 	ldr	r0, [r7, r8]
    a40c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    a410:	e1a0f00e 	mov	pc, lr

0000a414 <tetrisClearGridBlock>:
    a414:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a418:	e3a02000 	mov	r2, #0
    a41c:	e92d0007 	push	{r0, r1, r2}
    a420:	ebffffe1 	bl	a3ac <tetrisSetGridBlockColor>
    a424:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a428:	e1a0f00e 	mov	pc, lr

0000a42c <tetrisGetGridBitmaskForBlock>:
    a42c:	e1a0000d 	mov	r0, sp
    a430:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a434:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a438:	e89007f0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl}
    a43c:	e92d1800 	push	{fp, ip}
    a440:	e3a01000 	mov	r1, #0
    a444:	e3a0b000 	mov	fp, #0
    a448:	e3a0c000 	mov	ip, #0

0000a44c <for_i_lessThan_4_loop_>:
    a44c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000a450 <for_j_lessThan_4_loop_>:
    a450:	e92d00c0 	push	{r6, r7}
    a454:	e086600c 	add	r6, r6, ip
    a458:	e087700b 	add	r7, r7, fp
    a45c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    a460:	e92d00c0 	push	{r6, r7}
    a464:	ebffffdd 	bl	a3e0 <tetrisGetGridBlockColor>
    a468:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    a46c:	e3300000 	teq	r0, #0
    a470:	e1a01081 	lsl	r1, r1, #1
    a474:	12811001 	addne	r1, r1, #1
    a478:	e8bd00c0 	pop	{r6, r7}
    a47c:	e28cc001 	add	ip, ip, #1
    a480:	e35c0004 	cmp	ip, #4
    a484:	bafffff1 	blt	a450 <for_j_lessThan_4_loop_>
    a488:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    a48c:	e28bb001 	add	fp, fp, #1
    a490:	e35b0004 	cmp	fp, #4
    a494:	baffffec 	blt	a44c <for_i_lessThan_4_loop_>
    a498:	e8bd1800 	pop	{fp, ip}
    a49c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a4a0:	e1a00001 	mov	r0, r1
    a4a4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a4a8:	e1a0f00e 	mov	pc, lr

0000a4ac <tetrisGetGridOffsetForGridPosition>:
    a4ac:	e92d0070 	push	{r4, r5, r6}
    a4b0:	e8bd0003 	pop	{r0, r1}
    a4b4:	e59f44d4 	ldr	r4, [pc, #1236]	; a990 <waitLoop+0x60>
    a4b8:	e8940060 	ldm	r4, {r5, r6}
    a4bc:	e0020196 	mul	r2, r6, r1
    a4c0:	e0822000 	add	r2, r2, r0
    a4c4:	e1a02102 	lsl	r2, r2, #2
    a4c8:	e8bd0070 	pop	{r4, r5, r6}
    a4cc:	e92d0004 	stmfd	sp!, {r2}
    a4d0:	e1a0f00e 	mov	pc, lr

0000a4d4 <tetrisDrawGrid>:
    a4d4:	e1a0000d 	mov	r0, sp
    a4d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a4dc:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a4e0:	e59f74a8 	ldr	r7, [pc, #1192]	; a990 <waitLoop+0x60>
    a4e4:	e8970700 	ldm	r7, {r8, r9, sl}
    a4e8:	e287b00c 	add	fp, r7, #12
    a4ec:	e1a07000 	mov	r7, r0
    a4f0:	e3a04000 	mov	r4, #0
    a4f4:	e3a05000 	mov	r5, #0
    a4f8:	e3a06000 	mov	r6, #0

0000a4fc <for_curRow_lessThan_rows_loop>:
    a4fc:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000a500 <for_curCol_lessThan_cols_loop>:
    a500:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a504:	e320f000 	nop	{0}
    a508:	e320f000 	nop	{0}
    a50c:	e8971fc0 	ldm	r7, {r6, r7, r8, r9, sl, fp, ip}
    a510:	e92d1fc0 	push	{r6, r7, r8, r9, sl, fp, ip}
    a514:	e1a00004 	mov	r0, r4
    a518:	e1a01005 	mov	r1, r5
    a51c:	eb000060 	bl	a6a4 <tetrisBlockContainsPoint>
    a520:	e8bd1fc0 	pop	{r6, r7, r8, r9, sl, fp, ip}
    a524:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a528:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a52c:	e3300000 	teq	r0, #0
    a530:	1a00000c 	bne	a568 <skippy>
    a534:	e00c0599 	mul	ip, r9, r5
    a538:	e08cc004 	add	ip, ip, r4
    a53c:	e1a0c10c 	lsl	ip, ip, #2
    a540:	e79b600c 	ldr	r6, [fp, ip]
    a544:	e92d000f 	push	{r0, r1, r2, r3}
    a548:	e1a00004 	mov	r0, r4
    a54c:	e1a01005 	mov	r1, r5
    a550:	e92d0003 	push	{r0, r1}
    a554:	eb00000f 	bl	a598 <tetrisGetRectForGridPosition>
    a558:	e8bd000f 	pop	{r0, r1, r2, r3}
    a55c:	e92d004f 	push	{r0, r1, r2, r3, r6}
    a560:	eb0000dc 	bl	a8d8 <drawRect>
    a564:	e8bd000f 	pop	{r0, r1, r2, r3}

0000a568 <skippy>:
    a568:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a56c:	e2855001 	add	r5, r5, #1
    a570:	e1550009 	cmp	r5, r9
    a574:	baffffe1 	blt	a500 <for_curCol_lessThan_cols_loop>
    a578:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    a57c:	e2844001 	add	r4, r4, #1
    a580:	e1540008 	cmp	r4, r8
    a584:	baffffdc 	blt	a4fc <for_curRow_lessThan_rows_loop>
    a588:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a58c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a590:	e1a0f00e 	mov	pc, lr

0000a594 <tetrisDrawBlock>:
    a594:	e1a0f00e 	mov	pc, lr

0000a598 <tetrisGetRectForGridPosition>:
    a598:	e8bd0003 	pop	{r0, r1}
    a59c:	e92d00f0 	push	{r4, r5, r6, r7}
    a5a0:	e59f43e8 	ldr	r4, [pc, #1000]	; a990 <waitLoop+0x60>
    a5a4:	e89400e0 	ldm	r4, {r5, r6, r7}
    a5a8:	e1a02007 	mov	r2, r7
    a5ac:	e1a03007 	mov	r3, r7
    a5b0:	e0000092 	mul	r0, r2, r0
    a5b4:	e0010193 	mul	r1, r3, r1
    a5b8:	e8bd00f0 	pop	{r4, r5, r6, r7}
    a5bc:	e92d000f 	push	{r0, r1, r2, r3}
    a5c0:	e1a0f00e 	mov	pc, lr

0000a5c4 <tetrisUpdateGridWithBlock>:
    a5c4:	e1a0000d 	mov	r0, sp
    a5c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a5cc:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a5d0:	e89007f0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl}
    a5d4:	e1a04006 	mov	r4, r6
    a5d8:	e1a05007 	mov	r5, r7
    a5dc:	e5804000 	str	r4, [r0]
    a5e0:	e5805004 	str	r5, [r0, #4]
    a5e4:	e92d1800 	push	{fp, ip}
    a5e8:	e3a0b000 	mov	fp, #0
    a5ec:	e3a0c000 	mov	ip, #0

0000a5f0 <for_i_lessThan_4_loop>:
    a5f0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000a5f4 <for_j_lessThan_4_loop>:
    a5f4:	e92d01c0 	push	{r6, r7, r8}
    a5f8:	e19920ba 	ldrh	r2, [r9, sl]
    a5fc:	e086600b 	add	r6, r6, fp
    a600:	e087700c 	add	r7, r7, ip
    a604:	e3a01004 	mov	r1, #4
    a608:	e0010c91 	mul	r1, r1, ip
    a60c:	e081100b 	add	r1, r1, fp
    a610:	e1a02112 	lsl	r2, r2, r1
    a614:	e3a01902 	mov	r1, #32768	; 0x8000
    a618:	e0011002 	and	r1, r1, r2
    a61c:	e3310000 	teq	r1, #0
    a620:	e52d8004 	push	{r8}		; (str r8, [sp, #-4]!)
    a624:	03a08000 	moveq	r8, #0

0000a628 <blockHasData>:
    a628:	e92d000f 	push	{r0, r1, r2, r3}
    a62c:	e92d00c0 	push	{r6, r7}
    a630:	ebffffd8 	bl	a598 <tetrisGetRectForGridPosition>
    a634:	e8bd000f 	pop	{r0, r1, r2, r3}
    a638:	e92d010f 	push	{r0, r1, r2, r3, r8}
    a63c:	eb0000a5 	bl	a8d8 <drawRect>
    a640:	e8bd000f 	pop	{r0, r1, r2, r3}

0000a644 <blockHasNoData>:
    a644:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    a648:	e8bd01c0 	pop	{r6, r7, r8}
    a64c:	e28cc001 	add	ip, ip, #1
    a650:	e35c0004 	cmp	ip, #4
    a654:	baffffe6 	blt	a5f4 <for_j_lessThan_4_loop>
    a658:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    a65c:	e28bb001 	add	fp, fp, #1
    a660:	e35b0004 	cmp	fp, #4
    a664:	baffffe1 	blt	a5f0 <for_i_lessThan_4_loop>
    a668:	e8bd1800 	pop	{fp, ip}
    a66c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a670:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a674:	e1a0f00e 	mov	pc, lr

0000a678 <tetrisCreateNewBlock>:
    a678:	e59f0318 	ldr	r0, [pc, #792]	; a998 <waitLoop+0x68>
    a67c:	e89007f0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl}

0000a680 <initializeTetrisBlock>:
    a680:	e3a04000 	mov	r4, #0
    a684:	e3a05000 	mov	r5, #0
    a688:	e3a06000 	mov	r6, #0
    a68c:	e3a07000 	mov	r7, #0
    a690:	e59f8304 	ldr	r8, [pc, #772]	; a99c <waitLoop+0x6c>
    a694:	e59f9304 	ldr	r9, [pc, #772]	; a9a0 <waitLoop+0x70>
    a698:	e3a0a000 	mov	sl, #0

0000a69c <initializeTetrisBlockEnd>:
    a69c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a6a0:	e1a0f00e 	mov	pc, lr

0000a6a4 <tetrisBlockContainsPoint>:
    a6a4:	e1a0300d 	mov	r3, sp
    a6a8:	e3a02001 	mov	r2, #1
    a6ac:	e89307f0 	ldm	r3, {r4, r5, r6, r7, r8, r9, sl}
    a6b0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a6b4:	e89307f0 	ldm	r3, {r4, r5, r6, r7, r8, r9, sl}
    a6b8:	e1500006 	cmp	r0, r6
    a6bc:	b3a02000 	movlt	r2, #0
    a6c0:	ba00000a 	blt	a6f0 <tetrisBlockContainsPointEnd>
    a6c4:	e2866004 	add	r6, r6, #4
    a6c8:	e1500006 	cmp	r0, r6
    a6cc:	a3a02000 	movge	r2, #0
    a6d0:	aa000006 	bge	a6f0 <tetrisBlockContainsPointEnd>
    a6d4:	e1510007 	cmp	r1, r7
    a6d8:	b3a02000 	movlt	r2, #0
    a6dc:	ba000003 	blt	a6f0 <tetrisBlockContainsPointEnd>
    a6e0:	e2877004 	add	r7, r7, #4
    a6e4:	e1510007 	cmp	r1, r7
    a6e8:	a3a02000 	movge	r2, #0
    a6ec:	aaffffff 	bge	a6f0 <tetrisBlockContainsPointEnd>

0000a6f0 <tetrisBlockContainsPointEnd>:
    a6f0:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a6f4:	e1a00002 	mov	r0, r2
    a6f8:	e1a0f00e 	mov	pc, lr

0000a6fc <tetrisCheckBlockGridCollisions>:
    a6fc:	e1a0000d 	mov	r0, sp
    a700:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a704:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a708:	e89007f0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl}
    a70c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a710:	ebffff45 	bl	a42c <tetrisGetGridBitmaskForBlock>
    a714:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a718:	e19930ba 	ldrh	r3, [r9, sl]
    a71c:	e0010003 	and	r0, r1, r3
    a720:	e3500000 	cmp	r0, #0
    a724:	13a00001 	movne	r0, #1
    a728:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a72c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a730:	e1a0f00e 	mov	pc, lr

0000a734 <tetrisOnBlockCollision>:
    a734:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a738:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a73c:	ebffffcd 	bl	a678 <tetrisCreateNewBlock>
    a740:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a744:	e1a0f00e 	mov	pc, lr

0000a748 <tetrisRotateBlock>:
    a748:	e89d07f0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl}
    a74c:	e3300000 	teq	r0, #0
    a750:	0a000000 	beq	a758 <rotateLeft>
    a754:	1a000004 	bne	a76c <rotateRight>

0000a758 <rotateLeft>:
    a758:	e28aa002 	add	sl, sl, #2
    a75c:	e35a0006 	cmp	sl, #6
    a760:	c3a0a000 	movgt	sl, #0
    a764:	e58da018 	str	sl, [sp, #24]
    a768:	ea000004 	b	a780 <tetrisRotateBlockEnd>

0000a76c <rotateRight>:
    a76c:	e24aa002 	sub	sl, sl, #2
    a770:	e35a0000 	cmp	sl, #0
    a774:	b3a0a006 	movlt	sl, #6
    a778:	e58da018 	str	sl, [sp, #24]
    a77c:	eaffffff 	b	a780 <tetrisRotateBlockEnd>

0000a780 <tetrisRotateBlockEnd>:
    a780:	e1a0f00e 	mov	pc, lr

0000a784 <tetrisTranslateBlock>:
    a784:	e1a0b00e 	mov	fp, lr
    a788:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a78c:	e1a04006 	mov	r4, r6
    a790:	e1a05007 	mov	r5, r7
    a794:	e0866000 	add	r6, r6, r0
    a798:	e0877001 	add	r7, r7, r1
    a79c:	e357000b 	cmp	r7, #11
    a7a0:	a3a07000 	movge	r7, #0
    a7a4:	e58d4000 	str	r4, [sp]
    a7a8:	e58d5004 	str	r5, [sp, #4]
    a7ac:	e58d6008 	str	r6, [sp, #8]
    a7b0:	e58d700c 	str	r7, [sp, #12]
    a7b4:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a7b8:	e1a06004 	mov	r6, r4
    a7bc:	e1a07005 	mov	r7, r5
    a7c0:	e3a08000 	mov	r8, #0
    a7c4:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a7c8:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}

0000a7cc <tetrisTranslateBlockEnd>:
    a7cc:	e1a0f00b 	mov	pc, fp

0000a7d0 <tetrisGetMaxBlockPosition>:
    a7d0:	e89d07f0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl}
    a7d4:	e92d1800 	push	{fp, ip}
    a7d8:	e3a0b001 	mov	fp, #1
    a7dc:	e3a0c001 	mov	ip, #1
    a7e0:	e1a00006 	mov	r0, r6
    a7e4:	e1a01007 	mov	r1, r7

0000a7e8 <for_i_lessThanEqual_4_loop>:
    a7e8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000a7ec <for_j_lessThanEqual_4_loop>:
    a7ec:	e92d01c0 	push	{r6, r7, r8}
    a7f0:	e19930ba 	ldrh	r3, [r9, sl]
    a7f4:	e92d1800 	push	{fp, ip}
    a7f8:	e086600b 	add	r6, r6, fp
    a7fc:	e087700c 	add	r7, r7, ip
    a800:	e24bb001 	sub	fp, fp, #1
    a804:	e24cc001 	sub	ip, ip, #1
    a808:	e3a02004 	mov	r2, #4
    a80c:	e0020c92 	mul	r2, r2, ip
    a810:	e082200b 	add	r2, r2, fp
    a814:	e1a03213 	lsl	r3, r3, r2
    a818:	e3a02902 	mov	r2, #32768	; 0x8000
    a81c:	e0022003 	and	r2, r2, r3
    a820:	e3320000 	teq	r2, #0
    a824:	0a000003 	beq	a838 <for_j_lessThanEqual_4_loopEnd>
    a828:	e1500006 	cmp	r0, r6
    a82c:	b1a00006 	movlt	r0, r6
    a830:	e1510007 	cmp	r1, r7
    a834:	b1a01007 	movlt	r1, r7

0000a838 <for_j_lessThanEqual_4_loopEnd>:
    a838:	e8bd1800 	pop	{fp, ip}
    a83c:	e8bd01c0 	pop	{r6, r7, r8}
    a840:	e28cc001 	add	ip, ip, #1
    a844:	e35c0004 	cmp	ip, #4
    a848:	daffffe7 	ble	a7ec <for_j_lessThanEqual_4_loop>
    a84c:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    a850:	e28bb001 	add	fp, fp, #1
    a854:	e35b0004 	cmp	fp, #4
    a858:	daffffe2 	ble	a7e8 <for_i_lessThanEqual_4_loop>
    a85c:	e8bd1800 	pop	{fp, ip}

0000a860 <tetrisGetMaxBlockPositionEnd>:
    a860:	e1a0f00e 	mov	pc, lr

0000a864 <tetrisCheckBlockCollision>:
    a864:	e89d07f0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl}
    a868:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a86c:	e357000b 	cmp	r7, #11
    a870:	a3a07000 	movge	r7, #0
    a874:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a878:	e1a0f00e 	mov	pc, lr

0000a87c <clearScreen>:
    a87c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a880:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a884:	e3a04000 	mov	r4, #0
    a888:	e3a05000 	mov	r5, #0
    a88c:	e59f00c4 	ldr	r0, [pc, #196]	; a958 <waitLoop+0x28>
    a890:	e5906014 	ldr	r6, [r0, #20]
    a894:	e5907018 	ldr	r7, [r0, #24]
    a898:	e3a08000 	mov	r8, #0
    a89c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a8a0:	eb00000c 	bl	a8d8 <drawRect>
    a8a4:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    a8a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a8ac:	e1a0f00e 	mov	pc, lr

0000a8b0 <drawPixel>:
    a8b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a8b4:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    a8b8:	e0804501 	add	r4, r0, r1, lsl #10
    a8bc:	e1a04084 	lsl	r4, r4, #1
    a8c0:	e59f00dc 	ldr	r0, [pc, #220]	; a9a4 <waitLoop+0x74>
    a8c4:	e5900000 	ldr	r0, [r0]
    a8c8:	e18020b4 	strh	r2, [r0, r4]
    a8cc:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    a8d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a8d4:	e1a0f00e 	mov	pc, lr

0000a8d8 <drawRect>:
    a8d8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    a8dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a8e0:	e0866004 	add	r6, r6, r4
    a8e4:	e0877005 	add	r7, r7, r5

0000a8e8 <drawRectForLoopX>:
    a8e8:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000a8ec <drawRectForLoopY>:
    a8ec:	e1a00004 	mov	r0, r4
    a8f0:	e1a01005 	mov	r1, r5
    a8f4:	e1a02008 	mov	r2, r8
    a8f8:	ebffffec 	bl	a8b0 <drawPixel>
    a8fc:	e2855001 	add	r5, r5, #1
    a900:	e1550007 	cmp	r5, r7
    a904:	bafffff8 	blt	a8ec <drawRectForLoopY>
    a908:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    a90c:	e2844001 	add	r4, r4, #1
    a910:	e1540006 	cmp	r4, r6
    a914:	bafffff3 	blt	a8e8 <drawRectForLoopX>
    a918:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a91c:	e1a0f00e 	mov	pc, lr

0000a920 <startTimer>:
    a920:	e1a03000 	mov	r3, r0
    a924:	e59f007c 	ldr	r0, [pc, #124]	; a9a8 <waitLoop+0x78>
    a928:	e5901000 	ldr	r1, [r0]
    a92c:	e0811003 	add	r1, r1, r3

0000a930 <waitLoop>:
    a930:	e5902000 	ldr	r2, [r0]
    a934:	e1510002 	cmp	r1, r2
    a938:	8afffffc 	bhi	a930 <waitLoop>
    a93c:	e1a0f00e 	mov	pc, lr
    a940:	00654321 	.word	0x00654321
    a944:	00777721 	.word	0x00777721
    a948:	00fff721 	.word	0x00fff721
    a94c:	0000ffff 	.word	0x0000ffff
    a950:	00000101 	.word	0x00000101
    a954:	00000243 	.word	0x00000243
    a958:	00009080 	.word	0x00009080
    a95c:	0000967f 	.word	0x0000967f
    a960:	0000297e 	.word	0x0000297e
    a964:	00009bb0 	.word	0x00009bb0
    a968:	00000172 	.word	0x00000172
    a96c:	000001b5 	.word	0x000001b5
    a970:	00009c00 	.word	0x00009c00
    a974:	000001e7 	.word	0x000001e7
    a978:	00000247 	.word	0x00000247
    a97c:	00000285 	.word	0x00000285
    a980:	00009c10 	.word	0x00009c10
    a984:	000001eb 	.word	0x000001eb
    a988:	00000d7f 	.word	0x00000d7f
    a98c:	000093b0 	.word	0x000093b0
    a990:	000090f0 	.word	0x000090f0
    a994:	00009354 	.word	0x00009354
    a998:	00009354 	.word	0x00009354
    a99c:	001133ff 	.word	0x001133ff
    a9a0:	00009380 	.word	0x00009380
    a9a4:	000090e0 	.word	0x000090e0
    a9a8:	3f003004 	.word	0x3f003004
