
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea00073a 	b	9cf0 <main>

Disassembly of section .text:

00009cf0 <main>:
    9cf0:	e3a0d902 	mov	sp, #32768	; 0x8000
    9cf4:	eb00044c 	bl	ae2c <EnableJTAG>
    9cf8:	eb00046e 	bl	aeb8 <InitFrameBuffer>
    9cfc:	eb0003ce 	bl	ac3c <clearScreen>
    9d00:	ea000023 	b	9d94 <StartGame>

00009d04 <MainMenu>:
    9d04:	eb0001c3 	bl	a418 <ClearScreenBlack>
    9d08:	eb0001cf 	bl	a44c <DrawMainMenu>
    9d0c:	e3a09000 	mov	r9, #0

00009d10 <MainMenuPrompt>:
    9d10:	eb000581 	bl	b31c <sampleSNES>
    9d14:	e1a0a000 	mov	sl, r0
    9d18:	e3e01c01 	mvn	r1, #256	; 0x100
    9d1c:	e1c00001 	bic	r0, r0, r1
    9d20:	e3500000 	cmp	r0, #0
    9d24:	0a00000c 	beq	9d5c <MainMenuAPressed>
    9d28:	e1a0000a 	mov	r0, sl
    9d2c:	e3e01010 	mvn	r1, #16
    9d30:	e1c00001 	bic	r0, r0, r1
    9d34:	e3500000 	cmp	r0, #0
    9d38:	0a00000b 	beq	9d6c <MainMenuUpPressed>
    9d3c:	e1a0000a 	mov	r0, sl
    9d40:	e3e01020 	mvn	r1, #32
    9d44:	e1c00001 	bic	r0, r0, r1
    9d48:	e3500000 	cmp	r0, #0
    9d4c:	0a00000b 	beq	9d80 <MainMenuDownPressed>
    9d50:	e3a00801 	mov	r0, #65536	; 0x10000
    9d54:	eb0003ea 	bl	ad04 <startTimer>
    9d58:	eaffffec 	b	9d10 <MainMenuPrompt>

00009d5c <MainMenuAPressed>:
    9d5c:	e3590000 	cmp	r9, #0
    9d60:	0a00000b 	beq	9d94 <StartGame>
    9d64:	eb0001ab 	bl	a418 <ClearScreenBlack>
    9d68:	ea00001a 	b	9dd8 <mainEnd>

00009d6c <MainMenuUpPressed>:
    9d6c:	e3590000 	cmp	r9, #0
    9d70:	0affffe6 	beq	9d10 <MainMenuPrompt>
    9d74:	e3a09000 	mov	r9, #0
    9d78:	eb000176 	bl	a358 <SetMainMenuIndicatorStart>
    9d7c:	eaffffe3 	b	9d10 <MainMenuPrompt>

00009d80 <MainMenuDownPressed>:
    9d80:	e3590001 	cmp	r9, #1
    9d84:	0affffe1 	beq	9d10 <MainMenuPrompt>
    9d88:	e3a09001 	mov	r9, #1
    9d8c:	eb000189 	bl	a3b8 <SetMainMenuIndicatorQuit>
    9d90:	eaffffde 	b	9d10 <MainMenuPrompt>

00009d94 <StartGame>:
    9d94:	eb000560 	bl	b31c <sampleSNES>
    9d98:	eb000235 	bl	a674 <tetrisInitGrid>
    9d9c:	eb0000b7 	bl	a080 <DrawBoard>
    9da0:	eb000300 	bl	a9a8 <tetrisCreateNewBlock>

00009da4 <mainLoop>:
    9da4:	eb000291 	bl	a7f0 <tetrisDrawGrid>
    9da8:	eb0002d0 	bl	a8f0 <tetrisDrawBlock>

00009dac <applyUserTranslation>:
    9dac:	e3a00001 	mov	r0, #1
    9db0:	e3a01000 	mov	r1, #0
    9db4:	eb00037d 	bl	abb0 <tetrisTranslateBlock>

00009db8 <applyGravityTranslation>:
    9db8:	e3a00000 	mov	r0, #0
    9dbc:	e3a01001 	mov	r1, #1
    9dc0:	eb00037a 	bl	abb0 <tetrisTranslateBlock>

00009dc4 <applyUserRotation>:
    9dc4:	e3a00000 	mov	r0, #0
    9dc8:	eb000359 	bl	ab34 <tetrisRotateBlock>
    9dcc:	e59f0f50 	ldr	r0, [pc, #3920]	; ad24 <waitLoop+0x10>
    9dd0:	eb0003cb 	bl	ad04 <startTimer>
    9dd4:	eafffff2 	b	9da4 <mainLoop>

00009dd8 <mainEnd>:
    9dd8:	eafffffe 	b	9dd8 <mainEnd>

00009ddc <PauseMenuStart>:
    9ddc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9de0:	eb00002b 	bl	9e94 <DrawPauseMenu>
    9de4:	e3a09000 	mov	r9, #0

00009de8 <PauseMenuPrompt>:
    9de8:	eb00054b 	bl	b31c <sampleSNES>
    9dec:	e1a0a000 	mov	sl, r0
    9df0:	e3e01008 	mvn	r1, #8
    9df4:	e1c00001 	bic	r0, r0, r1
    9df8:	e3500000 	cmp	r0, #0
    9dfc:	0a000011 	beq	9e48 <PauseMenuStartPressed>
    9e00:	e1a0000a 	mov	r0, sl
    9e04:	e3e01c01 	mvn	r1, #256	; 0x100
    9e08:	e1c00001 	bic	r0, r0, r1
    9e0c:	e3500000 	cmp	r0, #0
    9e10:	0a00000e 	beq	9e50 <PauseMenuAPressed>
    9e14:	e1a0000a 	mov	r0, sl
    9e18:	e3e01010 	mvn	r1, #16
    9e1c:	e1c00001 	bic	r0, r0, r1
    9e20:	e3500000 	cmp	r0, #0
    9e24:	0a00000f 	beq	9e68 <PauseMenuUpPressed>
    9e28:	e1a0000a 	mov	r0, sl
    9e2c:	e3e01020 	mvn	r1, #32
    9e30:	e1c00001 	bic	r0, r0, r1
    9e34:	e3500000 	cmp	r0, #0
    9e38:	0a00000f 	beq	9e7c <PauseMenuDownPressed>
    9e3c:	e59f0ee4 	ldr	r0, [pc, #3812]	; ad28 <waitLoop+0x14>
    9e40:	eb0003af 	bl	ad04 <startTimer>
    9e44:	eaffffe7 	b	9de8 <PauseMenuPrompt>

00009e48 <PauseMenuStartPressed>:
    9e48:	eb00008c 	bl	a080 <DrawBoard>
    9e4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009e50 <PauseMenuAPressed>:
    9e50:	e3590000 	cmp	r9, #0
    9e54:	e3a01000 	mov	r1, #0
    9e58:	e59f0ecc 	ldr	r0, [pc, #3788]	; ad2c <waitLoop+0x18>
    9e5c:	e5801000 	str	r1, [r0]
    9e60:	0affffcb 	beq	9d94 <StartGame>
    9e64:	eaffffa6 	b	9d04 <MainMenu>

00009e68 <PauseMenuUpPressed>:
    9e68:	e3590000 	cmp	r9, #0
    9e6c:	0affffdd 	beq	9de8 <PauseMenuPrompt>
    9e70:	e3a09000 	mov	r9, #0
    9e74:	eb000051 	bl	9fc0 <SetPauseMenuIndicatorRestart>
    9e78:	eaffffda 	b	9de8 <PauseMenuPrompt>

00009e7c <PauseMenuDownPressed>:
    9e7c:	e3590001 	cmp	r9, #1
    9e80:	0affffd8 	beq	9de8 <PauseMenuPrompt>
    9e84:	e3a09001 	mov	r9, #1
    9e88:	eb000064 	bl	a020 <SetPauseMenuIndicatorQuit>
    9e8c:	eaffffd5 	b	9de8 <PauseMenuPrompt>
    9e90:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009e94 <DrawPauseMenu>:
    9e94:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9e98:	e59f0e90 	ldr	r0, [pc, #3728]	; ad30 <waitLoop+0x1c>
    9e9c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ea0:	e3a00f7d 	mov	r0, #500	; 0x1f4
    9ea4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ea8:	e3a00f96 	mov	r0, #600	; 0x258
    9eac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9eb0:	e3a00086 	mov	r0, #134	; 0x86
    9eb4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9eb8:	e3a000d0 	mov	r0, #208	; 0xd0
    9ebc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ec0:	eb000374 	bl	ac98 <drawRect>
    9ec4:	e3a00902 	mov	r0, #32768	; 0x8000
    9ec8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ecc:	e3a00004 	mov	r0, #4
    9ed0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ed4:	e3a00e26 	mov	r0, #608	; 0x260
    9ed8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9edc:	e3a00082 	mov	r0, #130	; 0x82
    9ee0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ee4:	e3a000cc 	mov	r0, #204	; 0xcc
    9ee8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9eec:	eb000369 	bl	ac98 <drawRect>
    9ef0:	e3a00902 	mov	r0, #32768	; 0x8000
    9ef4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ef8:	e3a00004 	mov	r0, #4
    9efc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f00:	e3a00e26 	mov	r0, #608	; 0x260
    9f04:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f08:	e59f0e24 	ldr	r0, [pc, #3620]	; ad34 <waitLoop+0x20>
    9f0c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f10:	e3a000cc 	mov	r0, #204	; 0xcc
    9f14:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f18:	eb00035e 	bl	ac98 <drawRect>
    9f1c:	e3a00902 	mov	r0, #32768	; 0x8000
    9f20:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f24:	e3a00f7d 	mov	r0, #500	; 0x1f4
    9f28:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f2c:	e3a00004 	mov	r0, #4
    9f30:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f34:	e3a00086 	mov	r0, #134	; 0x86
    9f38:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f3c:	e3a000cc 	mov	r0, #204	; 0xcc
    9f40:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f44:	eb000353 	bl	ac98 <drawRect>
    9f48:	e3a00902 	mov	r0, #32768	; 0x8000
    9f4c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f50:	e3a00f7d 	mov	r0, #500	; 0x1f4
    9f54:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f58:	e3a00004 	mov	r0, #4
    9f5c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f60:	e3a00086 	mov	r0, #134	; 0x86
    9f64:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f68:	e3a00fca 	mov	r0, #808	; 0x328
    9f6c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f70:	eb000348 	bl	ac98 <drawRect>
    9f74:	eb0003ef 	bl	af38 <drawPaused>
    9f78:	e59f0db8 	ldr	r0, [pc, #3512]	; ad38 <waitLoop+0x24>
    9f7c:	e3a01e1d 	mov	r1, #464	; 0x1d0
    9f80:	eb00016b 	bl	a534 <drawMenuButton>
    9f84:	e59f0db0 	ldr	r0, [pc, #3504]	; ad3c <waitLoop+0x28>
    9f88:	e3a01000 	mov	r1, #0
    9f8c:	e59f2dac 	ldr	r2, [pc, #3500]	; ad40 <waitLoop+0x2c>
    9f90:	e59f3da8 	ldr	r3, [pc, #3496]	; ad40 <waitLoop+0x2c>
    9f94:	eb00018f 	bl	a5d8 <WriteSentence>
    9f98:	e59f0d98 	ldr	r0, [pc, #3480]	; ad38 <waitLoop+0x24>
    9f9c:	e59f1da0 	ldr	r1, [pc, #3488]	; ad44 <waitLoop+0x30>
    9fa0:	eb000163 	bl	a534 <drawMenuButton>
    9fa4:	e59f0d9c 	ldr	r0, [pc, #3484]	; ad48 <waitLoop+0x34>
    9fa8:	e3a01000 	mov	r1, #0
    9fac:	e59f2d98 	ldr	r2, [pc, #3480]	; ad4c <waitLoop+0x38>
    9fb0:	e3a03f8d 	mov	r3, #564	; 0x234
    9fb4:	eb000187 	bl	a5d8 <WriteSentence>
    9fb8:	eb000000 	bl	9fc0 <SetPauseMenuIndicatorRestart>
    9fbc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009fc0 <SetPauseMenuIndicatorRestart>:
    9fc0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9fc4:	e59f0d84 	ldr	r0, [pc, #3460]	; ad50 <waitLoop+0x3c>
    9fc8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fcc:	e3a00014 	mov	r0, #20
    9fd0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fd4:	e3a00014 	mov	r0, #20
    9fd8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fdc:	e3a00e23 	mov	r0, #560	; 0x230
    9fe0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fe4:	e3a00f71 	mov	r0, #452	; 0x1c4
    9fe8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fec:	eb000329 	bl	ac98 <drawRect>
    9ff0:	e3a00000 	mov	r0, #0
    9ff4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ff8:	e3a00014 	mov	r0, #20
    9ffc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a000:	e3a00014 	mov	r0, #20
    a004:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a008:	e59f0d44 	ldr	r0, [pc, #3396]	; ad54 <waitLoop+0x40>
    a00c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a010:	e3a00f71 	mov	r0, #452	; 0x1c4
    a014:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a018:	eb00031e 	bl	ac98 <drawRect>
    a01c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a020 <SetPauseMenuIndicatorQuit>:
    a020:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a024:	e59f0d24 	ldr	r0, [pc, #3364]	; ad50 <waitLoop+0x3c>
    a028:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a02c:	e3a00014 	mov	r0, #20
    a030:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a034:	e3a00014 	mov	r0, #20
    a038:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a03c:	e59f0d10 	ldr	r0, [pc, #3344]	; ad54 <waitLoop+0x40>
    a040:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a044:	e3a00f71 	mov	r0, #452	; 0x1c4
    a048:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a04c:	eb000311 	bl	ac98 <drawRect>
    a050:	e3a00000 	mov	r0, #0
    a054:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a058:	e3a00014 	mov	r0, #20
    a05c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a060:	e3a00014 	mov	r0, #20
    a064:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a068:	e3a00e23 	mov	r0, #560	; 0x230
    a06c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a070:	e3a00f71 	mov	r0, #452	; 0x1c4
    a074:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a078:	eb000306 	bl	ac98 <drawRect>
    a07c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a080 <DrawBoard>:
    a080:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a084:	eb0000e3 	bl	a418 <ClearScreenBlack>
    a088:	e3a00a0e 	mov	r0, #57344	; 0xe000
    a08c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a090:	e3a00004 	mov	r0, #4
    a094:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a098:	e3a00fa2 	mov	r0, #648	; 0x288
    a09c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0a0:	e3a0004c 	mov	r0, #76	; 0x4c
    a0a4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0a8:	e3a000bc 	mov	r0, #188	; 0xbc
    a0ac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0b0:	eb0002f8 	bl	ac98 <drawRect>
    a0b4:	e3a00a0e 	mov	r0, #57344	; 0xe000
    a0b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0bc:	e3a00004 	mov	r0, #4
    a0c0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0c4:	e3a00fa2 	mov	r0, #648	; 0x288
    a0c8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0cc:	e3a00e2b 	mov	r0, #688	; 0x2b0
    a0d0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0d4:	e3a000bc 	mov	r0, #188	; 0xbc
    a0d8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0dc:	eb0002ed 	bl	ac98 <drawRect>
    a0e0:	e3a00a0e 	mov	r0, #57344	; 0xe000
    a0e4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0e8:	e3a00e26 	mov	r0, #608	; 0x260
    a0ec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0f0:	e3a00004 	mov	r0, #4
    a0f4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0f8:	e3a00050 	mov	r0, #80	; 0x50
    a0fc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a100:	e3a000bc 	mov	r0, #188	; 0xbc
    a104:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a108:	eb0002e2 	bl	ac98 <drawRect>
    a10c:	e3a00a0e 	mov	r0, #57344	; 0xe000
    a110:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a114:	e3a00e26 	mov	r0, #608	; 0x260
    a118:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a11c:	e3a00004 	mov	r0, #4
    a120:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a124:	e3a00050 	mov	r0, #80	; 0x50
    a128:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a12c:	e3a00c02 	mov	r0, #512	; 0x200
    a130:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a134:	eb0002d7 	bl	ac98 <drawRect>
    a138:	e3a00a0e 	mov	r0, #57344	; 0xe000
    a13c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a140:	e3a00e26 	mov	r0, #608	; 0x260
    a144:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a148:	e3a00004 	mov	r0, #4
    a14c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a150:	e3a00050 	mov	r0, #80	; 0x50
    a154:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a158:	e3a00d0d 	mov	r0, #832	; 0x340
    a15c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a160:	eb0002cc 	bl	ac98 <drawRect>
    a164:	e59f0bec 	ldr	r0, [pc, #3052]	; ad58 <waitLoop+0x44>
    a168:	e59f1bec 	ldr	r1, [pc, #3052]	; ad5c <waitLoop+0x48>
    a16c:	e59f2bec 	ldr	r2, [pc, #3052]	; ad60 <waitLoop+0x4c>
    a170:	e3a030e6 	mov	r3, #230	; 0xe6
    a174:	eb000117 	bl	a5d8 <WriteSentence>
    a178:	e59f0bdc 	ldr	r0, [pc, #3036]	; ad5c <waitLoop+0x48>
    a17c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a180:	e3a00036 	mov	r0, #54	; 0x36
    a184:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a188:	e3a00036 	mov	r0, #54	; 0x36
    a18c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a190:	e3a000d3 	mov	r0, #211	; 0xd3
    a194:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a198:	e59f0bc4 	ldr	r0, [pc, #3012]	; ad64 <waitLoop+0x50>
    a19c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1a0:	eb0002bc 	bl	ac98 <drawRect>
    a1a4:	e59f0bbc 	ldr	r0, [pc, #3004]	; ad68 <waitLoop+0x54>
    a1a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1ac:	e3a00032 	mov	r0, #50	; 0x32
    a1b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1b4:	e3a00032 	mov	r0, #50	; 0x32
    a1b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1bc:	e3a000d5 	mov	r0, #213	; 0xd5
    a1c0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1c4:	e59f0ba0 	ldr	r0, [pc, #2976]	; ad6c <waitLoop+0x58>
    a1c8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1cc:	eb0002b1 	bl	ac98 <drawRect>
    a1d0:	e59f0b98 	ldr	r0, [pc, #2968]	; ad70 <waitLoop+0x5c>
    a1d4:	e59f1b98 	ldr	r1, [pc, #2968]	; ad74 <waitLoop+0x60>
    a1d8:	e59f2b98 	ldr	r2, [pc, #2968]	; ad78 <waitLoop+0x64>
    a1dc:	e59f3b98 	ldr	r3, [pc, #2968]	; ad7c <waitLoop+0x68>
    a1e0:	eb0000fc 	bl	a5d8 <WriteSentence>
    a1e4:	e59f0b88 	ldr	r0, [pc, #2952]	; ad74 <waitLoop+0x60>
    a1e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1ec:	e3a00088 	mov	r0, #136	; 0x88
    a1f0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1f4:	e3a00088 	mov	r0, #136	; 0x88
    a1f8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a1fc:	e3a00e21 	mov	r0, #528	; 0x210
    a200:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a204:	e3a00fa1 	mov	r0, #644	; 0x284
    a208:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a20c:	eb0002a1 	bl	ac98 <drawRect>
    a210:	e59f0b50 	ldr	r0, [pc, #2896]	; ad68 <waitLoop+0x54>
    a214:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a218:	e3a00084 	mov	r0, #132	; 0x84
    a21c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a220:	e3a00084 	mov	r0, #132	; 0x84
    a224:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a228:	e59f0b50 	ldr	r0, [pc, #2896]	; ad80 <waitLoop+0x6c>
    a22c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a230:	e59f0b4c 	ldr	r0, [pc, #2892]	; ad84 <waitLoop+0x70>
    a234:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a238:	eb000296 	bl	ac98 <drawRect>
    a23c:	eb000000 	bl	a244 <UpdateScore>
    a240:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a244 <UpdateScore>:
    a244:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a248:	e59f0b18 	ldr	r0, [pc, #2840]	; ad68 <waitLoop+0x54>
    a24c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a250:	e3a00014 	mov	r0, #20
    a254:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a258:	e3a00018 	mov	r0, #24
    a25c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a260:	e3a000e4 	mov	r0, #228	; 0xe4
    a264:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a268:	e59f0b18 	ldr	r0, [pc, #2840]	; ad88 <waitLoop+0x74>
    a26c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a270:	eb000288 	bl	ac98 <drawRect>
    a274:	e59f0ab0 	ldr	r0, [pc, #2736]	; ad2c <waitLoop+0x18>
    a278:	e5901000 	ldr	r1, [r0]
    a27c:	e3510063 	cmp	r1, #99	; 0x63
    a280:	ca000011 	bgt	a2cc <threeDigitScore>
    a284:	e3510009 	cmp	r1, #9
    a288:	ca000003 	bgt	a29c <twoDigitScore>

0000a28c <oneDigitScore>:
    a28c:	e59f0af8 	ldr	r0, [pc, #2808]	; ad8c <waitLoop+0x78>
    a290:	e2811030 	add	r1, r1, #48	; 0x30
    a294:	e5c01006 	strb	r1, [r0, #6]
    a298:	ea000010 	b	a2e0 <PrintScore>

0000a29c <twoDigitScore>:
    a29c:	e59f0ae8 	ldr	r0, [pc, #2792]	; ad8c <waitLoop+0x78>
    a2a0:	e3a02000 	mov	r2, #0

0000a2a4 <twoDigitScoreLoop>:
    a2a4:	e351000a 	cmp	r1, #10
    a2a8:	ba000002 	blt	a2b8 <twoDigitScoreLoopDone>
    a2ac:	e241100a 	sub	r1, r1, #10
    a2b0:	e2822001 	add	r2, r2, #1
    a2b4:	eafffffa 	b	a2a4 <twoDigitScoreLoop>

0000a2b8 <twoDigitScoreLoopDone>:
    a2b8:	e2811030 	add	r1, r1, #48	; 0x30
    a2bc:	e2822030 	add	r2, r2, #48	; 0x30
    a2c0:	e5c02005 	strb	r2, [r0, #5]
    a2c4:	e5c01006 	strb	r1, [r0, #6]
    a2c8:	ea000004 	b	a2e0 <PrintScore>

0000a2cc <threeDigitScore>:
    a2cc:	e2411064 	sub	r1, r1, #100	; 0x64
    a2d0:	e59f0ab4 	ldr	r0, [pc, #2740]	; ad8c <waitLoop+0x78>
    a2d4:	e3a02031 	mov	r2, #49	; 0x31
    a2d8:	e5c02004 	strb	r2, [r0, #4]
    a2dc:	eaffffee 	b	a29c <twoDigitScore>

0000a2e0 <PrintScore>:
    a2e0:	e59f0aa4 	ldr	r0, [pc, #2724]	; ad8c <waitLoop+0x78>
    a2e4:	e3a01000 	mov	r1, #0
    a2e8:	e59f2a98 	ldr	r2, [pc, #2712]	; ad88 <waitLoop+0x74>
    a2ec:	e3a030e6 	mov	r3, #230	; 0xe6
    a2f0:	eb0000b8 	bl	a5d8 <WriteSentence>
    a2f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a2f8 <DrawTitle>:
    a2f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a2fc:	e3a00000 	mov	r0, #0
    a300:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a304:	e3a0001e 	mov	r0, #30
    a308:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a30c:	e3a00064 	mov	r0, #100	; 0x64
    a310:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a314:	e3a0005e 	mov	r0, #94	; 0x5e
    a318:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a31c:	e3a000de 	mov	r0, #222	; 0xde
    a320:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a324:	eb00025b 	bl	ac98 <drawRect>
    a328:	e3a00000 	mov	r0, #0
    a32c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a330:	e3a00096 	mov	r0, #150	; 0x96
    a334:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a338:	e3a0001e 	mov	r0, #30
    a33c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a340:	e3a0007c 	mov	r0, #124	; 0x7c
    a344:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a348:	e59f0a40 	ldr	r0, [pc, #2624]	; ad90 <waitLoop+0x7c>
    a34c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a350:	eb000250 	bl	ac98 <drawRect>
    a354:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a358 <SetMainMenuIndicatorStart>:
    a358:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a35c:	e59f09ec 	ldr	r0, [pc, #2540]	; ad50 <waitLoop+0x3c>
    a360:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a364:	e3a00014 	mov	r0, #20
    a368:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a36c:	e3a00014 	mov	r0, #20
    a370:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a374:	e3a00fa5 	mov	r0, #660	; 0x294
    a378:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a37c:	e3a00f71 	mov	r0, #452	; 0x1c4
    a380:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a384:	eb000243 	bl	ac98 <drawRect>
    a388:	e3a00000 	mov	r0, #0
    a38c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a390:	e3a00014 	mov	r0, #20
    a394:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a398:	e3a00014 	mov	r0, #20
    a39c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3a0:	e59f09ec 	ldr	r0, [pc, #2540]	; ad94 <waitLoop+0x80>
    a3a4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3a8:	e3a00f71 	mov	r0, #452	; 0x1c4
    a3ac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3b0:	eb000238 	bl	ac98 <drawRect>
    a3b4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a3b8 <SetMainMenuIndicatorQuit>:
    a3b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a3bc:	e59f098c 	ldr	r0, [pc, #2444]	; ad50 <waitLoop+0x3c>
    a3c0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3c4:	e3a00014 	mov	r0, #20
    a3c8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3cc:	e3a00014 	mov	r0, #20
    a3d0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3d4:	e59f09b8 	ldr	r0, [pc, #2488]	; ad94 <waitLoop+0x80>
    a3d8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3dc:	e3a00f71 	mov	r0, #452	; 0x1c4
    a3e0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3e4:	eb00022b 	bl	ac98 <drawRect>
    a3e8:	e3a00000 	mov	r0, #0
    a3ec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3f0:	e3a00014 	mov	r0, #20
    a3f4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a3f8:	e3a00014 	mov	r0, #20
    a3fc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a400:	e3a00fa5 	mov	r0, #660	; 0x294
    a404:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a408:	e3a00f71 	mov	r0, #452	; 0x1c4
    a40c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a410:	eb000220 	bl	ac98 <drawRect>
    a414:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a418 <ClearScreenBlack>:
    a418:	e92d4600 	push	{r9, sl, lr}
    a41c:	e59f0974 	ldr	r0, [pc, #2420]	; ad98 <waitLoop+0x84>
    a420:	e5909014 	ldr	r9, [r0, #20]
    a424:	e590a018 	ldr	sl, [r0, #24]
    a428:	e3a00000 	mov	r0, #0
    a42c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a430:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    a434:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    a438:	e3a00000 	mov	r0, #0
    a43c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a440:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a444:	eb000213 	bl	ac98 <drawRect>
    a448:	e8bd8600 	pop	{r9, sl, pc}

0000a44c <DrawMainMenu>:
    a44c:	e92d4600 	push	{r9, sl, lr}
    a450:	e59f0940 	ldr	r0, [pc, #2368]	; ad98 <waitLoop+0x84>
    a454:	e5909014 	ldr	r9, [r0, #20]
    a458:	e590a018 	ldr	sl, [r0, #24]
    a45c:	e59f08cc 	ldr	r0, [pc, #2252]	; ad30 <waitLoop+0x1c>
    a460:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a464:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    a468:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    a46c:	e3a00000 	mov	r0, #0
    a470:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a474:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a478:	eb000206 	bl	ac98 <drawRect>
    a47c:	e59f0918 	ldr	r0, [pc, #2328]	; ad9c <waitLoop+0x88>
    a480:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a484:	e3a000c8 	mov	r0, #200	; 0xc8
    a488:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a48c:	e3a00f96 	mov	r0, #600	; 0x258
    a490:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a494:	e3a00054 	mov	r0, #84	; 0x54
    a498:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a49c:	e3a000d4 	mov	r0, #212	; 0xd4
    a4a0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4a4:	eb0001fb 	bl	ac98 <drawRect>
    a4a8:	e59f08ec 	ldr	r0, [pc, #2284]	; ad9c <waitLoop+0x88>
    a4ac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4b0:	e3a000c8 	mov	r0, #200	; 0xc8
    a4b4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4b8:	e3a000c8 	mov	r0, #200	; 0xc8
    a4bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4c0:	e3a00f47 	mov	r0, #284	; 0x11c
    a4c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4c8:	e3a00f67 	mov	r0, #412	; 0x19c
    a4cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4d0:	eb0001f0 	bl	ac98 <drawRect>
    a4d4:	ebffff87 	bl	a2f8 <DrawTitle>
    a4d8:	e59f08c0 	ldr	r0, [pc, #2240]	; ada0 <waitLoop+0x8c>
    a4dc:	e3a01000 	mov	r1, #0
    a4e0:	e59f28bc 	ldr	r2, [pc, #2236]	; ada4 <waitLoop+0x90>
    a4e4:	e3a03044 	mov	r3, #68	; 0x44
    a4e8:	eb00003a 	bl	a5d8 <WriteSentence>
    a4ec:	e59f0844 	ldr	r0, [pc, #2116]	; ad38 <waitLoop+0x24>
    a4f0:	e3a01f8d 	mov	r1, #564	; 0x234
    a4f4:	eb00000e 	bl	a534 <drawMenuButton>
    a4f8:	e59f08a8 	ldr	r0, [pc, #2216]	; ada8 <waitLoop+0x94>
    a4fc:	e3a01000 	mov	r1, #0
    a500:	e59f28a4 	ldr	r2, [pc, #2212]	; adac <waitLoop+0x98>
    a504:	e59f38a4 	ldr	r3, [pc, #2212]	; adb0 <waitLoop+0x9c>
    a508:	eb000032 	bl	a5d8 <WriteSentence>
    a50c:	e59f0824 	ldr	r0, [pc, #2084]	; ad38 <waitLoop+0x24>
    a510:	e59f189c 	ldr	r1, [pc, #2204]	; adb4 <waitLoop+0xa0>
    a514:	eb000006 	bl	a534 <drawMenuButton>
    a518:	e59f0828 	ldr	r0, [pc, #2088]	; ad48 <waitLoop+0x34>
    a51c:	e3a01000 	mov	r1, #0
    a520:	e59f2824 	ldr	r2, [pc, #2084]	; ad4c <waitLoop+0x38>
    a524:	e3a03fa6 	mov	r3, #664	; 0x298
    a528:	eb00002a 	bl	a5d8 <WriteSentence>
    a52c:	ebffff89 	bl	a358 <SetMainMenuIndicatorStart>
    a530:	e8bd8600 	pop	{r9, sl, pc}

0000a534 <drawMenuButton>:
    a534:	e92d4600 	push	{r9, sl, lr}
    a538:	e1a09000 	mov	r9, r0
    a53c:	e1a0a001 	mov	sl, r1
    a540:	e3a00000 	mov	r0, #0
    a544:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a548:	e3a00032 	mov	r0, #50	; 0x32
    a54c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a550:	e3a00096 	mov	r0, #150	; 0x96
    a554:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a558:	e1a0000a 	mov	r0, sl
    a55c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a560:	e1a00009 	mov	r0, r9
    a564:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a568:	eb0001ca 	bl	ac98 <drawRect>
    a56c:	e2899005 	add	r9, r9, #5
    a570:	e28aa005 	add	sl, sl, #5
    a574:	e59f083c 	ldr	r0, [pc, #2108]	; adb8 <waitLoop+0xa4>
    a578:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a57c:	e3a00028 	mov	r0, #40	; 0x28
    a580:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a584:	e3a0008c 	mov	r0, #140	; 0x8c
    a588:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a58c:	e1a0000a 	mov	r0, sl
    a590:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a594:	e1a00009 	mov	r0, r9
    a598:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a59c:	eb0001bd 	bl	ac98 <drawRect>
    a5a0:	e2899005 	add	r9, r9, #5
    a5a4:	e28aa005 	add	sl, sl, #5
    a5a8:	e59f07a0 	ldr	r0, [pc, #1952]	; ad50 <waitLoop+0x3c>
    a5ac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5b0:	e3a0001e 	mov	r0, #30
    a5b4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5b8:	e3a0001e 	mov	r0, #30
    a5bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5c0:	e1a0000a 	mov	r0, sl
    a5c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5c8:	e1a00009 	mov	r0, r9
    a5cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5d0:	eb0001b0 	bl	ac98 <drawRect>
    a5d4:	e8bd8600 	pop	{r9, sl, pc}

0000a5d8 <WriteSentence>:
    a5d8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a5dc:	e1a05000 	mov	r5, r0
    a5e0:	e5954000 	ldr	r4, [r5]
    a5e4:	e2855004 	add	r5, r5, #4
    a5e8:	e1a06001 	mov	r6, r1
    a5ec:	e1a08002 	mov	r8, r2
    a5f0:	e1a07003 	mov	r7, r3

0000a5f4 <LoadChar>:
    a5f4:	e4d50001 	ldrb	r0, [r5], #1
    a5f8:	e1a01006 	mov	r1, r6
    a5fc:	e1a02007 	mov	r2, r7
    a600:	e1a03008 	mov	r3, r8
    a604:	eb000004 	bl	a61c <DrawChar>
    a608:	e2888008 	add	r8, r8, #8
    a60c:	e2444001 	sub	r4, r4, #1
    a610:	e3540000 	cmp	r4, #0
    a614:	cafffff6 	bgt	a5f4 <LoadChar>
    a618:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000a61c <DrawChar>:
    a61c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a620:	e1a09001 	mov	r9, r1
    a624:	e59f4790 	ldr	r4, [pc, #1936]	; adbc <waitLoop+0xa8>
    a628:	e0844200 	add	r4, r4, r0, lsl #4
    a62c:	e1a06002 	mov	r6, r2

0000a630 <charLoop$>:
    a630:	e1a05003 	mov	r5, r3
    a634:	e3a08001 	mov	r8, #1
    a638:	e4d47001 	ldrb	r7, [r4], #1

0000a63c <rowLoop$>:
    a63c:	e1170008 	tst	r7, r8
    a640:	0a000003 	beq	a654 <noPixel$>
    a644:	e1a00005 	mov	r0, r5
    a648:	e1a01006 	mov	r1, r6
    a64c:	e1a02009 	mov	r2, r9
    a650:	eb000186 	bl	ac70 <drawPixel>

0000a654 <noPixel$>:
    a654:	e2855001 	add	r5, r5, #1
    a658:	e1a08088 	lsl	r8, r8, #1
    a65c:	e3180c01 	tst	r8, #256	; 0x100
    a660:	0afffff5 	beq	a63c <rowLoop$>
    a664:	e2866001 	add	r6, r6, #1
    a668:	e314000f 	tst	r4, #15
    a66c:	1affffef 	bne	a630 <charLoop$>
    a670:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000a674 <tetrisInitGrid>:
    a674:	e59f0744 	ldr	r0, [pc, #1860]	; adc0 <waitLoop+0xac>
    a678:	e280100c 	add	r1, r0, #12
    a67c:	e59f2740 	ldr	r2, [pc, #1856]	; adc4 <waitLoop+0xb0>
    a680:	e3a03000 	mov	r3, #0

0000a684 <forEach_block_in_tetrisGrid_loop>:
    a684:	e5813000 	str	r3, [r1]
    a688:	e2811004 	add	r1, r1, #4
    a68c:	e1510002 	cmp	r1, r2
    a690:	aa000000 	bge	a698 <forEach_block_in_tetrisGrid_loopEnd>
    a694:	bafffffa 	blt	a684 <forEach_block_in_tetrisGrid_loop>

0000a698 <forEach_block_in_tetrisGrid_loopEnd>:
    a698:	e1a0f00e 	mov	pc, lr

0000a69c <tetrisSetGridBlockColor>:
    a69c:	e8bd0007 	pop	{r0, r1, r2}
    a6a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a6a4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a6a8:	e59f3710 	ldr	r3, [pc, #1808]	; adc0 <waitLoop+0xac>
    a6ac:	e8930070 	ldm	r3, {r4, r5, r6}
    a6b0:	e283700c 	add	r7, r3, #12
    a6b4:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    a6b8:	e92d0013 	push	{r0, r1, r4}
    a6bc:	eb00018b 	bl	acf0 <positionToArrayOffset>
    a6c0:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    a6c4:	e1a08108 	lsl	r8, r8, #2
    a6c8:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
    a6cc:	e7872008 	str	r2, [r7, r8]
    a6d0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    a6d4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a6d8:	e1a0f00e 	mov	pc, lr

0000a6dc <tetrisGetGridBlockColor>:
    a6dc:	e8bd0006 	pop	{r1, r2}
    a6e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a6e4:	e92d03f0 	push	{r4, r5, r6, r7, r8, r9}
    a6e8:	e59f36d0 	ldr	r3, [pc, #1744]	; adc0 <waitLoop+0xac>
    a6ec:	e8930070 	ldm	r3, {r4, r5, r6}
    a6f0:	e283700c 	add	r7, r3, #12
    a6f4:	e3e094ff 	mvn	r9, #-16777216	; 0xff000000
    a6f8:	e3510000 	cmp	r1, #0
    a6fc:	ba00000a 	blt	a72c <tetrisGetGridBlockColorEnd>
    a700:	e1510004 	cmp	r1, r4
    a704:	aa000008 	bge	a72c <tetrisGetGridBlockColorEnd>
    a708:	e3520000 	cmp	r2, #0
    a70c:	ba000006 	blt	a72c <tetrisGetGridBlockColorEnd>
    a710:	e1520005 	cmp	r2, r5
    a714:	aa000004 	bge	a72c <tetrisGetGridBlockColorEnd>

0000a718 <tetrisGetGridBlockColor_validInput>:
    a718:	e92d0016 	push	{r1, r2, r4}
    a71c:	eb000173 	bl	acf0 <positionToArrayOffset>
    a720:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    a724:	e1a08108 	lsl	r8, r8, #2
    a728:	e7979008 	ldr	r9, [r7, r8]

0000a72c <tetrisGetGridBlockColorEnd>:
    a72c:	e1a00009 	mov	r0, r9
    a730:	e8bd03f0 	pop	{r4, r5, r6, r7, r8, r9}
    a734:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a738:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a73c:	e1a0f00e 	mov	pc, lr

0000a740 <tetrisClearGridBlock>:
    a740:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a744:	e3a02000 	mov	r2, #0
    a748:	e92d0007 	push	{r0, r1, r2}
    a74c:	ebffffd2 	bl	a69c <tetrisSetGridBlockColor>
    a750:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a754:	e1a0f00e 	mov	pc, lr

0000a758 <tetrisGetGridBitmaskForBlock>:
    a758:	e1a0000d 	mov	r0, sp
    a75c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a760:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a764:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    a768:	e92d1800 	push	{fp, ip}
    a76c:	e3a00000 	mov	r0, #0
    a770:	e3a0b000 	mov	fp, #0
    a774:	e3a0c000 	mov	ip, #0

0000a778 <tetrisGetGridBitmaskForBlock_for_i_lessThan_4_loop>:
    a778:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000a77c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop>:
    a77c:	e92d0030 	push	{r4, r5}
    a780:	e084400b 	add	r4, r4, fp
    a784:	e085500c 	add	r5, r5, ip
    a788:	e92d1801 	push	{r0, fp, ip}
    a78c:	e92d0030 	push	{r4, r5}
    a790:	ebffffd1 	bl	a6dc <tetrisGetGridBlockColor>
    a794:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)
    a798:	e8bd1801 	pop	{r0, fp, ip}
    a79c:	e3330000 	teq	r3, #0
    a7a0:	0a000005 	beq	a7bc <poop>
    a7a4:	e3a01004 	mov	r1, #4
    a7a8:	e001019c 	mul	r1, ip, r1
    a7ac:	e081100b 	add	r1, r1, fp
    a7b0:	e3a02902 	mov	r2, #32768	; 0x8000
    a7b4:	e1a02132 	lsr	r2, r2, r1
    a7b8:	e1800002 	orr	r0, r0, r2

0000a7bc <poop>:
    a7bc:	e8bd0030 	pop	{r4, r5}
    a7c0:	e28cc001 	add	ip, ip, #1
    a7c4:	e35c0004 	cmp	ip, #4
    a7c8:	baffffeb 	blt	a77c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop>
    a7cc:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    a7d0:	e28bb001 	add	fp, fp, #1
    a7d4:	e35b0004 	cmp	fp, #4
    a7d8:	baffffe6 	blt	a778 <tetrisGetGridBitmaskForBlock_for_i_lessThan_4_loop>
    a7dc:	e8bd1800 	pop	{fp, ip}
    a7e0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    a7e4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a7e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7ec:	e1a0f00e 	mov	pc, lr

0000a7f0 <tetrisDrawGrid>:
    a7f0:	e1a0000d 	mov	r0, sp
    a7f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a7f8:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a7fc:	e59f75bc 	ldr	r7, [pc, #1468]	; adc0 <waitLoop+0xac>
    a800:	e8970700 	ldm	r7, {r8, r9, sl}
    a804:	e287b00c 	add	fp, r7, #12
    a808:	e1a07000 	mov	r7, r0
    a80c:	e3a04000 	mov	r4, #0
    a810:	e3a05000 	mov	r5, #0
    a814:	e3a06000 	mov	r6, #0

0000a818 <for_curCol_lessThan_cols_loop>:
    a818:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000a81c <for_curRow_lessThan_rows_loop>:
    a81c:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a820:	e320f000 	nop	{0}
    a824:	e320f000 	nop	{0}
    a828:	e8971fc0 	ldm	r7, {r6, r7, r8, r9, sl, fp, ip}
    a82c:	e92d1fc0 	push	{r6, r7, r8, r9, sl, fp, ip}
    a830:	e1a00004 	mov	r0, r4
    a834:	e1a01005 	mov	r1, r5
    a838:	eb00007d 	bl	aa34 <tetrisBlockBitForGridPoint>
    a83c:	e1a00004 	mov	r0, r4
    a840:	e1a01005 	mov	r1, r5
    a844:	eb000060 	bl	a9cc <tetrisBlockContainsPoint>
    a848:	e8bd1fc0 	pop	{r6, r7, r8, r9, sl, fp, ip}
    a84c:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a850:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a854:	e3300000 	teq	r0, #0
    a858:	e92d0130 	push	{r4, r5, r8}
    a85c:	eb000123 	bl	acf0 <positionToArrayOffset>
    a860:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    a864:	e1a0c10c 	lsl	ip, ip, #2
    a868:	e79b600c 	ldr	r6, [fp, ip]
    a86c:	e320f000 	nop	{0}
    a870:	e92d000f 	push	{r0, r1, r2, r3}
    a874:	e92d0030 	push	{r4, r5}
    a878:	eb000011 	bl	a8c4 <tetrisGetRectForGridPosition>
    a87c:	e8bd000f 	pop	{r0, r1, r2, r3}
    a880:	e320f000 	nop	{0}
    a884:	e28000c0 	add	r0, r0, #192	; 0xc0
    a888:	e2811050 	add	r1, r1, #80	; 0x50
    a88c:	e92d004f 	push	{r0, r1, r2, r3, r6}
    a890:	eb000100 	bl	ac98 <drawRect>
    a894:	e8bd000f 	pop	{r0, r1, r2, r3}

0000a898 <skippy>:
    a898:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a89c:	e2855001 	add	r5, r5, #1
    a8a0:	e1550009 	cmp	r5, r9
    a8a4:	baffffdc 	blt	a81c <for_curRow_lessThan_rows_loop>
    a8a8:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    a8ac:	e2844001 	add	r4, r4, #1
    a8b0:	e1540008 	cmp	r4, r8
    a8b4:	baffffd7 	blt	a818 <for_curCol_lessThan_cols_loop>
    a8b8:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a8bc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a8c0:	e1a0f00e 	mov	pc, lr

0000a8c4 <tetrisGetRectForGridPosition>:
    a8c4:	e8bd0003 	pop	{r0, r1}
    a8c8:	e92d00f0 	push	{r4, r5, r6, r7}
    a8cc:	e59f44ec 	ldr	r4, [pc, #1260]	; adc0 <waitLoop+0xac>
    a8d0:	e89400e0 	ldm	r4, {r5, r6, r7}
    a8d4:	e1a02007 	mov	r2, r7
    a8d8:	e1a03007 	mov	r3, r7
    a8dc:	e0000092 	mul	r0, r2, r0
    a8e0:	e0010193 	mul	r1, r3, r1
    a8e4:	e8bd00f0 	pop	{r4, r5, r6, r7}
    a8e8:	e92d000f 	push	{r0, r1, r2, r3}
    a8ec:	e1a0f00e 	mov	pc, lr

0000a8f0 <tetrisDrawBlock>:
    a8f0:	e1a0000d 	mov	r0, sp
    a8f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a8f8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a8fc:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    a900:	e92d1800 	push	{fp, ip}
    a904:	e3a0b000 	mov	fp, #0
    a908:	e3a0c000 	mov	ip, #0

0000a90c <for_i_lessThan_4_loop>:
    a90c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000a910 <for_j_lessThan_4_loop>:
    a910:	e92d0070 	push	{r4, r5, r6}
    a914:	e19720b8 	ldrh	r2, [r7, r8]
    a918:	e084400b 	add	r4, r4, fp
    a91c:	e085500c 	add	r5, r5, ip
    a920:	e3a01004 	mov	r1, #4
    a924:	e0010c91 	mul	r1, r1, ip
    a928:	e081100b 	add	r1, r1, fp
    a92c:	e1a02112 	lsl	r2, r2, r1
    a930:	e3a01902 	mov	r1, #32768	; 0x8000
    a934:	e0011002 	and	r1, r1, r2
    a938:	e3310000 	teq	r1, #0
    a93c:	e52d6004 	push	{r6}		; (str r6, [sp, #-4]!)
    a940:	03a06000 	moveq	r6, #0
    a944:	0a00000a 	beq	a974 <blockHasNoData>

0000a948 <blockHasData>:
    a948:	e92d000f 	push	{r0, r1, r2, r3}
    a94c:	e320f000 	nop	{0}
    a950:	e92d0030 	push	{r4, r5}
    a954:	ebffffda 	bl	a8c4 <tetrisGetRectForGridPosition>
    a958:	e8bd000f 	pop	{r0, r1, r2, r3}
    a95c:	e320f000 	nop	{0}
    a960:	e28000c0 	add	r0, r0, #192	; 0xc0
    a964:	e2811050 	add	r1, r1, #80	; 0x50
    a968:	e92d004f 	push	{r0, r1, r2, r3, r6}
    a96c:	eb0000c9 	bl	ac98 <drawRect>
    a970:	e8bd000f 	pop	{r0, r1, r2, r3}

0000a974 <blockHasNoData>:
    a974:	e49d6004 	pop	{r6}		; (ldr r6, [sp], #4)
    a978:	e8bd0070 	pop	{r4, r5, r6}
    a97c:	e28cc001 	add	ip, ip, #1
    a980:	e35c0004 	cmp	ip, #4
    a984:	baffffe1 	blt	a910 <for_j_lessThan_4_loop>
    a988:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    a98c:	e28bb001 	add	fp, fp, #1
    a990:	e35b0004 	cmp	fp, #4
    a994:	baffffdc 	blt	a90c <for_i_lessThan_4_loop>
    a998:	e8bd1800 	pop	{fp, ip}
    a99c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    a9a0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a9a4:	e1a0f00e 	mov	pc, lr

0000a9a8 <tetrisCreateNewBlock>:
    a9a8:	e59f0418 	ldr	r0, [pc, #1048]	; adc8 <waitLoop+0xb4>
    a9ac:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}

0000a9b0 <initializeTetrisBlock>:
    a9b0:	e3a04000 	mov	r4, #0
    a9b4:	e3a05000 	mov	r5, #0
    a9b8:	e59f640c 	ldr	r6, [pc, #1036]	; adcc <waitLoop+0xb8>
    a9bc:	e59f740c 	ldr	r7, [pc, #1036]	; add0 <waitLoop+0xbc>
    a9c0:	e3a08000 	mov	r8, #0

0000a9c4 <initializeTetrisBlockEnd>:
    a9c4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a9c8:	e1a0f00e 	mov	pc, lr

0000a9cc <tetrisBlockContainsPoint>:
    a9cc:	e1a0300d 	mov	r3, sp
    a9d0:	e3a02001 	mov	r2, #1
    a9d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a9d8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a9dc:	e89301f0 	ldm	r3, {r4, r5, r6, r7, r8}
    a9e0:	e1500004 	cmp	r0, r4
    a9e4:	b3a02000 	movlt	r2, #0
    a9e8:	ba00000c 	blt	aa20 <tetrisBlockDoesNotContainPoint>
    a9ec:	e2844004 	add	r4, r4, #4
    a9f0:	e1500004 	cmp	r0, r4
    a9f4:	a3a02000 	movge	r2, #0
    a9f8:	aa000008 	bge	aa20 <tetrisBlockDoesNotContainPoint>
    a9fc:	e1510005 	cmp	r1, r5
    aa00:	b3a02000 	movlt	r2, #0
    aa04:	ba000005 	blt	aa20 <tetrisBlockDoesNotContainPoint>
    aa08:	e2855004 	add	r5, r5, #4
    aa0c:	e1510005 	cmp	r1, r5
    aa10:	a3a02000 	movge	r2, #0
    aa14:	aa000001 	bge	aa20 <tetrisBlockDoesNotContainPoint>

0000aa18 <tetrisBlockDoesContainPoint>:
    aa18:	e320f000 	nop	{0}
    aa1c:	e3a00001 	mov	r0, #1

0000aa20 <tetrisBlockDoesNotContainPoint>:
    aa20:	e3a00000 	mov	r0, #0

0000aa24 <tetrisBlockContainsPointEnd>:
    aa24:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    aa28:	e1a00002 	mov	r0, r2
    aa2c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    aa30:	e1a0f00e 	mov	pc, lr

0000aa34 <tetrisBlockBitForGridPoint>:
    aa34:	e1a0f00e 	mov	pc, lr

0000aa38 <tetrisCheckBlockGridCollisions>:
    aa38:	e1a0000d 	mov	r0, sp
    aa3c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aa40:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aa44:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    aa48:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aa4c:	ebffff41 	bl	a758 <tetrisGetGridBitmaskForBlock>
    aa50:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    aa54:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    aa58:	e320f000 	nop	{0}
    aa5c:	e19710b8 	ldrh	r1, [r7, r8]
    aa60:	e0000001 	and	r0, r0, r1
    aa64:	e3500000 	cmp	r0, #0
    aa68:	13a00001 	movne	r0, #1
    aa6c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    aa70:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    aa74:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa78:	e1a0f00e 	mov	pc, lr

0000aa7c <tetrisOnBlockCollision>:
    aa7c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    aa80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aa84:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aa88:	e19730b8 	ldrh	r3, [r7, r8]
    aa8c:	e320f000 	nop	{0}
    aa90:	eb000005 	bl	aaac <writeBlockToGrid>
    aa94:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    aa98:	ebffffc2 	bl	a9a8 <tetrisCreateNewBlock>
    aa9c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    aaa0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    aaa4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aaa8:	e1a0f00e 	mov	pc, lr

0000aaac <writeBlockToGrid>:
    aaac:	e1a0000d 	mov	r0, sp
    aab0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aab4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aab8:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    aabc:	e92d1800 	push	{fp, ip}
    aac0:	e3a0b000 	mov	fp, #0
    aac4:	e3a0c000 	mov	ip, #0

0000aac8 <writeBlockToGrid_for_i_lessThan_4_loop>:
    aac8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000aacc <writeBlockToGrid_for_j_lessThan_4_loop>:
    aacc:	e92d0070 	push	{r4, r5, r6}
    aad0:	e19720b8 	ldrh	r2, [r7, r8]
    aad4:	e084400b 	add	r4, r4, fp
    aad8:	e085500c 	add	r5, r5, ip
    aadc:	e3a01004 	mov	r1, #4
    aae0:	e0010c91 	mul	r1, r1, ip
    aae4:	e081100b 	add	r1, r1, fp
    aae8:	e1a02112 	lsl	r2, r2, r1
    aaec:	e3a01902 	mov	r1, #32768	; 0x8000
    aaf0:	e0011002 	and	r1, r1, r2
    aaf4:	e3310000 	teq	r1, #0
    aaf8:	0a000001 	beq	ab04 <writeBlockToGrid_blockHasNoData>

0000aafc <writeBlockToGrid_blockHasData>:
    aafc:	e92d0070 	push	{r4, r5, r6}
    ab00:	ebfffee5 	bl	a69c <tetrisSetGridBlockColor>

0000ab04 <writeBlockToGrid_blockHasNoData>:
    ab04:	e8bd0070 	pop	{r4, r5, r6}
    ab08:	e28cc001 	add	ip, ip, #1
    ab0c:	e35c0004 	cmp	ip, #4
    ab10:	baffffed 	blt	aacc <writeBlockToGrid_for_j_lessThan_4_loop>
    ab14:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    ab18:	e28bb001 	add	fp, fp, #1
    ab1c:	e35b0004 	cmp	fp, #4
    ab20:	baffffe8 	blt	aac8 <writeBlockToGrid_for_i_lessThan_4_loop>
    ab24:	e8bd1800 	pop	{fp, ip}
    ab28:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ab2c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ab30:	e1a0f00e 	mov	pc, lr

0000ab34 <tetrisRotateBlock>:
    ab34:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ab38:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ab3c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ab40:	e3300000 	teq	r0, #0
    ab44:	0a000000 	beq	ab4c <handleRotateLeft>
    ab48:	1a000003 	bne	ab5c <handleRotateRight>

0000ab4c <handleRotateLeft>:
    ab4c:	e2888002 	add	r8, r8, #2
    ab50:	e3580006 	cmp	r8, #6
    ab54:	c3a08000 	movgt	r8, #0
    ab58:	ea000003 	b	ab6c <handleRotateEnd>

0000ab5c <handleRotateRight>:
    ab5c:	e2488002 	sub	r8, r8, #2
    ab60:	e3580000 	cmp	r8, #0
    ab64:	b3a08006 	movlt	r8, #6
    ab68:	eaffffff 	b	ab6c <handleRotateEnd>

0000ab6c <handleRotateEnd>:
    ab6c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ab70:	ebffffb0 	bl	aa38 <tetrisCheckBlockGridCollisions>
    ab74:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    ab78:	e3300000 	teq	r0, #0
    ab7c:	1a000000 	bne	ab84 <onRotationCollision>
    ab80:	0a000004 	beq	ab98 <onNoRotationCollision>

0000ab84 <onRotationCollision>:
    ab84:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ab88:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ab8c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ab90:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ab94:	ea000004 	b	abac <tetrisRotateBlockEnd>

0000ab98 <onNoRotationCollision>:
    ab98:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ab9c:	028dd014 	addeq	sp, sp, #20
    aba0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    aba4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aba8:	eaffffff 	b	abac <tetrisRotateBlockEnd>

0000abac <tetrisRotateBlockEnd>:
    abac:	e1a0f00e 	mov	pc, lr

0000abb0 <tetrisTranslateBlock>:
    abb0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    abb4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    abb8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    abbc:	e0844000 	add	r4, r4, r0
    abc0:	e0855001 	add	r5, r5, r1
    abc4:	e92d0003 	push	{r0, r1}
    abc8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    abcc:	ebffff99 	bl	aa38 <tetrisCheckBlockGridCollisions>
    abd0:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)
    abd4:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    abd8:	e8bd0003 	pop	{r0, r1}
    abdc:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    abe0:	e3330000 	teq	r3, #0
    abe4:	1a000000 	bne	abec <onTranslationCollision>
    abe8:	0a00000d 	beq	ac24 <onNoTranslationCollision>

0000abec <onTranslationCollision>:
    abec:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    abf0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    abf4:	e3310000 	teq	r1, #0
    abf8:	0a000000 	beq	ac00 <onTranslationCollision_Horizontal>
    abfc:	1a000002 	bne	ac0c <onTranslationCollision_Vertical>

0000ac00 <onTranslationCollision_Horizontal>:
    ac00:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ac04:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ac08:	ea00000a 	b	ac38 <tetrisTranslateBlockEnd>

0000ac0c <onTranslationCollision_Vertical>:
    ac0c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ac10:	ebffff99 	bl	aa7c <tetrisOnBlockCollision>
    ac14:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ac18:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ac1c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ac20:	ea000004 	b	ac38 <tetrisTranslateBlockEnd>

0000ac24 <onNoTranslationCollision>:
    ac24:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ac28:	028dd014 	addeq	sp, sp, #20
    ac2c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ac30:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ac34:	eaffffff 	b	ac38 <tetrisTranslateBlockEnd>

0000ac38 <tetrisTranslateBlockEnd>:
    ac38:	e1a0f00e 	mov	pc, lr

0000ac3c <clearScreen>:
    ac3c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ac40:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ac44:	e3a04000 	mov	r4, #0
    ac48:	e3a05000 	mov	r5, #0
    ac4c:	e59f0144 	ldr	r0, [pc, #324]	; ad98 <waitLoop+0x84>
    ac50:	e5906014 	ldr	r6, [r0, #20]
    ac54:	e5907018 	ldr	r7, [r0, #24]
    ac58:	e3a08000 	mov	r8, #0
    ac5c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ac60:	eb00000c 	bl	ac98 <drawRect>
    ac64:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ac68:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ac6c:	e1a0f00e 	mov	pc, lr

0000ac70 <drawPixel>:
    ac70:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ac74:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    ac78:	e0804501 	add	r4, r0, r1, lsl #10
    ac7c:	e1a04084 	lsl	r4, r4, #1
    ac80:	e59f014c 	ldr	r0, [pc, #332]	; add4 <waitLoop+0xc0>
    ac84:	e5900000 	ldr	r0, [r0]
    ac88:	e18020b4 	strh	r2, [r0, r4]
    ac8c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    ac90:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ac94:	e1a0f00e 	mov	pc, lr

0000ac98 <drawRect>:
    ac98:	e1a0000d 	mov	r0, sp
    ac9c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aca0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aca4:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    aca8:	e0866004 	add	r6, r6, r4
    acac:	e0877005 	add	r7, r7, r5

0000acb0 <drawRectForLoopX>:
    acb0:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000acb4 <drawRectForLoopY>:
    acb4:	e1a00004 	mov	r0, r4
    acb8:	e1a01005 	mov	r1, r5
    acbc:	e1a02008 	mov	r2, r8
    acc0:	ebffffea 	bl	ac70 <drawPixel>
    acc4:	e2855001 	add	r5, r5, #1
    acc8:	e1550007 	cmp	r5, r7
    accc:	bafffff8 	blt	acb4 <drawRectForLoopY>
    acd0:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    acd4:	e2844001 	add	r4, r4, #1
    acd8:	e1540006 	cmp	r4, r6
    acdc:	bafffff3 	blt	acb0 <drawRectForLoopX>
    ace0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ace4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ace8:	e28dd014 	add	sp, sp, #20
    acec:	e1a0f00e 	mov	pc, lr

0000acf0 <positionToArrayOffset>:
    acf0:	e8bd0007 	pop	{r0, r1, r2}
    acf4:	e0030192 	mul	r3, r2, r1
    acf8:	e0833000 	add	r3, r3, r0
    acfc:	e92d0008 	stmfd	sp!, {r3}
    ad00:	e1a0f00e 	mov	pc, lr

0000ad04 <startTimer>:
    ad04:	e1a03000 	mov	r3, r0
    ad08:	e59f00c8 	ldr	r0, [pc, #200]	; add8 <waitLoop+0xc4>
    ad0c:	e5901000 	ldr	r1, [r0]
    ad10:	e0811003 	add	r1, r1, r3

0000ad14 <waitLoop>:
    ad14:	e5902000 	ldr	r2, [r0]
    ad18:	e1510002 	cmp	r1, r2
    ad1c:	8afffffc 	bhi	ad14 <waitLoop>
    ad20:	e1a0f00e 	mov	pc, lr
    ad24:	000fffff 	.word	0x000fffff
    ad28:	00002710 	.word	0x00002710
    ad2c:	00009c40 	.word	0x00009c40
    ad30:	0000967f 	.word	0x0000967f
    ad34:	0000027a 	.word	0x0000027a
    ad38:	000001b5 	.word	0x000001b5
    ad3c:	00009c70 	.word	0x00009c70
    ad40:	000001e3 	.word	0x000001e3
    ad44:	00000221 	.word	0x00000221
    ad48:	00009c60 	.word	0x00009c60
    ad4c:	000001eb 	.word	0x000001eb
    ad50:	0000ffff 	.word	0x0000ffff
    ad54:	000001df 	.word	0x000001df
    ad58:	00009c20 	.word	0x00009c20
    ad5c:	000034a0 	.word	0x000034a0
    ad60:	00000269 	.word	0x00000269
    ad64:	00000297 	.word	0x00000297
    ad68:	0000adb5 	.word	0x0000adb5
    ad6c:	00000299 	.word	0x00000299
    ad70:	00009c44 	.word	0x00009c44
    ad74:	00000618 	.word	0x00000618
    ad78:	0000023e 	.word	0x0000023e
    ad7c:	0000024a 	.word	0x0000024a
    ad80:	00000212 	.word	0x00000212
    ad84:	00000286 	.word	0x00000286
    ad88:	000002a6 	.word	0x000002a6
    ad8c:	00009c30 	.word	0x00009c30
    ad90:	00000101 	.word	0x00000101
    ad94:	00000243 	.word	0x00000243
    ad98:	00009c80 	.word	0x00009c80
    ad9c:	0000297e 	.word	0x0000297e
    ada0:	00009be0 	.word	0x00009be0
    ada4:	00000172 	.word	0x00000172
    ada8:	00009c50 	.word	0x00009c50
    adac:	000001e7 	.word	0x000001e7
    adb0:	00000247 	.word	0x00000247
    adb4:	00000285 	.word	0x00000285
    adb8:	00000d7f 	.word	0x00000d7f
    adbc:	000093e0 	.word	0x000093e0
    adc0:	00009080 	.word	0x00009080
    adc4:	00009384 	.word	0x00009384
    adc8:	00009384 	.word	0x00009384
    adcc:	009999ff 	.word	0x009999ff
    add0:	000093c0 	.word	0x000093c0
    add4:	00009ce0 	.word	0x00009ce0
    add8:	3f003004 	.word	0x3f003004

0000addc <randomNumber>:
    addc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ade0:	e59f1040 	ldr	r1, [pc, #64]	; ae28 <top+0x34>
    ade4:	e5914000 	ldr	r4, [r1]
    ade8:	e5915000 	ldr	r5, [r1]
    adec:	e5916000 	ldr	r6, [r1]
    adf0:	e5912000 	ldr	r2, [r1]

0000adf4 <top>:
    adf4:	e1a07004 	mov	r7, r4
    adf8:	e0277587 	eor	r7, r7, r7, lsl #11
    adfc:	e0277427 	eor	r7, r7, r7, lsr #8
    ae00:	e1a04005 	mov	r4, r5
    ae04:	e1a05006 	mov	r5, r6
    ae08:	e1a06002 	mov	r6, r2
    ae0c:	e02229a2 	eor	r2, r2, r2, lsr #19
    ae10:	e0222007 	eor	r2, r2, r7
    ae14:	e3e01007 	mvn	r1, #7
    ae18:	e1c20001 	bic	r0, r2, r1
    ae1c:	e3500007 	cmp	r0, #7
    ae20:	0afffff3 	beq	adf4 <top>
    ae24:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ae28:	3f003004 	.word	0x3f003004

0000ae2c <EnableJTAG>:
    ae2c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ae30:	e59f0064 	ldr	r0, [pc, #100]	; ae9c <dowaitloop+0xc>
    ae34:	e0211001 	eor	r1, r1, r1
    ae38:	e5801000 	str	r1, [r0]
    ae3c:	eb000012 	bl	ae8c <dowait>
    ae40:	e59f0058 	ldr	r0, [pc, #88]	; aea0 <dowaitloop+0x10>
    ae44:	e59f1058 	ldr	r1, [pc, #88]	; aea4 <dowaitloop+0x14>
    ae48:	e5801000 	str	r1, [r0]
    ae4c:	eb00000e 	bl	ae8c <dowait>
    ae50:	e0211001 	eor	r1, r1, r1
    ae54:	e5801000 	str	r1, [r0]
    ae58:	e59f0048 	ldr	r0, [pc, #72]	; aea8 <dowaitloop+0x18>
    ae5c:	e5901000 	ldr	r1, [r0]
    ae60:	e3c11a07 	bic	r1, r1, #28672	; 0x7000
    ae64:	e3811a02 	orr	r1, r1, #8192	; 0x2000
    ae68:	e5801000 	str	r1, [r0]
    ae6c:	e59f0038 	ldr	r0, [pc, #56]	; aeac <dowaitloop+0x1c>
    ae70:	e5901000 	ldr	r1, [r0]
    ae74:	e59f2034 	ldr	r2, [pc, #52]	; aeb0 <dowaitloop+0x20>
    ae78:	e1c11002 	bic	r1, r1, r2
    ae7c:	e59f2030 	ldr	r2, [pc, #48]	; aeb4 <dowaitloop+0x24>
    ae80:	e1811002 	orr	r1, r1, r2
    ae84:	e5801000 	str	r1, [r0]
    ae88:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ae8c <dowait>:
    ae8c:	e3a02f4b 	mov	r2, #300	; 0x12c

0000ae90 <dowaitloop>:
    ae90:	e2522001 	subs	r2, r2, #1
    ae94:	1afffffd 	bne	ae90 <dowaitloop>
    ae98:	e12fff1e 	bx	lr
    ae9c:	3f200094 	.word	0x3f200094
    aea0:	3f200098 	.word	0x3f200098
    aea4:	0bc00010 	.word	0x0bc00010
    aea8:	3f200000 	.word	0x3f200000
    aeac:	3f200008 	.word	0x3f200008
    aeb0:	00e3ffc0 	.word	0x00e3ffc0
    aeb4:	0061b6c0 	.word	0x0061b6c0

0000aeb8 <InitFrameBuffer>:
    aeb8:	e59f2068 	ldr	r2, [pc, #104]	; af28 <pointerWaitLoop$+0x1c>
    aebc:	e59f3068 	ldr	r3, [pc, #104]	; af2c <pointerWaitLoop$+0x20>

0000aec0 <mBoxFullLoop$>:
    aec0:	e5920018 	ldr	r0, [r2, #24]
    aec4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    aec8:	1afffffc 	bne	aec0 <mBoxFullLoop$>
    aecc:	e2830101 	add	r0, r3, #1073741824	; 0x40000000
    aed0:	e3800008 	orr	r0, r0, #8
    aed4:	e5820020 	str	r0, [r2, #32]

0000aed8 <mBoxEmptyLoop$>:
    aed8:	e5920018 	ldr	r0, [r2, #24]
    aedc:	e3100101 	tst	r0, #1073741824	; 0x40000000
    aee0:	1afffffc 	bne	aed8 <mBoxEmptyLoop$>
    aee4:	e5920000 	ldr	r0, [r2]
    aee8:	e200100f 	and	r1, r0, #15
    aeec:	e3310008 	teq	r1, #8
    aef0:	1afffff8 	bne	aed8 <mBoxEmptyLoop$>
    aef4:	e59f0030 	ldr	r0, [pc, #48]	; af2c <pointerWaitLoop$+0x20>
    aef8:	e5901004 	ldr	r1, [r0, #4]
    aefc:	e3310102 	teq	r1, #-2147483648	; 0x80000000
    af00:	0a000001 	beq	af0c <pointerWaitLoop$>
    af04:	13a00000 	movne	r0, #0
    af08:	112fff1e 	bxne	lr

0000af0c <pointerWaitLoop$>:
    af0c:	e59f001c 	ldr	r0, [pc, #28]	; af30 <pointerWaitLoop$+0x24>
    af10:	e5900000 	ldr	r0, [r0]
    af14:	e3300000 	teq	r0, #0
    af18:	0afffffb 	beq	af0c <pointerWaitLoop$>
    af1c:	e59f3010 	ldr	r3, [pc, #16]	; af34 <pointerWaitLoop$+0x28>
    af20:	e5830000 	str	r0, [r3]
    af24:	e12fff1e 	bx	lr
    af28:	3f00b880 	.word	0x3f00b880
    af2c:	00009c80 	.word	0x00009c80
    af30:	00009ccc 	.word	0x00009ccc
    af34:	00009ce0 	.word	0x00009ce0

0000af38 <drawPaused>:
    af38:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    af3c:	e3a00000 	mov	r0, #0
    af40:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    af44:	e3a00096 	mov	r0, #150	; 0x96
    af48:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    af4c:	e3a0001e 	mov	r0, #30
    af50:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    af54:	e3a0009a 	mov	r0, #154	; 0x9a
    af58:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    af5c:	e3a000d5 	mov	r0, #213	; 0xd5
    af60:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    af64:	ebffff4b 	bl	ac98 <drawRect>
    af68:	e3a00000 	mov	r0, #0
    af6c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    af70:	e3a0001e 	mov	r0, #30
    af74:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    af78:	e3a0003c 	mov	r0, #60	; 0x3c
    af7c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    af80:	e3a0009a 	mov	r0, #154	; 0x9a
    af84:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    af88:	e3a000f3 	mov	r0, #243	; 0xf3
    af8c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    af90:	ebffff40 	bl	ac98 <drawRect>
    af94:	e3a00000 	mov	r0, #0
    af98:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    af9c:	e3a0001e 	mov	r0, #30
    afa0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    afa4:	e3a0003c 	mov	r0, #60	; 0x3c
    afa8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    afac:	e3a000d6 	mov	r0, #214	; 0xd6
    afb0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    afb4:	e3a000f3 	mov	r0, #243	; 0xf3
    afb8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    afbc:	ebffff35 	bl	ac98 <drawRect>
    afc0:	e3a00000 	mov	r0, #0
    afc4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    afc8:	e3a0001e 	mov	r0, #30
    afcc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    afd0:	e3a0001e 	mov	r0, #30
    afd4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    afd8:	e3a000b8 	mov	r0, #184	; 0xb8
    afdc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    afe0:	e59f02f4 	ldr	r0, [pc, #756]	; b2dc <drawPaused+0x3a4>
    afe4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    afe8:	ebffff2a 	bl	ac98 <drawRect>
    afec:	e3a00000 	mov	r0, #0
    aff0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aff4:	e3a00078 	mov	r0, #120	; 0x78
    aff8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    affc:	e3a0001e 	mov	r0, #30
    b000:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b004:	e3a000b8 	mov	r0, #184	; 0xb8
    b008:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b00c:	e59f02cc 	ldr	r0, [pc, #716]	; b2e0 <drawPaused+0x3a8>
    b010:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b014:	ebffff1f 	bl	ac98 <drawRect>
    b018:	e3a00000 	mov	r0, #0
    b01c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b020:	e3a00078 	mov	r0, #120	; 0x78
    b024:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b028:	e3a0001e 	mov	r0, #30
    b02c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b030:	e3a000b8 	mov	r0, #184	; 0xb8
    b034:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b038:	e59f02a4 	ldr	r0, [pc, #676]	; b2e4 <drawPaused+0x3ac>
    b03c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b040:	ebffff14 	bl	ac98 <drawRect>
    b044:	e3a00000 	mov	r0, #0
    b048:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b04c:	e3a0001e 	mov	r0, #30
    b050:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b054:	e3a0001e 	mov	r0, #30
    b058:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b05c:	e3a0009a 	mov	r0, #154	; 0x9a
    b060:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b064:	e59f027c 	ldr	r0, [pc, #636]	; b2e8 <drawPaused+0x3b0>
    b068:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b06c:	ebffff09 	bl	ac98 <drawRect>
    b070:	e3a00000 	mov	r0, #0
    b074:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b078:	e3a0001e 	mov	r0, #30
    b07c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b080:	e3a0001e 	mov	r0, #30
    b084:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b088:	e3a000d6 	mov	r0, #214	; 0xd6
    b08c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b090:	e59f0250 	ldr	r0, [pc, #592]	; b2e8 <drawPaused+0x3b0>
    b094:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b098:	ebfffefe 	bl	ac98 <drawRect>
    b09c:	e3a00000 	mov	r0, #0
    b0a0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b0a4:	e3a00078 	mov	r0, #120	; 0x78
    b0a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b0ac:	e3a0001e 	mov	r0, #30
    b0b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b0b4:	e3a0009a 	mov	r0, #154	; 0x9a
    b0b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b0bc:	e59f0228 	ldr	r0, [pc, #552]	; b2ec <drawPaused+0x3b4>
    b0c0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b0c4:	ebfffef3 	bl	ac98 <drawRect>
    b0c8:	e3a00000 	mov	r0, #0
    b0cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b0d0:	e3a00078 	mov	r0, #120	; 0x78
    b0d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b0d8:	e3a0001e 	mov	r0, #30
    b0dc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b0e0:	e3a0009a 	mov	r0, #154	; 0x9a
    b0e4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b0e8:	e59f0200 	ldr	r0, [pc, #512]	; b2f0 <drawPaused+0x3b8>
    b0ec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b0f0:	ebfffee8 	bl	ac98 <drawRect>
    b0f4:	e3a00000 	mov	r0, #0
    b0f8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b0fc:	e3a0001e 	mov	r0, #30
    b100:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b104:	e3a0001e 	mov	r0, #30
    b108:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b10c:	e59f01e0 	ldr	r0, [pc, #480]	; b2f4 <drawPaused+0x3bc>
    b110:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b114:	e59f01dc 	ldr	r0, [pc, #476]	; b2f8 <drawPaused+0x3c0>
    b118:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b11c:	ebfffedd 	bl	ac98 <drawRect>
    b120:	e3a00000 	mov	r0, #0
    b124:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b128:	e3a00096 	mov	r0, #150	; 0x96
    b12c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b130:	e3a0005a 	mov	r0, #90	; 0x5a
    b134:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b138:	e3a0009a 	mov	r0, #154	; 0x9a
    b13c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b140:	e59f01b4 	ldr	r0, [pc, #436]	; b2fc <drawPaused+0x3c4>
    b144:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b148:	ebfffed2 	bl	ac98 <drawRect>
    b14c:	e59f01ac 	ldr	r0, [pc, #428]	; b300 <drawPaused+0x3c8>
    b150:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b154:	e3a0001e 	mov	r0, #30
    b158:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b15c:	e3a0003c 	mov	r0, #60	; 0x3c
    b160:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b164:	e3a000f4 	mov	r0, #244	; 0xf4
    b168:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b16c:	e59f0188 	ldr	r0, [pc, #392]	; b2fc <drawPaused+0x3c4>
    b170:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b174:	ebfffec7 	bl	ac98 <drawRect>
    b178:	e59f0180 	ldr	r0, [pc, #384]	; b300 <drawPaused+0x3c8>
    b17c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b180:	e3a0001e 	mov	r0, #30
    b184:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b188:	e3a0003c 	mov	r0, #60	; 0x3c
    b18c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b190:	e3a000b8 	mov	r0, #184	; 0xb8
    b194:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b198:	e59f0164 	ldr	r0, [pc, #356]	; b304 <drawPaused+0x3cc>
    b19c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b1a0:	ebfffebc 	bl	ac98 <drawRect>
    b1a4:	e3a00000 	mov	r0, #0
    b1a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b1ac:	e3a00096 	mov	r0, #150	; 0x96
    b1b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b1b4:	e3a0005a 	mov	r0, #90	; 0x5a
    b1b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b1bc:	e3a0009a 	mov	r0, #154	; 0x9a
    b1c0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b1c4:	e59f013c 	ldr	r0, [pc, #316]	; b308 <drawPaused+0x3d0>
    b1c8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b1cc:	ebfffeb1 	bl	ac98 <drawRect>
    b1d0:	e59f0128 	ldr	r0, [pc, #296]	; b300 <drawPaused+0x3c8>
    b1d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b1d8:	e3a0001e 	mov	r0, #30
    b1dc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b1e0:	e3a0003c 	mov	r0, #60	; 0x3c
    b1e4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b1e8:	e3a000f4 	mov	r0, #244	; 0xf4
    b1ec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b1f0:	e59f0114 	ldr	r0, [pc, #276]	; b30c <drawPaused+0x3d4>
    b1f4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b1f8:	ebfffea6 	bl	ac98 <drawRect>
    b1fc:	e59f00fc 	ldr	r0, [pc, #252]	; b300 <drawPaused+0x3c8>
    b200:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b204:	e3a0001e 	mov	r0, #30
    b208:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b20c:	e3a0003c 	mov	r0, #60	; 0x3c
    b210:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b214:	e3a000b8 	mov	r0, #184	; 0xb8
    b218:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b21c:	e59f00e8 	ldr	r0, [pc, #232]	; b30c <drawPaused+0x3d4>
    b220:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b224:	ebfffe9b 	bl	ac98 <drawRect>
    b228:	e3a00000 	mov	r0, #0
    b22c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b230:	e3a00096 	mov	r0, #150	; 0x96
    b234:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b238:	e3a0001e 	mov	r0, #30
    b23c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b240:	e3a0009a 	mov	r0, #154	; 0x9a
    b244:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b248:	e59f00c0 	ldr	r0, [pc, #192]	; b310 <drawPaused+0x3d8>
    b24c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b250:	ebfffe90 	bl	ac98 <drawRect>
    b254:	e3a00000 	mov	r0, #0
    b258:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b25c:	e3a0001e 	mov	r0, #30
    b260:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b264:	e3a0001e 	mov	r0, #30
    b268:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b26c:	e3a0009a 	mov	r0, #154	; 0x9a
    b270:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b274:	e59f0098 	ldr	r0, [pc, #152]	; b314 <drawPaused+0x3dc>
    b278:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b27c:	ebfffe85 	bl	ac98 <drawRect>
    b280:	e3a00000 	mov	r0, #0
    b284:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b288:	e3a0001e 	mov	r0, #30
    b28c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b290:	e3a0001e 	mov	r0, #30
    b294:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b298:	e59f0054 	ldr	r0, [pc, #84]	; b2f4 <drawPaused+0x3bc>
    b29c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b2a0:	e59f006c 	ldr	r0, [pc, #108]	; b314 <drawPaused+0x3dc>
    b2a4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b2a8:	ebfffe7a 	bl	ac98 <drawRect>
    b2ac:	e3a00000 	mov	r0, #0
    b2b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b2b4:	e3a0005a 	mov	r0, #90	; 0x5a
    b2b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b2bc:	e3a0001e 	mov	r0, #30
    b2c0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b2c4:	e3a000b8 	mov	r0, #184	; 0xb8
    b2c8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b2cc:	e59f0044 	ldr	r0, [pc, #68]	; b318 <drawPaused+0x3e0>
    b2d0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b2d4:	ebfffe6f 	bl	ac98 <drawRect>
    b2d8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    b2dc:	00000111 	.word	0x00000111
    b2e0:	00000139 	.word	0x00000139
    b2e4:	00000175 	.word	0x00000175
    b2e8:	00000157 	.word	0x00000157
    b2ec:	0000019d 	.word	0x0000019d
    b2f0:	000001d9 	.word	0x000001d9
    b2f4:	00000112 	.word	0x00000112
    b2f8:	000001bb 	.word	0x000001bb
    b2fc:	00000201 	.word	0x00000201
    b300:	0000967f 	.word	0x0000967f
    b304:	0000021f 	.word	0x0000021f
    b308:	00000265 	.word	0x00000265
    b30c:	00000283 	.word	0x00000283
    b310:	000002c9 	.word	0x000002c9
    b314:	000002e7 	.word	0x000002e7
    b318:	00000305 	.word	0x00000305

0000b31c <sampleSNES>:
    b31c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}

0000b320 <initSNES>:
    b320:	e3a00001 	mov	r0, #1
    b324:	eb000048 	bl	b44c <setCLOCKFunction>
    b328:	e3a00001 	mov	r0, #1
    b32c:	eb00003d 	bl	b428 <setLATCHFunction>
    b330:	e3a00000 	mov	r0, #0
    b334:	eb000034 	bl	b40c <setDATAFunction>

0000b338 <startSamplingSNESButtons>:
    b338:	e3a0000b 	mov	r0, #11
    b33c:	e3a01001 	mov	r1, #1
    b340:	eb000056 	bl	b4a0 <writeGPIO>
    b344:	e3a00009 	mov	r0, #9
    b348:	e3a01001 	mov	r1, #1
    b34c:	eb000053 	bl	b4a0 <writeGPIO>
    b350:	e3a0000c 	mov	r0, #12
    b354:	eb000019 	bl	b3c0 <startTimer>
    b358:	e3a00009 	mov	r0, #9
    b35c:	e3a01000 	mov	r1, #0
    b360:	eb00004e 	bl	b4a0 <writeGPIO>
    b364:	e3a08000 	mov	r8, #0
    b368:	e3a07000 	mov	r7, #0

0000b36c <pulseLoop>:
    b36c:	e3a00006 	mov	r0, #6
    b370:	eb000012 	bl	b3c0 <startTimer>
    b374:	e3a0000b 	mov	r0, #11
    b378:	e3a01000 	mov	r1, #0
    b37c:	eb000047 	bl	b4a0 <writeGPIO>
    b380:	e3a00006 	mov	r0, #6
    b384:	eb00000d 	bl	b3c0 <startTimer>
    b388:	e3a0000a 	mov	r0, #10
    b38c:	e3a01000 	mov	r1, #0
    b390:	eb000036 	bl	b470 <readGPIO>
    b394:	e1a00710 	lsl	r0, r0, r7
    b398:	e1888000 	orr	r8, r8, r0
    b39c:	e3a0000b 	mov	r0, #11
    b3a0:	e3a01001 	mov	r1, #1
    b3a4:	eb00003d 	bl	b4a0 <writeGPIO>
    b3a8:	e2877001 	add	r7, r7, #1
    b3ac:	e3570010 	cmp	r7, #16
    b3b0:	baffffed 	blt	b36c <pulseLoop>

0000b3b4 <pulseLoopEnd>:
    b3b4:	e1a00008 	mov	r0, r8

0000b3b8 <mainEnd>:
    b3b8:	eaffffff 	b	b3bc <killProgram>

0000b3bc <killProgram>:
    b3bc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000b3c0 <startTimer>:
    b3c0:	e1a03000 	mov	r3, r0
    b3c4:	e59f0128 	ldr	r0, [pc, #296]	; b4f4 <newButtonPress+0x14>
    b3c8:	e5901000 	ldr	r1, [r0]
    b3cc:	e0811003 	add	r1, r1, r3

0000b3d0 <waitLoop>:
    b3d0:	e5902000 	ldr	r2, [r0]
    b3d4:	e1510002 	cmp	r1, r2
    b3d8:	8afffffc 	bhi	b3d0 <waitLoop>
    b3dc:	e1a0f00e 	mov	pc, lr

0000b3e0 <setGPIOFunction>:
    b3e0:	e59f3110 	ldr	r3, [pc, #272]	; b4f8 <newButtonPress+0x18>
    b3e4:	e3a04004 	mov	r4, #4
    b3e8:	e0000094 	mul	r0, r4, r0
    b3ec:	e7934000 	ldr	r4, [r3, r0]
    b3f0:	e3a05007 	mov	r5, #7
    b3f4:	e1a05215 	lsl	r5, r5, r2
    b3f8:	e1c33005 	bic	r3, r3, r5
    b3fc:	e1a01211 	lsl	r1, r1, r2
    b400:	e1844001 	orr	r4, r4, r1
    b404:	e7834000 	str	r4, [r3, r0]
    b408:	e1a0f00e 	mov	pc, lr

0000b40c <setDATAFunction>:
    b40c:	e59f10e4 	ldr	r1, [pc, #228]	; b4f8 <newButtonPress+0x18>
    b410:	e5912004 	ldr	r2, [r1, #4]
    b414:	e3a03007 	mov	r3, #7
    b418:	e1c22003 	bic	r2, r2, r3
    b41c:	e1822000 	orr	r2, r2, r0
    b420:	e5812004 	str	r2, [r1, #4]
    b424:	e1a0f00e 	mov	pc, lr

0000b428 <setLATCHFunction>:
    b428:	e59f10c8 	ldr	r1, [pc, #200]	; b4f8 <newButtonPress+0x18>
    b42c:	e5912000 	ldr	r2, [r1]
    b430:	e3a03007 	mov	r3, #7
    b434:	e1a03d83 	lsl	r3, r3, #27
    b438:	e1c22003 	bic	r2, r2, r3
    b43c:	e1a00d80 	lsl	r0, r0, #27
    b440:	e1822000 	orr	r2, r2, r0
    b444:	e5812000 	str	r2, [r1]
    b448:	e1a0f00e 	mov	pc, lr

0000b44c <setCLOCKFunction>:
    b44c:	e59f10a4 	ldr	r1, [pc, #164]	; b4f8 <newButtonPress+0x18>
    b450:	e5912004 	ldr	r2, [r1, #4]
    b454:	e3a03007 	mov	r3, #7
    b458:	e1a03183 	lsl	r3, r3, #3
    b45c:	e1c22003 	bic	r2, r2, r3
    b460:	e1a00180 	lsl	r0, r0, #3
    b464:	e1822000 	orr	r2, r2, r0
    b468:	e5812004 	str	r2, [r1, #4]
    b46c:	e1a0f00e 	mov	pc, lr

0000b470 <readGPIO>:
    b470:	e59f1080 	ldr	r1, [pc, #128]	; b4f8 <newButtonPress+0x18>
    b474:	e3500020 	cmp	r0, #32
    b478:	b5912034 	ldrlt	r2, [r1, #52]	; 0x34
    b47c:	a5912038 	ldrge	r2, [r1, #56]	; 0x38
    b480:	a2400020 	subge	r0, r0, #32
    b484:	e3a03001 	mov	r3, #1
    b488:	e1a03013 	lsl	r3, r3, r0
    b48c:	e0022003 	and	r2, r2, r3
    b490:	e3320000 	teq	r2, #0
    b494:	03a00000 	moveq	r0, #0
    b498:	13a00001 	movne	r0, #1
    b49c:	e1a0f00e 	mov	pc, lr

0000b4a0 <writeGPIO>:
    b4a0:	e3310000 	teq	r1, #0
    b4a4:	e59f104c 	ldr	r1, [pc, #76]	; b4f8 <newButtonPress+0x18>
    b4a8:	1281201c 	addne	r2, r1, #28
    b4ac:	02812028 	addeq	r2, r1, #40	; 0x28
    b4b0:	e3500020 	cmp	r0, #32
    b4b4:	a2400020 	subge	r0, r0, #32
    b4b8:	e3a01001 	mov	r1, #1
    b4bc:	e1a01011 	lsl	r1, r1, r0
    b4c0:	b5821000 	strlt	r1, [r2]
    b4c4:	a5821004 	strge	r1, [r2, #4]
    b4c8:	e1a0f00e 	mov	pc, lr

0000b4cc <areAnySNESButtonsPressed>:
    b4cc:	e59f1028 	ldr	r1, [pc, #40]	; b4fc <newButtonPress+0x1c>
    b4d0:	e0411000 	sub	r1, r1, r0
    b4d4:	e1500009 	cmp	r0, r9
    b4d8:	1a000000 	bne	b4e0 <newButtonPress>
    b4dc:	e3a01000 	mov	r1, #0

0000b4e0 <newButtonPress>:
    b4e0:	e3310000 	teq	r1, #0
    b4e4:	03a01000 	moveq	r1, #0
    b4e8:	13a01001 	movne	r1, #1
    b4ec:	e1a09000 	mov	r9, r0
    b4f0:	e1a0f00e 	mov	pc, lr
    b4f4:	3f003004 	.word	0x3f003004
    b4f8:	3f200000 	.word	0x3f200000
    b4fc:	0000ffff 	.word	0x0000ffff
