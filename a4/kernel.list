
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea0008ef 	b	a3c4 <main>

Disassembly of section .text:

00009cf0 <EnableJTAG>:
    9cf0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9cf4:	e59f0064 	ldr	r0, [pc, #100]	; 9d60 <dowaitloop+0xc>
    9cf8:	e0211001 	eor	r1, r1, r1
    9cfc:	e5801000 	str	r1, [r0]
    9d00:	eb000012 	bl	9d50 <dowait>
    9d04:	e59f0058 	ldr	r0, [pc, #88]	; 9d64 <dowaitloop+0x10>
    9d08:	e59f1058 	ldr	r1, [pc, #88]	; 9d68 <dowaitloop+0x14>
    9d0c:	e5801000 	str	r1, [r0]
    9d10:	eb00000e 	bl	9d50 <dowait>
    9d14:	e0211001 	eor	r1, r1, r1
    9d18:	e5801000 	str	r1, [r0]
    9d1c:	e59f0048 	ldr	r0, [pc, #72]	; 9d6c <dowaitloop+0x18>
    9d20:	e5901000 	ldr	r1, [r0]
    9d24:	e3c11a07 	bic	r1, r1, #28672	; 0x7000
    9d28:	e3811a02 	orr	r1, r1, #8192	; 0x2000
    9d2c:	e5801000 	str	r1, [r0]
    9d30:	e59f0038 	ldr	r0, [pc, #56]	; 9d70 <dowaitloop+0x1c>
    9d34:	e5901000 	ldr	r1, [r0]
    9d38:	e59f2034 	ldr	r2, [pc, #52]	; 9d74 <dowaitloop+0x20>
    9d3c:	e1c11002 	bic	r1, r1, r2
    9d40:	e59f2030 	ldr	r2, [pc, #48]	; 9d78 <dowaitloop+0x24>
    9d44:	e1811002 	orr	r1, r1, r2
    9d48:	e5801000 	str	r1, [r0]
    9d4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009d50 <dowait>:
    9d50:	e3a02f4b 	mov	r2, #300	; 0x12c

00009d54 <dowaitloop>:
    9d54:	e2522001 	subs	r2, r2, #1
    9d58:	1afffffd 	bne	9d54 <dowaitloop>
    9d5c:	e12fff1e 	bx	lr
    9d60:	3f200094 	.word	0x3f200094
    9d64:	3f200098 	.word	0x3f200098
    9d68:	0bc00010 	.word	0x0bc00010
    9d6c:	3f200000 	.word	0x3f200000
    9d70:	3f200008 	.word	0x3f200008
    9d74:	00e3ffc0 	.word	0x00e3ffc0
    9d78:	0061b6c0 	.word	0x0061b6c0

00009d7c <InitFrameBuffer>:
    9d7c:	e59f2068 	ldr	r2, [pc, #104]	; 9dec <pointerWaitLoop$+0x1c>
    9d80:	e59f3068 	ldr	r3, [pc, #104]	; 9df0 <pointerWaitLoop$+0x20>

00009d84 <mBoxFullLoop$>:
    9d84:	e5920018 	ldr	r0, [r2, #24]
    9d88:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    9d8c:	1afffffc 	bne	9d84 <mBoxFullLoop$>
    9d90:	e2830101 	add	r0, r3, #1073741824	; 0x40000000
    9d94:	e3800008 	orr	r0, r0, #8
    9d98:	e5820020 	str	r0, [r2, #32]

00009d9c <mBoxEmptyLoop$>:
    9d9c:	e5920018 	ldr	r0, [r2, #24]
    9da0:	e3100101 	tst	r0, #1073741824	; 0x40000000
    9da4:	1afffffc 	bne	9d9c <mBoxEmptyLoop$>
    9da8:	e5920000 	ldr	r0, [r2]
    9dac:	e200100f 	and	r1, r0, #15
    9db0:	e3310008 	teq	r1, #8
    9db4:	1afffff8 	bne	9d9c <mBoxEmptyLoop$>
    9db8:	e59f0030 	ldr	r0, [pc, #48]	; 9df0 <pointerWaitLoop$+0x20>
    9dbc:	e5901004 	ldr	r1, [r0, #4]
    9dc0:	e3310102 	teq	r1, #-2147483648	; 0x80000000
    9dc4:	0a000001 	beq	9dd0 <pointerWaitLoop$>
    9dc8:	13a00000 	movne	r0, #0
    9dcc:	112fff1e 	bxne	lr

00009dd0 <pointerWaitLoop$>:
    9dd0:	e59f001c 	ldr	r0, [pc, #28]	; 9df4 <pointerWaitLoop$+0x24>
    9dd4:	e5900000 	ldr	r0, [r0]
    9dd8:	e3300000 	teq	r0, #0
    9ddc:	0afffffb 	beq	9dd0 <pointerWaitLoop$>
    9de0:	e59f3010 	ldr	r3, [pc, #16]	; 9df8 <pointerWaitLoop$+0x28>
    9de4:	e5830000 	str	r0, [r3]
    9de8:	e12fff1e 	bx	lr
    9dec:	3f00b880 	.word	0x3f00b880
    9df0:	00009080 	.word	0x00009080
    9df4:	000090cc 	.word	0x000090cc
    9df8:	000090e0 	.word	0x000090e0

00009dfc <drawPaused>:
    9dfc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9e00:	e3a00000 	mov	r0, #0
    9e04:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e08:	e3a00096 	mov	r0, #150	; 0x96
    9e0c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e10:	e3a0001e 	mov	r0, #30
    9e14:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e18:	e3a0009a 	mov	r0, #154	; 0x9a
    9e1c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e20:	e3a000d5 	mov	r0, #213	; 0xd5
    9e24:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e28:	eb000595 	bl	b484 <drawRect>
    9e2c:	e3a00000 	mov	r0, #0
    9e30:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e34:	e3a0001e 	mov	r0, #30
    9e38:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e3c:	e3a0003c 	mov	r0, #60	; 0x3c
    9e40:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e44:	e3a0009a 	mov	r0, #154	; 0x9a
    9e48:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e4c:	e3a000f3 	mov	r0, #243	; 0xf3
    9e50:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e54:	eb00058a 	bl	b484 <drawRect>
    9e58:	e3a00000 	mov	r0, #0
    9e5c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e60:	e3a0001e 	mov	r0, #30
    9e64:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e68:	e3a0003c 	mov	r0, #60	; 0x3c
    9e6c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e70:	e3a000d6 	mov	r0, #214	; 0xd6
    9e74:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e78:	e3a000f3 	mov	r0, #243	; 0xf3
    9e7c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e80:	eb00057f 	bl	b484 <drawRect>
    9e84:	e3a00000 	mov	r0, #0
    9e88:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e8c:	e3a0001e 	mov	r0, #30
    9e90:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e94:	e3a0001e 	mov	r0, #30
    9e98:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9e9c:	e3a000b8 	mov	r0, #184	; 0xb8
    9ea0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ea4:	e59f02f4 	ldr	r0, [pc, #756]	; a1a0 <drawPaused+0x3a4>
    9ea8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9eac:	eb000574 	bl	b484 <drawRect>
    9eb0:	e3a00000 	mov	r0, #0
    9eb4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9eb8:	e3a00078 	mov	r0, #120	; 0x78
    9ebc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ec0:	e3a0001e 	mov	r0, #30
    9ec4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ec8:	e3a000b8 	mov	r0, #184	; 0xb8
    9ecc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ed0:	e59f02cc 	ldr	r0, [pc, #716]	; a1a4 <drawPaused+0x3a8>
    9ed4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ed8:	eb000569 	bl	b484 <drawRect>
    9edc:	e3a00000 	mov	r0, #0
    9ee0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ee4:	e3a00078 	mov	r0, #120	; 0x78
    9ee8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9eec:	e3a0001e 	mov	r0, #30
    9ef0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ef4:	e3a000b8 	mov	r0, #184	; 0xb8
    9ef8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9efc:	e59f02a4 	ldr	r0, [pc, #676]	; a1a8 <drawPaused+0x3ac>
    9f00:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f04:	eb00055e 	bl	b484 <drawRect>
    9f08:	e3a00000 	mov	r0, #0
    9f0c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f10:	e3a0001e 	mov	r0, #30
    9f14:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f18:	e3a0001e 	mov	r0, #30
    9f1c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f20:	e3a0009a 	mov	r0, #154	; 0x9a
    9f24:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f28:	e59f027c 	ldr	r0, [pc, #636]	; a1ac <drawPaused+0x3b0>
    9f2c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f30:	eb000553 	bl	b484 <drawRect>
    9f34:	e3a00000 	mov	r0, #0
    9f38:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f3c:	e3a0001e 	mov	r0, #30
    9f40:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f44:	e3a0001e 	mov	r0, #30
    9f48:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f4c:	e3a000d6 	mov	r0, #214	; 0xd6
    9f50:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f54:	e59f0250 	ldr	r0, [pc, #592]	; a1ac <drawPaused+0x3b0>
    9f58:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f5c:	eb000548 	bl	b484 <drawRect>
    9f60:	e3a00000 	mov	r0, #0
    9f64:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f68:	e3a00078 	mov	r0, #120	; 0x78
    9f6c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f70:	e3a0001e 	mov	r0, #30
    9f74:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f78:	e3a0009a 	mov	r0, #154	; 0x9a
    9f7c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f80:	e59f0228 	ldr	r0, [pc, #552]	; a1b0 <drawPaused+0x3b4>
    9f84:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f88:	eb00053d 	bl	b484 <drawRect>
    9f8c:	e3a00000 	mov	r0, #0
    9f90:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f94:	e3a00078 	mov	r0, #120	; 0x78
    9f98:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9f9c:	e3a0001e 	mov	r0, #30
    9fa0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fa4:	e3a0009a 	mov	r0, #154	; 0x9a
    9fa8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fac:	e59f0200 	ldr	r0, [pc, #512]	; a1b4 <drawPaused+0x3b8>
    9fb0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fb4:	eb000532 	bl	b484 <drawRect>
    9fb8:	e3a00000 	mov	r0, #0
    9fbc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fc0:	e3a0001e 	mov	r0, #30
    9fc4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fc8:	e3a0001e 	mov	r0, #30
    9fcc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fd0:	e59f01e0 	ldr	r0, [pc, #480]	; a1b8 <drawPaused+0x3bc>
    9fd4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fd8:	e59f01dc 	ldr	r0, [pc, #476]	; a1bc <drawPaused+0x3c0>
    9fdc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fe0:	eb000527 	bl	b484 <drawRect>
    9fe4:	e3a00000 	mov	r0, #0
    9fe8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9fec:	e3a00096 	mov	r0, #150	; 0x96
    9ff0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ff4:	e3a0005a 	mov	r0, #90	; 0x5a
    9ff8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9ffc:	e3a0009a 	mov	r0, #154	; 0x9a
    a000:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a004:	e59f01b4 	ldr	r0, [pc, #436]	; a1c0 <drawPaused+0x3c4>
    a008:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a00c:	eb00051c 	bl	b484 <drawRect>
    a010:	e59f01ac 	ldr	r0, [pc, #428]	; a1c4 <drawPaused+0x3c8>
    a014:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a018:	e3a0001e 	mov	r0, #30
    a01c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a020:	e3a0003c 	mov	r0, #60	; 0x3c
    a024:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a028:	e3a000f4 	mov	r0, #244	; 0xf4
    a02c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a030:	e59f0188 	ldr	r0, [pc, #392]	; a1c0 <drawPaused+0x3c4>
    a034:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a038:	eb000511 	bl	b484 <drawRect>
    a03c:	e59f0180 	ldr	r0, [pc, #384]	; a1c4 <drawPaused+0x3c8>
    a040:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a044:	e3a0001e 	mov	r0, #30
    a048:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a04c:	e3a0003c 	mov	r0, #60	; 0x3c
    a050:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a054:	e3a000b8 	mov	r0, #184	; 0xb8
    a058:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a05c:	e59f0164 	ldr	r0, [pc, #356]	; a1c8 <drawPaused+0x3cc>
    a060:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a064:	eb000506 	bl	b484 <drawRect>
    a068:	e3a00000 	mov	r0, #0
    a06c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a070:	e3a00096 	mov	r0, #150	; 0x96
    a074:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a078:	e3a0005a 	mov	r0, #90	; 0x5a
    a07c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a080:	e3a0009a 	mov	r0, #154	; 0x9a
    a084:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a088:	e59f013c 	ldr	r0, [pc, #316]	; a1cc <drawPaused+0x3d0>
    a08c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a090:	eb0004fb 	bl	b484 <drawRect>
    a094:	e59f0128 	ldr	r0, [pc, #296]	; a1c4 <drawPaused+0x3c8>
    a098:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a09c:	e3a0001e 	mov	r0, #30
    a0a0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0a4:	e3a0003c 	mov	r0, #60	; 0x3c
    a0a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0ac:	e3a000f4 	mov	r0, #244	; 0xf4
    a0b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0b4:	e59f0114 	ldr	r0, [pc, #276]	; a1d0 <drawPaused+0x3d4>
    a0b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0bc:	eb0004f0 	bl	b484 <drawRect>
    a0c0:	e59f00fc 	ldr	r0, [pc, #252]	; a1c4 <drawPaused+0x3c8>
    a0c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0c8:	e3a0001e 	mov	r0, #30
    a0cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0d0:	e3a0003c 	mov	r0, #60	; 0x3c
    a0d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0d8:	e3a000b8 	mov	r0, #184	; 0xb8
    a0dc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0e0:	e59f00e8 	ldr	r0, [pc, #232]	; a1d0 <drawPaused+0x3d4>
    a0e4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0e8:	eb0004e5 	bl	b484 <drawRect>
    a0ec:	e3a00000 	mov	r0, #0
    a0f0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0f4:	e3a00096 	mov	r0, #150	; 0x96
    a0f8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a0fc:	e3a0001e 	mov	r0, #30
    a100:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a104:	e3a0009a 	mov	r0, #154	; 0x9a
    a108:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a10c:	e59f00c0 	ldr	r0, [pc, #192]	; a1d4 <drawPaused+0x3d8>
    a110:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a114:	eb0004da 	bl	b484 <drawRect>
    a118:	e3a00000 	mov	r0, #0
    a11c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a120:	e3a0001e 	mov	r0, #30
    a124:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a128:	e3a0001e 	mov	r0, #30
    a12c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a130:	e3a0009a 	mov	r0, #154	; 0x9a
    a134:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a138:	e59f0098 	ldr	r0, [pc, #152]	; a1d8 <drawPaused+0x3dc>
    a13c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a140:	eb0004cf 	bl	b484 <drawRect>
    a144:	e3a00000 	mov	r0, #0
    a148:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a14c:	e3a0001e 	mov	r0, #30
    a150:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a154:	e3a0001e 	mov	r0, #30
    a158:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a15c:	e59f0054 	ldr	r0, [pc, #84]	; a1b8 <drawPaused+0x3bc>
    a160:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a164:	e59f006c 	ldr	r0, [pc, #108]	; a1d8 <drawPaused+0x3dc>
    a168:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a16c:	eb0004c4 	bl	b484 <drawRect>
    a170:	e3a00000 	mov	r0, #0
    a174:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a178:	e3a0005a 	mov	r0, #90	; 0x5a
    a17c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a180:	e3a0001e 	mov	r0, #30
    a184:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a188:	e3a000b8 	mov	r0, #184	; 0xb8
    a18c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a190:	e59f0044 	ldr	r0, [pc, #68]	; a1dc <drawPaused+0x3e0>
    a194:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a198:	eb0004b9 	bl	b484 <drawRect>
    a19c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a1a0:	00000111 	.word	0x00000111
    a1a4:	00000139 	.word	0x00000139
    a1a8:	00000175 	.word	0x00000175
    a1ac:	00000157 	.word	0x00000157
    a1b0:	0000019d 	.word	0x0000019d
    a1b4:	000001d9 	.word	0x000001d9
    a1b8:	00000112 	.word	0x00000112
    a1bc:	000001bb 	.word	0x000001bb
    a1c0:	00000201 	.word	0x00000201
    a1c4:	0000967f 	.word	0x0000967f
    a1c8:	0000021f 	.word	0x0000021f
    a1cc:	00000265 	.word	0x00000265
    a1d0:	00000283 	.word	0x00000283
    a1d4:	000002c9 	.word	0x000002c9
    a1d8:	000002e7 	.word	0x000002e7
    a1dc:	00000305 	.word	0x00000305

0000a1e0 <sampleSNES>:
    a1e0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}

0000a1e4 <initSNES>:
    a1e4:	e3a00001 	mov	r0, #1
    a1e8:	eb000048 	bl	a310 <setCLOCKFunction>
    a1ec:	e3a00001 	mov	r0, #1
    a1f0:	eb00003d 	bl	a2ec <setLATCHFunction>
    a1f4:	e3a00000 	mov	r0, #0
    a1f8:	eb000034 	bl	a2d0 <setDATAFunction>

0000a1fc <startSamplingSNESButtons>:
    a1fc:	e3a0000b 	mov	r0, #11
    a200:	e3a01001 	mov	r1, #1
    a204:	eb000056 	bl	a364 <writeGPIO>
    a208:	e3a00009 	mov	r0, #9
    a20c:	e3a01001 	mov	r1, #1
    a210:	eb000053 	bl	a364 <writeGPIO>
    a214:	e3a0000c 	mov	r0, #12
    a218:	eb000019 	bl	a284 <startTimer>
    a21c:	e3a00009 	mov	r0, #9
    a220:	e3a01000 	mov	r1, #0
    a224:	eb00004e 	bl	a364 <writeGPIO>
    a228:	e3a08000 	mov	r8, #0
    a22c:	e3a07000 	mov	r7, #0

0000a230 <pulseLoop>:
    a230:	e3a00006 	mov	r0, #6
    a234:	eb000012 	bl	a284 <startTimer>
    a238:	e3a0000b 	mov	r0, #11
    a23c:	e3a01000 	mov	r1, #0
    a240:	eb000047 	bl	a364 <writeGPIO>
    a244:	e3a00006 	mov	r0, #6
    a248:	eb00000d 	bl	a284 <startTimer>
    a24c:	e3a0000a 	mov	r0, #10
    a250:	e3a01000 	mov	r1, #0
    a254:	eb000036 	bl	a334 <readGPIO>
    a258:	e1a00710 	lsl	r0, r0, r7
    a25c:	e1888000 	orr	r8, r8, r0
    a260:	e3a0000b 	mov	r0, #11
    a264:	e3a01001 	mov	r1, #1
    a268:	eb00003d 	bl	a364 <writeGPIO>
    a26c:	e2877001 	add	r7, r7, #1
    a270:	e3570010 	cmp	r7, #16
    a274:	baffffed 	blt	a230 <pulseLoop>

0000a278 <pulseLoopEnd>:
    a278:	e1a00008 	mov	r0, r8

0000a27c <mainEnd>:
    a27c:	eaffffff 	b	a280 <killProgram>

0000a280 <killProgram>:
    a280:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000a284 <startTimer>:
    a284:	e1a03000 	mov	r3, r0
    a288:	e59f0128 	ldr	r0, [pc, #296]	; a3b8 <newButtonPress+0x14>
    a28c:	e5901000 	ldr	r1, [r0]
    a290:	e0811003 	add	r1, r1, r3

0000a294 <waitLoop>:
    a294:	e5902000 	ldr	r2, [r0]
    a298:	e1510002 	cmp	r1, r2
    a29c:	8afffffc 	bhi	a294 <waitLoop>
    a2a0:	e1a0f00e 	mov	pc, lr

0000a2a4 <setGPIOFunction>:
    a2a4:	e59f3110 	ldr	r3, [pc, #272]	; a3bc <newButtonPress+0x18>
    a2a8:	e3a04004 	mov	r4, #4
    a2ac:	e0000094 	mul	r0, r4, r0
    a2b0:	e7934000 	ldr	r4, [r3, r0]
    a2b4:	e3a05007 	mov	r5, #7
    a2b8:	e1a05215 	lsl	r5, r5, r2
    a2bc:	e1c33005 	bic	r3, r3, r5
    a2c0:	e1a01211 	lsl	r1, r1, r2
    a2c4:	e1844001 	orr	r4, r4, r1
    a2c8:	e7834000 	str	r4, [r3, r0]
    a2cc:	e1a0f00e 	mov	pc, lr

0000a2d0 <setDATAFunction>:
    a2d0:	e59f10e4 	ldr	r1, [pc, #228]	; a3bc <newButtonPress+0x18>
    a2d4:	e5912004 	ldr	r2, [r1, #4]
    a2d8:	e3a03007 	mov	r3, #7
    a2dc:	e1c22003 	bic	r2, r2, r3
    a2e0:	e1822000 	orr	r2, r2, r0
    a2e4:	e5812004 	str	r2, [r1, #4]
    a2e8:	e1a0f00e 	mov	pc, lr

0000a2ec <setLATCHFunction>:
    a2ec:	e59f10c8 	ldr	r1, [pc, #200]	; a3bc <newButtonPress+0x18>
    a2f0:	e5912000 	ldr	r2, [r1]
    a2f4:	e3a03007 	mov	r3, #7
    a2f8:	e1a03d83 	lsl	r3, r3, #27
    a2fc:	e1c22003 	bic	r2, r2, r3
    a300:	e1a00d80 	lsl	r0, r0, #27
    a304:	e1822000 	orr	r2, r2, r0
    a308:	e5812000 	str	r2, [r1]
    a30c:	e1a0f00e 	mov	pc, lr

0000a310 <setCLOCKFunction>:
    a310:	e59f10a4 	ldr	r1, [pc, #164]	; a3bc <newButtonPress+0x18>
    a314:	e5912004 	ldr	r2, [r1, #4]
    a318:	e3a03007 	mov	r3, #7
    a31c:	e1a03183 	lsl	r3, r3, #3
    a320:	e1c22003 	bic	r2, r2, r3
    a324:	e1a00180 	lsl	r0, r0, #3
    a328:	e1822000 	orr	r2, r2, r0
    a32c:	e5812004 	str	r2, [r1, #4]
    a330:	e1a0f00e 	mov	pc, lr

0000a334 <readGPIO>:
    a334:	e59f1080 	ldr	r1, [pc, #128]	; a3bc <newButtonPress+0x18>
    a338:	e3500020 	cmp	r0, #32
    a33c:	b5912034 	ldrlt	r2, [r1, #52]	; 0x34
    a340:	a5912038 	ldrge	r2, [r1, #56]	; 0x38
    a344:	a2400020 	subge	r0, r0, #32
    a348:	e3a03001 	mov	r3, #1
    a34c:	e1a03013 	lsl	r3, r3, r0
    a350:	e0022003 	and	r2, r2, r3
    a354:	e3320000 	teq	r2, #0
    a358:	03a00000 	moveq	r0, #0
    a35c:	13a00001 	movne	r0, #1
    a360:	e1a0f00e 	mov	pc, lr

0000a364 <writeGPIO>:
    a364:	e3310000 	teq	r1, #0
    a368:	e59f104c 	ldr	r1, [pc, #76]	; a3bc <newButtonPress+0x18>
    a36c:	1281201c 	addne	r2, r1, #28
    a370:	02812028 	addeq	r2, r1, #40	; 0x28
    a374:	e3500020 	cmp	r0, #32
    a378:	a2400020 	subge	r0, r0, #32
    a37c:	e3a01001 	mov	r1, #1
    a380:	e1a01011 	lsl	r1, r1, r0
    a384:	b5821000 	strlt	r1, [r2]
    a388:	a5821004 	strge	r1, [r2, #4]
    a38c:	e1a0f00e 	mov	pc, lr

0000a390 <areAnySNESButtonsPressed>:
    a390:	e59f1028 	ldr	r1, [pc, #40]	; a3c0 <newButtonPress+0x1c>
    a394:	e0411000 	sub	r1, r1, r0
    a398:	e1500009 	cmp	r0, r9
    a39c:	1a000000 	bne	a3a4 <newButtonPress>
    a3a0:	e3a01000 	mov	r1, #0

0000a3a4 <newButtonPress>:
    a3a4:	e3310000 	teq	r1, #0
    a3a8:	03a01000 	moveq	r1, #0
    a3ac:	13a01001 	movne	r1, #1
    a3b0:	e1a09000 	mov	r9, r0
    a3b4:	e1a0f00e 	mov	pc, lr
    a3b8:	3f003004 	.word	0x3f003004
    a3bc:	3f200000 	.word	0x3f200000
    a3c0:	0000ffff 	.word	0x0000ffff

0000a3c4 <main>:
    a3c4:	e3a0d902 	mov	sp, #32768	; 0x8000
    a3c8:	ebfffe48 	bl	9cf0 <EnableJTAG>
    a3cc:	ebfffe6a 	bl	9d7c <InitFrameBuffer>
    a3d0:	eb000414 	bl	b428 <clearScreen>
    a3d4:	ea000023 	b	a468 <StartGame>

0000a3d8 <MainMenu>:
    a3d8:	eb0001d2 	bl	ab28 <ClearScreenBlack>
    a3dc:	eb0001de 	bl	ab5c <DrawMainMenu>
    a3e0:	e3a09000 	mov	r9, #0

0000a3e4 <MainMenuPrompt>:
    a3e4:	ebffff7d 	bl	a1e0 <sampleSNES>
    a3e8:	e1a0a000 	mov	sl, r0
    a3ec:	e3e01c01 	mvn	r1, #256	; 0x100
    a3f0:	e1c00001 	bic	r0, r0, r1
    a3f4:	e3500000 	cmp	r0, #0
    a3f8:	0a00000c 	beq	a430 <MainMenuAPressed>
    a3fc:	e1a0000a 	mov	r0, sl
    a400:	e3e01010 	mvn	r1, #16
    a404:	e1c00001 	bic	r0, r0, r1
    a408:	e3500000 	cmp	r0, #0
    a40c:	0a00000b 	beq	a440 <MainMenuUpPressed>
    a410:	e1a0000a 	mov	r0, sl
    a414:	e3e01020 	mvn	r1, #32
    a418:	e1c00001 	bic	r0, r0, r1
    a41c:	e3500000 	cmp	r0, #0
    a420:	0a00000b 	beq	a454 <MainMenuDownPressed>
    a424:	e3a00801 	mov	r0, #65536	; 0x10000
    a428:	eb000430 	bl	b4f0 <startTimer>
    a42c:	eaffffec 	b	a3e4 <MainMenuPrompt>

0000a430 <MainMenuAPressed>:
    a430:	e3590000 	cmp	r9, #0
    a434:	0a00000b 	beq	a468 <StartGame>
    a438:	eb0001ba 	bl	ab28 <ClearScreenBlack>
    a43c:	ea000047 	b	a560 <mainEnd>

0000a440 <MainMenuUpPressed>:
    a440:	e3590000 	cmp	r9, #0
    a444:	0affffe6 	beq	a3e4 <MainMenuPrompt>
    a448:	e3a09000 	mov	r9, #0
    a44c:	eb000185 	bl	aa68 <SetMainMenuIndicatorStart>
    a450:	eaffffe3 	b	a3e4 <MainMenuPrompt>

0000a454 <MainMenuDownPressed>:
    a454:	e3590001 	cmp	r9, #1
    a458:	0affffe1 	beq	a3e4 <MainMenuPrompt>
    a45c:	e3a09001 	mov	r9, #1
    a460:	eb000198 	bl	aac8 <SetMainMenuIndicatorQuit>
    a464:	eaffffde 	b	a3e4 <MainMenuPrompt>

0000a468 <StartGame>:
    a468:	ebffff5c 	bl	a1e0 <sampleSNES>
    a46c:	eb000244 	bl	ad84 <tetrisInitGrid>
    a470:	eb0000c6 	bl	a790 <DrawBoard>
    a474:	eb0002b7 	bl	af58 <tetrisCreateNewBlock>
    a478:	e3a00003 	mov	r0, #3
    a47c:	e3a01012 	mov	r1, #18
    a480:	e59f2efc 	ldr	r2, [pc, #3836]	; b384 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x70>
    a484:	e92d0007 	push	{r0, r1, r2}
    a488:	eb000247 	bl	adac <tetrisSetGridBlockColor>
    a48c:	e3a00004 	mov	r0, #4
    a490:	e3a01012 	mov	r1, #18
    a494:	e59f2ee8 	ldr	r2, [pc, #3816]	; b384 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x70>
    a498:	e92d0007 	push	{r0, r1, r2}
    a49c:	eb000242 	bl	adac <tetrisSetGridBlockColor>
    a4a0:	e3a00005 	mov	r0, #5
    a4a4:	e3a01012 	mov	r1, #18
    a4a8:	e59f2ed4 	ldr	r2, [pc, #3796]	; b384 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x70>
    a4ac:	e92d0007 	push	{r0, r1, r2}
    a4b0:	eb00023d 	bl	adac <tetrisSetGridBlockColor>
    a4b4:	e3a00006 	mov	r0, #6
    a4b8:	e3a01012 	mov	r1, #18
    a4bc:	e59f2ec0 	ldr	r2, [pc, #3776]	; b384 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x70>
    a4c0:	e92d0007 	push	{r0, r1, r2}
    a4c4:	eb000238 	bl	adac <tetrisSetGridBlockColor>
    a4c8:	e3a00007 	mov	r0, #7
    a4cc:	e3a01012 	mov	r1, #18
    a4d0:	e59f2eac 	ldr	r2, [pc, #3756]	; b384 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x70>
    a4d4:	e92d0007 	push	{r0, r1, r2}
    a4d8:	eb000233 	bl	adac <tetrisSetGridBlockColor>
    a4dc:	e3a00008 	mov	r0, #8
    a4e0:	e3a01012 	mov	r1, #18
    a4e4:	e59f2e98 	ldr	r2, [pc, #3736]	; b384 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x70>
    a4e8:	e92d0007 	push	{r0, r1, r2}
    a4ec:	eb00022e 	bl	adac <tetrisSetGridBlockColor>
    a4f0:	e3a00009 	mov	r0, #9
    a4f4:	e3a01012 	mov	r1, #18
    a4f8:	e59f2e84 	ldr	r2, [pc, #3716]	; b384 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x70>
    a4fc:	e92d0007 	push	{r0, r1, r2}
    a500:	eb000229 	bl	adac <tetrisSetGridBlockColor>

0000a504 <mainLoop>:
    a504:	eb000257 	bl	ae68 <tetrisDrawGrid>
    a508:	eb00029b 	bl	af7c <tetrisDrawBlock>

0000a50c <applyUserTranslation>:
    a50c:	e3a00000 	mov	r0, #0
    a510:	e3a01000 	mov	r1, #0
    a514:	eb000324 	bl	b1ac <tetrisTranslateBlock>

0000a518 <applyUserRotation>:
    a518:	e3a00001 	mov	r0, #1
    a51c:	eb000303 	bl	b130 <tetrisRotateBlock>

0000a520 <applyGravityTranslation>:
    a520:	e3a00000 	mov	r0, #0
    a524:	e3a01001 	mov	r1, #1
    a528:	eb00031f 	bl	b1ac <tetrisTranslateBlock>
    a52c:	e3a00012 	mov	r0, #18
    a530:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a534:	eb00000a 	bl	a564 <tetrisGridIsRowComplete>
    a538:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    a53c:	e3300000 	teq	r0, #0
    a540:	1a000000 	bne	a548 <rowClear>
    a544:	0a000002 	beq	a554 <rowNotClear>

0000a548 <rowClear>:
    a548:	e3a00012 	mov	r0, #18
    a54c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a550:	eb00001e 	bl	a5d0 <tetrisGridClearRow>

0000a554 <rowNotClear>:
    a554:	e59f0e2c 	ldr	r0, [pc, #3628]	; b388 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x74>
    a558:	eb0003e4 	bl	b4f0 <startTimer>
    a55c:	eaffffe8 	b	a504 <mainLoop>

0000a560 <mainEnd>:
    a560:	eafffffe 	b	a560 <mainEnd>

0000a564 <tetrisGridIsRowComplete>:
    a564:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    a568:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a56c:	e92d00f0 	push	{r4, r5, r6, r7}
    a570:	e59f4e14 	ldr	r4, [pc, #3604]	; b38c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x78>
    a574:	e89400e0 	ldm	r4, {r5, r6, r7}
    a578:	e59f8e10 	ldr	r8, [pc, #3600]	; b390 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x7c>
    a57c:	e3a00000 	mov	r0, #0
    a580:	e3a03001 	mov	r3, #1
    a584:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

0000a588 <tetrisGridIsRowComplete_for_x_lessThan_cols_loop>:
    a588:	e92d0003 	push	{r0, r1}
    a58c:	e92d0003 	push	{r0, r1}
    a590:	eb000215 	bl	adec <tetrisGetGridBlockColor>
    a594:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)
    a598:	e3330000 	teq	r3, #0
    a59c:	e8bd0003 	pop	{r0, r1}
    a5a0:	049d3004 	popeq	{r3}		; (ldreq r3, [sp], #4)
    a5a4:	03a03000 	moveq	r3, #0
    a5a8:	052d3004 	pusheq	{r3}		; (streq r3, [sp, #-4]!)
    a5ac:	0a000002 	beq	a5bc <tetrisGridIsRowCompleteEnd>
    a5b0:	e2800001 	add	r0, r0, #1
    a5b4:	e1500005 	cmp	r0, r5
    a5b8:	bafffff2 	blt	a588 <tetrisGridIsRowComplete_for_x_lessThan_cols_loop>

0000a5bc <tetrisGridIsRowCompleteEnd>:
    a5bc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    a5c0:	e8bd00f0 	pop	{r4, r5, r6, r7}
    a5c4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a5c8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5cc:	e1a0f00e 	mov	pc, lr

0000a5d0 <tetrisGridClearRow>:
    a5d0:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    a5d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a5d8:	e92d0070 	push	{r4, r5, r6}
    a5dc:	e59f4da8 	ldr	r4, [pc, #3496]	; b38c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x78>
    a5e0:	e8940060 	ldm	r4, {r5, r6}
    a5e4:	e3a00000 	mov	r0, #0

0000a5e8 <tetrisGridClearRow_for_x_lessThan_cols_loop>:
    a5e8:	e92d0003 	push	{r0, r1}
    a5ec:	eb000217 	bl	ae50 <tetrisClearGridBlock>
    a5f0:	e8bd0003 	pop	{r0, r1}
    a5f4:	0a000002 	beq	a604 <tetrisGridClearRowEnd>
    a5f8:	e2800001 	add	r0, r0, #1
    a5fc:	e1500005 	cmp	r0, r5
    a600:	bafffff8 	blt	a5e8 <tetrisGridClearRow_for_x_lessThan_cols_loop>

0000a604 <tetrisGridClearRowEnd>:
    a604:	e8bd0070 	pop	{r4, r5, r6}
    a608:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a60c:	e1a0f00e 	mov	pc, lr

0000a610 <PauseMenuStart>:
    a610:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a614:	eb00002b 	bl	a6c8 <DrawPauseMenu>
    a618:	e3a09000 	mov	r9, #0

0000a61c <PauseMenuPrompt>:
    a61c:	ebfffeef 	bl	a1e0 <sampleSNES>
    a620:	e1a0a000 	mov	sl, r0
    a624:	e3e01008 	mvn	r1, #8
    a628:	e1c00001 	bic	r0, r0, r1
    a62c:	e3500000 	cmp	r0, #0
    a630:	0a000011 	beq	a67c <PauseMenuStartPressed>
    a634:	e1a0000a 	mov	r0, sl
    a638:	e3e01c01 	mvn	r1, #256	; 0x100
    a63c:	e1c00001 	bic	r0, r0, r1
    a640:	e3500000 	cmp	r0, #0
    a644:	0a00000e 	beq	a684 <PauseMenuAPressed>
    a648:	e1a0000a 	mov	r0, sl
    a64c:	e3e01010 	mvn	r1, #16
    a650:	e1c00001 	bic	r0, r0, r1
    a654:	e3500000 	cmp	r0, #0
    a658:	0a00000f 	beq	a69c <PauseMenuUpPressed>
    a65c:	e1a0000a 	mov	r0, sl
    a660:	e3e01020 	mvn	r1, #32
    a664:	e1c00001 	bic	r0, r0, r1
    a668:	e3500000 	cmp	r0, #0
    a66c:	0a00000f 	beq	a6b0 <PauseMenuDownPressed>
    a670:	e59f0d1c 	ldr	r0, [pc, #3356]	; b394 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x80>
    a674:	eb00039d 	bl	b4f0 <startTimer>
    a678:	eaffffe7 	b	a61c <PauseMenuPrompt>

0000a67c <PauseMenuStartPressed>:
    a67c:	eb000043 	bl	a790 <DrawBoard>
    a680:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a684 <PauseMenuAPressed>:
    a684:	e3590000 	cmp	r9, #0
    a688:	e3a01000 	mov	r1, #0
    a68c:	e59f0d04 	ldr	r0, [pc, #3332]	; b398 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x84>
    a690:	e5801000 	str	r1, [r0]
    a694:	0affff73 	beq	a468 <StartGame>
    a698:	eaffff4e 	b	a3d8 <MainMenu>

0000a69c <PauseMenuUpPressed>:
    a69c:	e3590000 	cmp	r9, #0
    a6a0:	0affffdd 	beq	a61c <PauseMenuPrompt>
    a6a4:	e3a09000 	mov	r9, #0
    a6a8:	eb000008 	bl	a6d0 <SetPauseMenuIndicatorRestart>
    a6ac:	eaffffda 	b	a61c <PauseMenuPrompt>

0000a6b0 <PauseMenuDownPressed>:
    a6b0:	e3590001 	cmp	r9, #1
    a6b4:	0affffd8 	beq	a61c <PauseMenuPrompt>
    a6b8:	e3a09001 	mov	r9, #1
    a6bc:	eb00001b 	bl	a730 <SetPauseMenuIndicatorQuit>
    a6c0:	eaffffd5 	b	a61c <PauseMenuPrompt>
    a6c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a6c8 <DrawPauseMenu>:
    a6c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a6cc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a6d0 <SetPauseMenuIndicatorRestart>:
    a6d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a6d4:	e59f0cc0 	ldr	r0, [pc, #3264]	; b39c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x88>
    a6d8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a6dc:	e3a00014 	mov	r0, #20
    a6e0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a6e4:	e3a00014 	mov	r0, #20
    a6e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a6ec:	e3a00e23 	mov	r0, #560	; 0x230
    a6f0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a6f4:	e3a00f71 	mov	r0, #452	; 0x1c4
    a6f8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a6fc:	eb000360 	bl	b484 <drawRect>
    a700:	e3a00000 	mov	r0, #0
    a704:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a708:	e3a00014 	mov	r0, #20
    a70c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a710:	e3a00014 	mov	r0, #20
    a714:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a718:	e59f0c80 	ldr	r0, [pc, #3200]	; b3a0 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x8c>
    a71c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a720:	e3a00f71 	mov	r0, #452	; 0x1c4
    a724:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a728:	eb000355 	bl	b484 <drawRect>
    a72c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a730 <SetPauseMenuIndicatorQuit>:
    a730:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a734:	e59f0c60 	ldr	r0, [pc, #3168]	; b39c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x88>
    a738:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a73c:	e3a00014 	mov	r0, #20
    a740:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a744:	e3a00014 	mov	r0, #20
    a748:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a74c:	e59f0c4c 	ldr	r0, [pc, #3148]	; b3a0 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x8c>
    a750:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a754:	e3a00f71 	mov	r0, #452	; 0x1c4
    a758:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a75c:	eb000348 	bl	b484 <drawRect>
    a760:	e3a00000 	mov	r0, #0
    a764:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a768:	e3a00014 	mov	r0, #20
    a76c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a770:	e3a00014 	mov	r0, #20
    a774:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a778:	e3a00e23 	mov	r0, #560	; 0x230
    a77c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a780:	e3a00f71 	mov	r0, #452	; 0x1c4
    a784:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a788:	eb00033d 	bl	b484 <drawRect>
    a78c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a790 <DrawBoard>:
    a790:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a794:	eb0000e3 	bl	ab28 <ClearScreenBlack>
    a798:	e3a00a0e 	mov	r0, #57344	; 0xe000
    a79c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7a0:	e3a00004 	mov	r0, #4
    a7a4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7a8:	e3a00fa2 	mov	r0, #648	; 0x288
    a7ac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7b0:	e3a0004c 	mov	r0, #76	; 0x4c
    a7b4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7b8:	e3a000bc 	mov	r0, #188	; 0xbc
    a7bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7c0:	eb00032f 	bl	b484 <drawRect>
    a7c4:	e3a00a0e 	mov	r0, #57344	; 0xe000
    a7c8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7cc:	e3a00004 	mov	r0, #4
    a7d0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7d4:	e3a00fa2 	mov	r0, #648	; 0x288
    a7d8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7dc:	e3a00e2b 	mov	r0, #688	; 0x2b0
    a7e0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7e4:	e3a000bc 	mov	r0, #188	; 0xbc
    a7e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7ec:	eb000324 	bl	b484 <drawRect>
    a7f0:	e3a00a0e 	mov	r0, #57344	; 0xe000
    a7f4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a7f8:	e3a00e26 	mov	r0, #608	; 0x260
    a7fc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a800:	e3a00004 	mov	r0, #4
    a804:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a808:	e3a00050 	mov	r0, #80	; 0x50
    a80c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a810:	e3a000bc 	mov	r0, #188	; 0xbc
    a814:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a818:	eb000319 	bl	b484 <drawRect>
    a81c:	e3a00a0e 	mov	r0, #57344	; 0xe000
    a820:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a824:	e3a00e26 	mov	r0, #608	; 0x260
    a828:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a82c:	e3a00004 	mov	r0, #4
    a830:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a834:	e3a00050 	mov	r0, #80	; 0x50
    a838:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a83c:	e3a00c02 	mov	r0, #512	; 0x200
    a840:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a844:	eb00030e 	bl	b484 <drawRect>
    a848:	e3a00a0e 	mov	r0, #57344	; 0xe000
    a84c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a850:	e3a00e26 	mov	r0, #608	; 0x260
    a854:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a858:	e3a00004 	mov	r0, #4
    a85c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a860:	e3a00050 	mov	r0, #80	; 0x50
    a864:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a868:	e3a00d0d 	mov	r0, #832	; 0x340
    a86c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a870:	eb000303 	bl	b484 <drawRect>
    a874:	e59f0b28 	ldr	r0, [pc, #2856]	; b3a4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x90>
    a878:	e59f1b28 	ldr	r1, [pc, #2856]	; b3a8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x94>
    a87c:	e59f2b28 	ldr	r2, [pc, #2856]	; b3ac <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x98>
    a880:	e3a030e6 	mov	r3, #230	; 0xe6
    a884:	eb000117 	bl	ace8 <WriteSentence>
    a888:	e59f0b18 	ldr	r0, [pc, #2840]	; b3a8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x94>
    a88c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a890:	e3a00036 	mov	r0, #54	; 0x36
    a894:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a898:	e3a00036 	mov	r0, #54	; 0x36
    a89c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a8a0:	e3a000d3 	mov	r0, #211	; 0xd3
    a8a4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a8a8:	e59f0b00 	ldr	r0, [pc, #2816]	; b3b0 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x9c>
    a8ac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a8b0:	eb0002f3 	bl	b484 <drawRect>
    a8b4:	e59f0af8 	ldr	r0, [pc, #2808]	; b3b4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xa0>
    a8b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a8bc:	e3a00032 	mov	r0, #50	; 0x32
    a8c0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a8c4:	e3a00032 	mov	r0, #50	; 0x32
    a8c8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a8cc:	e3a000d5 	mov	r0, #213	; 0xd5
    a8d0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a8d4:	e59f0adc 	ldr	r0, [pc, #2780]	; b3b8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xa4>
    a8d8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a8dc:	eb0002e8 	bl	b484 <drawRect>
    a8e0:	e59f0ad4 	ldr	r0, [pc, #2772]	; b3bc <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xa8>
    a8e4:	e59f1ad4 	ldr	r1, [pc, #2772]	; b3c0 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xac>
    a8e8:	e59f2ad4 	ldr	r2, [pc, #2772]	; b3c4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xb0>
    a8ec:	e59f3ad4 	ldr	r3, [pc, #2772]	; b3c8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xb4>
    a8f0:	eb0000fc 	bl	ace8 <WriteSentence>
    a8f4:	e59f0ac4 	ldr	r0, [pc, #2756]	; b3c0 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xac>
    a8f8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a8fc:	e3a00088 	mov	r0, #136	; 0x88
    a900:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a904:	e3a00088 	mov	r0, #136	; 0x88
    a908:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a90c:	e3a00e21 	mov	r0, #528	; 0x210
    a910:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a914:	e3a00fa1 	mov	r0, #644	; 0x284
    a918:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a91c:	eb0002d8 	bl	b484 <drawRect>
    a920:	e59f0a8c 	ldr	r0, [pc, #2700]	; b3b4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xa0>
    a924:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a928:	e3a00084 	mov	r0, #132	; 0x84
    a92c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a930:	e3a00084 	mov	r0, #132	; 0x84
    a934:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a938:	e59f0a8c 	ldr	r0, [pc, #2700]	; b3cc <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xb8>
    a93c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a940:	e59f0a88 	ldr	r0, [pc, #2696]	; b3d0 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xbc>
    a944:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a948:	eb0002cd 	bl	b484 <drawRect>
    a94c:	eb000000 	bl	a954 <UpdateScore>
    a950:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a954 <UpdateScore>:
    a954:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a958:	e59f0a54 	ldr	r0, [pc, #2644]	; b3b4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xa0>
    a95c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a960:	e3a00014 	mov	r0, #20
    a964:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a968:	e3a00018 	mov	r0, #24
    a96c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a970:	e3a000e4 	mov	r0, #228	; 0xe4
    a974:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a978:	e59f0a54 	ldr	r0, [pc, #2644]	; b3d4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xc0>
    a97c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a980:	eb0002bf 	bl	b484 <drawRect>
    a984:	e59f0a0c 	ldr	r0, [pc, #2572]	; b398 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x84>
    a988:	e5901000 	ldr	r1, [r0]
    a98c:	e3510063 	cmp	r1, #99	; 0x63
    a990:	ca000011 	bgt	a9dc <threeDigitScore>
    a994:	e3510009 	cmp	r1, #9
    a998:	ca000003 	bgt	a9ac <twoDigitScore>

0000a99c <oneDigitScore>:
    a99c:	e59f0a34 	ldr	r0, [pc, #2612]	; b3d8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xc4>
    a9a0:	e2811030 	add	r1, r1, #48	; 0x30
    a9a4:	e5c01006 	strb	r1, [r0, #6]
    a9a8:	ea000010 	b	a9f0 <PrintScore>

0000a9ac <twoDigitScore>:
    a9ac:	e59f0a24 	ldr	r0, [pc, #2596]	; b3d8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xc4>
    a9b0:	e3a02000 	mov	r2, #0

0000a9b4 <twoDigitScoreLoop>:
    a9b4:	e351000a 	cmp	r1, #10
    a9b8:	ba000002 	blt	a9c8 <twoDigitScoreLoopDone>
    a9bc:	e241100a 	sub	r1, r1, #10
    a9c0:	e2822001 	add	r2, r2, #1
    a9c4:	eafffffa 	b	a9b4 <twoDigitScoreLoop>

0000a9c8 <twoDigitScoreLoopDone>:
    a9c8:	e2811030 	add	r1, r1, #48	; 0x30
    a9cc:	e2822030 	add	r2, r2, #48	; 0x30
    a9d0:	e5c02005 	strb	r2, [r0, #5]
    a9d4:	e5c01006 	strb	r1, [r0, #6]
    a9d8:	ea000004 	b	a9f0 <PrintScore>

0000a9dc <threeDigitScore>:
    a9dc:	e2411064 	sub	r1, r1, #100	; 0x64
    a9e0:	e59f09f0 	ldr	r0, [pc, #2544]	; b3d8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xc4>
    a9e4:	e3a02031 	mov	r2, #49	; 0x31
    a9e8:	e5c02004 	strb	r2, [r0, #4]
    a9ec:	eaffffee 	b	a9ac <twoDigitScore>

0000a9f0 <PrintScore>:
    a9f0:	e59f09e0 	ldr	r0, [pc, #2528]	; b3d8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xc4>
    a9f4:	e3a01000 	mov	r1, #0
    a9f8:	e59f29d4 	ldr	r2, [pc, #2516]	; b3d4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xc0>
    a9fc:	e3a030e6 	mov	r3, #230	; 0xe6
    aa00:	eb0000b8 	bl	ace8 <WriteSentence>
    aa04:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000aa08 <DrawTitle>:
    aa08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aa0c:	e3a00000 	mov	r0, #0
    aa10:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa14:	e3a0001e 	mov	r0, #30
    aa18:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa1c:	e3a00064 	mov	r0, #100	; 0x64
    aa20:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa24:	e3a0005e 	mov	r0, #94	; 0x5e
    aa28:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa2c:	e3a000de 	mov	r0, #222	; 0xde
    aa30:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa34:	eb000292 	bl	b484 <drawRect>
    aa38:	e3a00000 	mov	r0, #0
    aa3c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa40:	e3a00096 	mov	r0, #150	; 0x96
    aa44:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa48:	e3a0001e 	mov	r0, #30
    aa4c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa50:	e3a0007c 	mov	r0, #124	; 0x7c
    aa54:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa58:	e59f097c 	ldr	r0, [pc, #2428]	; b3dc <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xc8>
    aa5c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa60:	eb000287 	bl	b484 <drawRect>
    aa64:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000aa68 <SetMainMenuIndicatorStart>:
    aa68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aa6c:	e59f0928 	ldr	r0, [pc, #2344]	; b39c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x88>
    aa70:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa74:	e3a00014 	mov	r0, #20
    aa78:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa7c:	e3a00014 	mov	r0, #20
    aa80:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa84:	e3a00fa5 	mov	r0, #660	; 0x294
    aa88:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa8c:	e3a00f71 	mov	r0, #452	; 0x1c4
    aa90:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aa94:	eb00027a 	bl	b484 <drawRect>
    aa98:	e3a00000 	mov	r0, #0
    aa9c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aaa0:	e3a00014 	mov	r0, #20
    aaa4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aaa8:	e3a00014 	mov	r0, #20
    aaac:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aab0:	e59f0928 	ldr	r0, [pc, #2344]	; b3e0 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xcc>
    aab4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aab8:	e3a00f71 	mov	r0, #452	; 0x1c4
    aabc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aac0:	eb00026f 	bl	b484 <drawRect>
    aac4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000aac8 <SetMainMenuIndicatorQuit>:
    aac8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aacc:	e59f08c8 	ldr	r0, [pc, #2248]	; b39c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x88>
    aad0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aad4:	e3a00014 	mov	r0, #20
    aad8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aadc:	e3a00014 	mov	r0, #20
    aae0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aae4:	e59f08f4 	ldr	r0, [pc, #2292]	; b3e0 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xcc>
    aae8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aaec:	e3a00f71 	mov	r0, #452	; 0x1c4
    aaf0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aaf4:	eb000262 	bl	b484 <drawRect>
    aaf8:	e3a00000 	mov	r0, #0
    aafc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab00:	e3a00014 	mov	r0, #20
    ab04:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab08:	e3a00014 	mov	r0, #20
    ab0c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab10:	e3a00fa5 	mov	r0, #660	; 0x294
    ab14:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab18:	e3a00f71 	mov	r0, #452	; 0x1c4
    ab1c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab20:	eb000257 	bl	b484 <drawRect>
    ab24:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ab28 <ClearScreenBlack>:
    ab28:	e92d4600 	push	{r9, sl, lr}
    ab2c:	e59f08b0 	ldr	r0, [pc, #2224]	; b3e4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xd0>
    ab30:	e5909014 	ldr	r9, [r0, #20]
    ab34:	e590a018 	ldr	sl, [r0, #24]
    ab38:	e3a00000 	mov	r0, #0
    ab3c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab40:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    ab44:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    ab48:	e3a00000 	mov	r0, #0
    ab4c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab50:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab54:	eb00024a 	bl	b484 <drawRect>
    ab58:	e8bd8600 	pop	{r9, sl, pc}

0000ab5c <DrawMainMenu>:
    ab5c:	e92d4600 	push	{r9, sl, lr}
    ab60:	e59f087c 	ldr	r0, [pc, #2172]	; b3e4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xd0>
    ab64:	e5909014 	ldr	r9, [r0, #20]
    ab68:	e590a018 	ldr	sl, [r0, #24]
    ab6c:	e59f0874 	ldr	r0, [pc, #2164]	; b3e8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xd4>
    ab70:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab74:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    ab78:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    ab7c:	e3a00000 	mov	r0, #0
    ab80:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab84:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab88:	eb00023d 	bl	b484 <drawRect>
    ab8c:	e59f0858 	ldr	r0, [pc, #2136]	; b3ec <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xd8>
    ab90:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab94:	e3a000c8 	mov	r0, #200	; 0xc8
    ab98:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ab9c:	e3a00f96 	mov	r0, #600	; 0x258
    aba0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aba4:	e3a00054 	mov	r0, #84	; 0x54
    aba8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abac:	e3a000d4 	mov	r0, #212	; 0xd4
    abb0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abb4:	eb000232 	bl	b484 <drawRect>
    abb8:	e59f082c 	ldr	r0, [pc, #2092]	; b3ec <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xd8>
    abbc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abc0:	e3a000c8 	mov	r0, #200	; 0xc8
    abc4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abc8:	e3a000c8 	mov	r0, #200	; 0xc8
    abcc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abd0:	e3a00f47 	mov	r0, #284	; 0x11c
    abd4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abd8:	e3a00f67 	mov	r0, #412	; 0x19c
    abdc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abe0:	eb000227 	bl	b484 <drawRect>
    abe4:	ebffff87 	bl	aa08 <DrawTitle>
    abe8:	e59f0800 	ldr	r0, [pc, #2048]	; b3f0 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xdc>
    abec:	e3a01000 	mov	r1, #0
    abf0:	e59f27fc 	ldr	r2, [pc, #2044]	; b3f4 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xe0>
    abf4:	e3a03044 	mov	r3, #68	; 0x44
    abf8:	eb00003a 	bl	ace8 <WriteSentence>
    abfc:	e59f07f4 	ldr	r0, [pc, #2036]	; b3f8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xe4>
    ac00:	e3a01f8d 	mov	r1, #564	; 0x234
    ac04:	eb00000e 	bl	ac44 <drawMenuButton>
    ac08:	e59f07ec 	ldr	r0, [pc, #2028]	; b3fc <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xe8>
    ac0c:	e3a01000 	mov	r1, #0
    ac10:	e59f27e8 	ldr	r2, [pc, #2024]	; b400 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xec>
    ac14:	e59f37e8 	ldr	r3, [pc, #2024]	; b404 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xf0>
    ac18:	eb000032 	bl	ace8 <WriteSentence>
    ac1c:	e59f07d4 	ldr	r0, [pc, #2004]	; b3f8 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xe4>
    ac20:	e59f17e0 	ldr	r1, [pc, #2016]	; b408 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xf4>
    ac24:	eb000006 	bl	ac44 <drawMenuButton>
    ac28:	e59f07dc 	ldr	r0, [pc, #2012]	; b40c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xf8>
    ac2c:	e3a01000 	mov	r1, #0
    ac30:	e59f27d8 	ldr	r2, [pc, #2008]	; b410 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0xfc>
    ac34:	e3a03fa6 	mov	r3, #664	; 0x298
    ac38:	eb00002a 	bl	ace8 <WriteSentence>
    ac3c:	ebffff89 	bl	aa68 <SetMainMenuIndicatorStart>
    ac40:	e8bd8600 	pop	{r9, sl, pc}

0000ac44 <drawMenuButton>:
    ac44:	e92d4600 	push	{r9, sl, lr}
    ac48:	e1a09000 	mov	r9, r0
    ac4c:	e1a0a001 	mov	sl, r1
    ac50:	e3a00000 	mov	r0, #0
    ac54:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac58:	e3a00032 	mov	r0, #50	; 0x32
    ac5c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac60:	e3a00096 	mov	r0, #150	; 0x96
    ac64:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac68:	e1a0000a 	mov	r0, sl
    ac6c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac70:	e1a00009 	mov	r0, r9
    ac74:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac78:	eb000201 	bl	b484 <drawRect>
    ac7c:	e2899005 	add	r9, r9, #5
    ac80:	e28aa005 	add	sl, sl, #5
    ac84:	e59f0788 	ldr	r0, [pc, #1928]	; b414 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x100>
    ac88:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac8c:	e3a00028 	mov	r0, #40	; 0x28
    ac90:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac94:	e3a0008c 	mov	r0, #140	; 0x8c
    ac98:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ac9c:	e1a0000a 	mov	r0, sl
    aca0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    aca4:	e1a00009 	mov	r0, r9
    aca8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    acac:	eb0001f4 	bl	b484 <drawRect>
    acb0:	e2899005 	add	r9, r9, #5
    acb4:	e28aa005 	add	sl, sl, #5
    acb8:	e59f06dc 	ldr	r0, [pc, #1756]	; b39c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x88>
    acbc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    acc0:	e3a0001e 	mov	r0, #30
    acc4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    acc8:	e3a0001e 	mov	r0, #30
    accc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    acd0:	e1a0000a 	mov	r0, sl
    acd4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    acd8:	e1a00009 	mov	r0, r9
    acdc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ace0:	eb0001e7 	bl	b484 <drawRect>
    ace4:	e8bd8600 	pop	{r9, sl, pc}

0000ace8 <WriteSentence>:
    ace8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    acec:	e1a05000 	mov	r5, r0
    acf0:	e5954000 	ldr	r4, [r5]
    acf4:	e2855004 	add	r5, r5, #4
    acf8:	e1a06001 	mov	r6, r1
    acfc:	e1a08002 	mov	r8, r2
    ad00:	e1a07003 	mov	r7, r3

0000ad04 <LoadChar>:
    ad04:	e4d50001 	ldrb	r0, [r5], #1
    ad08:	e1a01006 	mov	r1, r6
    ad0c:	e1a02007 	mov	r2, r7
    ad10:	e1a03008 	mov	r3, r8
    ad14:	eb000004 	bl	ad2c <DrawChar>
    ad18:	e2888008 	add	r8, r8, #8
    ad1c:	e2444001 	sub	r4, r4, #1
    ad20:	e3540000 	cmp	r4, #0
    ad24:	cafffff6 	bgt	ad04 <LoadChar>
    ad28:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000ad2c <DrawChar>:
    ad2c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    ad30:	e1a09001 	mov	r9, r1
    ad34:	e59f46dc 	ldr	r4, [pc, #1756]	; b418 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x104>
    ad38:	e0844200 	add	r4, r4, r0, lsl #4
    ad3c:	e1a06002 	mov	r6, r2

0000ad40 <charLoop$>:
    ad40:	e1a05003 	mov	r5, r3
    ad44:	e3a08001 	mov	r8, #1
    ad48:	e4d47001 	ldrb	r7, [r4], #1

0000ad4c <rowLoop$>:
    ad4c:	e1170008 	tst	r7, r8
    ad50:	0a000003 	beq	ad64 <noPixel$>
    ad54:	e1a00005 	mov	r0, r5
    ad58:	e1a01006 	mov	r1, r6
    ad5c:	e1a02009 	mov	r2, r9
    ad60:	eb0001bd 	bl	b45c <drawPixel>

0000ad64 <noPixel$>:
    ad64:	e2855001 	add	r5, r5, #1
    ad68:	e1a08088 	lsl	r8, r8, #1
    ad6c:	e3180c01 	tst	r8, #256	; 0x100
    ad70:	0afffff5 	beq	ad4c <rowLoop$>
    ad74:	e2866001 	add	r6, r6, #1
    ad78:	e314000f 	tst	r4, #15
    ad7c:	1affffef 	bne	ad40 <charLoop$>
    ad80:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000ad84 <tetrisInitGrid>:
    ad84:	e59f0600 	ldr	r0, [pc, #1536]	; b38c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x78>
    ad88:	e280100c 	add	r1, r0, #12
    ad8c:	e59f25fc 	ldr	r2, [pc, #1532]	; b390 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x7c>
    ad90:	e3a03000 	mov	r3, #0

0000ad94 <forEach_block_in_tetrisGrid_loop>:
    ad94:	e5813000 	str	r3, [r1]
    ad98:	e2811004 	add	r1, r1, #4
    ad9c:	e1510002 	cmp	r1, r2
    ada0:	aa000000 	bge	ada8 <forEach_block_in_tetrisGrid_loopEnd>
    ada4:	bafffffa 	blt	ad94 <forEach_block_in_tetrisGrid_loop>

0000ada8 <forEach_block_in_tetrisGrid_loopEnd>:
    ada8:	e1a0f00e 	mov	pc, lr

0000adac <tetrisSetGridBlockColor>:
    adac:	e8bd0007 	pop	{r0, r1, r2}
    adb0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    adb4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    adb8:	e59f35cc 	ldr	r3, [pc, #1484]	; b38c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x78>
    adbc:	e8930070 	ldm	r3, {r4, r5, r6}
    adc0:	e283700c 	add	r7, r3, #12
    adc4:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    adc8:	e92d0013 	push	{r0, r1, r4}
    adcc:	eb0001c2 	bl	b4dc <positionToArrayOffset>
    add0:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    add4:	e1a08108 	lsl	r8, r8, #2
    add8:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
    addc:	e7872008 	str	r2, [r7, r8]
    ade0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ade4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ade8:	e1a0f00e 	mov	pc, lr

0000adec <tetrisGetGridBlockColor>:
    adec:	e8bd0006 	pop	{r1, r2}
    adf0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    adf4:	e92d03f0 	push	{r4, r5, r6, r7, r8, r9}
    adf8:	e59f358c 	ldr	r3, [pc, #1420]	; b38c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x78>
    adfc:	e8930070 	ldm	r3, {r4, r5, r6}
    ae00:	e283700c 	add	r7, r3, #12
    ae04:	e3e094ff 	mvn	r9, #-16777216	; 0xff000000
    ae08:	e3510000 	cmp	r1, #0
    ae0c:	ba00000a 	blt	ae3c <tetrisGetGridBlockColorEnd>
    ae10:	e1510004 	cmp	r1, r4
    ae14:	aa000008 	bge	ae3c <tetrisGetGridBlockColorEnd>
    ae18:	e3520000 	cmp	r2, #0
    ae1c:	ba000006 	blt	ae3c <tetrisGetGridBlockColorEnd>
    ae20:	e1520005 	cmp	r2, r5
    ae24:	aa000004 	bge	ae3c <tetrisGetGridBlockColorEnd>

0000ae28 <tetrisGetGridBlockColor_validInput>:
    ae28:	e92d0016 	push	{r1, r2, r4}
    ae2c:	eb0001aa 	bl	b4dc <positionToArrayOffset>
    ae30:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    ae34:	e1a08108 	lsl	r8, r8, #2
    ae38:	e7979008 	ldr	r9, [r7, r8]

0000ae3c <tetrisGetGridBlockColorEnd>:
    ae3c:	e1a00009 	mov	r0, r9
    ae40:	e8bd03f0 	pop	{r4, r5, r6, r7, r8, r9}
    ae44:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ae48:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ae4c:	e1a0f00e 	mov	pc, lr

0000ae50 <tetrisClearGridBlock>:
    ae50:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ae54:	e3a02000 	mov	r2, #0
    ae58:	e92d0007 	push	{r0, r1, r2}
    ae5c:	ebffffd2 	bl	adac <tetrisSetGridBlockColor>
    ae60:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ae64:	e1a0f00e 	mov	pc, lr

0000ae68 <tetrisDrawGrid>:
    ae68:	e1a0000d 	mov	r0, sp
    ae6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ae70:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ae74:	e59f7510 	ldr	r7, [pc, #1296]	; b38c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x78>
    ae78:	e8970700 	ldm	r7, {r8, r9, sl}
    ae7c:	e287b00c 	add	fp, r7, #12
    ae80:	e1a07000 	mov	r7, r0
    ae84:	e3a04000 	mov	r4, #0
    ae88:	e3a05000 	mov	r5, #0
    ae8c:	e3a06000 	mov	r6, #0

0000ae90 <tetrisDrawGrid_for_curCol_lessThan_cols_loop>:
    ae90:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000ae94 <tetrisDrawGrid_for_curRow_lessThan_rows_loop>:
    ae94:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    ae98:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ae9c:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    aea0:	e89707c0 	ldm	r7, {r6, r7, r8, r9, sl}
    aea4:	e92d07c0 	push	{r6, r7, r8, r9, sl}
    aea8:	e92d0030 	push	{r4, r5}
    aeac:	eb0000e1 	bl	b238 <tetrisBlockHasDataForGridPoint>
    aeb0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    aeb4:	e3300000 	teq	r0, #0
    aeb8:	e8bd07c0 	pop	{r6, r7, r8, r9, sl}
    aebc:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    aec0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    aec4:	1a00000d 	bne	af00 <tetrisDrawGridBlockEnd>

0000aec8 <tetrisDrawGridBlock>:
    aec8:	e92d0130 	push	{r4, r5, r8}
    aecc:	eb000182 	bl	b4dc <positionToArrayOffset>
    aed0:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    aed4:	e1a0c10c 	lsl	ip, ip, #2
    aed8:	e79b600c 	ldr	r6, [fp, ip]
    aedc:	e92d000f 	push	{r0, r1, r2, r3}
    aee0:	e92d0030 	push	{r4, r5}
    aee4:	eb000010 	bl	af2c <tetrisGetRectForGridPosition>
    aee8:	e8bd000f 	pop	{r0, r1, r2, r3}
    aeec:	e28000c0 	add	r0, r0, #192	; 0xc0
    aef0:	e2811050 	add	r1, r1, #80	; 0x50
    aef4:	e92d004f 	push	{r0, r1, r2, r3, r6}
    aef8:	eb000161 	bl	b484 <drawRect>
    aefc:	e8bd000f 	pop	{r0, r1, r2, r3}

0000af00 <tetrisDrawGridBlockEnd>:
    af00:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    af04:	e2855001 	add	r5, r5, #1
    af08:	e1550009 	cmp	r5, r9
    af0c:	baffffe0 	blt	ae94 <tetrisDrawGrid_for_curRow_lessThan_rows_loop>
    af10:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    af14:	e2844001 	add	r4, r4, #1
    af18:	e1540008 	cmp	r4, r8
    af1c:	baffffdb 	blt	ae90 <tetrisDrawGrid_for_curCol_lessThan_cols_loop>
    af20:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    af24:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    af28:	e1a0f00e 	mov	pc, lr

0000af2c <tetrisGetRectForGridPosition>:
    af2c:	e8bd0003 	pop	{r0, r1}
    af30:	e92d00f0 	push	{r4, r5, r6, r7}
    af34:	e59f4450 	ldr	r4, [pc, #1104]	; b38c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x78>
    af38:	e89400e0 	ldm	r4, {r5, r6, r7}
    af3c:	e1a02007 	mov	r2, r7
    af40:	e1a03007 	mov	r3, r7
    af44:	e0000092 	mul	r0, r2, r0
    af48:	e0010193 	mul	r1, r3, r1
    af4c:	e8bd00f0 	pop	{r4, r5, r6, r7}
    af50:	e92d000f 	push	{r0, r1, r2, r3}
    af54:	e1a0f00e 	mov	pc, lr

0000af58 <tetrisCreateNewBlock>:
    af58:	e59f04bc 	ldr	r0, [pc, #1212]	; b41c <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x108>
    af5c:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}

0000af60 <initializeTetrisBlock>:
    af60:	e3a04000 	mov	r4, #0
    af64:	e3a05000 	mov	r5, #0
    af68:	e59f64b0 	ldr	r6, [pc, #1200]	; b420 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x10c>
    af6c:	e59f74b0 	ldr	r7, [pc, #1200]	; b424 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop+0x110>
    af70:	e3a08000 	mov	r8, #0

0000af74 <initializeTetrisBlockEnd>:
    af74:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    af78:	e1a0f00e 	mov	pc, lr

0000af7c <tetrisDrawBlock>:
    af7c:	e1a0000d 	mov	r0, sp
    af80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    af84:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    af88:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    af8c:	e92d1800 	push	{fp, ip}
    af90:	e3a0b000 	mov	fp, #0
    af94:	e3a0c000 	mov	ip, #0

0000af98 <for_i_lessThan_4_loop>:
    af98:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000af9c <for_j_lessThan_4_loop>:
    af9c:	e92d0070 	push	{r4, r5, r6}
    afa0:	e19720b8 	ldrh	r2, [r7, r8]
    afa4:	e084400b 	add	r4, r4, fp
    afa8:	e085500c 	add	r5, r5, ip
    afac:	e3a01004 	mov	r1, #4
    afb0:	e0010c91 	mul	r1, r1, ip
    afb4:	e081100b 	add	r1, r1, fp
    afb8:	e1a02112 	lsl	r2, r2, r1
    afbc:	e3a01902 	mov	r1, #32768	; 0x8000
    afc0:	e0011002 	and	r1, r1, r2
    afc4:	e3310000 	teq	r1, #0
    afc8:	e52d6004 	push	{r6}		; (str r6, [sp, #-4]!)
    afcc:	03a06000 	moveq	r6, #0
    afd0:	0a00000a 	beq	b000 <blockHasNoData>

0000afd4 <blockHasData>:
    afd4:	e92d000f 	push	{r0, r1, r2, r3}
    afd8:	e320f000 	nop	{0}
    afdc:	e92d0030 	push	{r4, r5}
    afe0:	ebffffd1 	bl	af2c <tetrisGetRectForGridPosition>
    afe4:	e8bd000f 	pop	{r0, r1, r2, r3}
    afe8:	e320f000 	nop	{0}
    afec:	e28000c0 	add	r0, r0, #192	; 0xc0
    aff0:	e2811050 	add	r1, r1, #80	; 0x50
    aff4:	e92d004f 	push	{r0, r1, r2, r3, r6}
    aff8:	eb000121 	bl	b484 <drawRect>
    affc:	e8bd000f 	pop	{r0, r1, r2, r3}

0000b000 <blockHasNoData>:
    b000:	e49d6004 	pop	{r6}		; (ldr r6, [sp], #4)
    b004:	e8bd0070 	pop	{r4, r5, r6}
    b008:	e28cc001 	add	ip, ip, #1
    b00c:	e35c0004 	cmp	ip, #4
    b010:	baffffe1 	blt	af9c <for_j_lessThan_4_loop>
    b014:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    b018:	e28bb001 	add	fp, fp, #1
    b01c:	e35b0004 	cmp	fp, #4
    b020:	baffffdc 	blt	af98 <for_i_lessThan_4_loop>
    b024:	e8bd1800 	pop	{fp, ip}
    b028:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b02c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b030:	e1a0f00e 	mov	pc, lr

0000b034 <tetrisCheckBlockGridCollisions>:
    b034:	e1a0000d 	mov	r0, sp
    b038:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b03c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b040:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b044:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b048:	eb0000a8 	bl	b2f0 <tetrisGetGridBitmaskForBlock>
    b04c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b050:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b054:	e320f000 	nop	{0}
    b058:	e19710b8 	ldrh	r1, [r7, r8]
    b05c:	e0000001 	and	r0, r0, r1
    b060:	e3500000 	cmp	r0, #0
    b064:	13a00001 	movne	r0, #1
    b068:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b06c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b070:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b074:	e1a0f00e 	mov	pc, lr

0000b078 <tetrisOnBlockCollision>:
    b078:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b07c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b080:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b084:	e19730b8 	ldrh	r3, [r7, r8]
    b088:	e320f000 	nop	{0}
    b08c:	eb000005 	bl	b0a8 <writeBlockToGrid>
    b090:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b094:	ebffffaf 	bl	af58 <tetrisCreateNewBlock>
    b098:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b09c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b0a0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b0a4:	e1a0f00e 	mov	pc, lr

0000b0a8 <writeBlockToGrid>:
    b0a8:	e1a0000d 	mov	r0, sp
    b0ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b0b0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b0b4:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b0b8:	e92d1800 	push	{fp, ip}
    b0bc:	e3a0b000 	mov	fp, #0
    b0c0:	e3a0c000 	mov	ip, #0

0000b0c4 <writeBlockToGrid_for_i_lessThan_4_loop>:
    b0c4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000b0c8 <writeBlockToGrid_for_j_lessThan_4_loop>:
    b0c8:	e92d0070 	push	{r4, r5, r6}
    b0cc:	e19720b8 	ldrh	r2, [r7, r8]
    b0d0:	e084400b 	add	r4, r4, fp
    b0d4:	e085500c 	add	r5, r5, ip
    b0d8:	e3a01004 	mov	r1, #4
    b0dc:	e0010c91 	mul	r1, r1, ip
    b0e0:	e081100b 	add	r1, r1, fp
    b0e4:	e1a02112 	lsl	r2, r2, r1
    b0e8:	e3a01902 	mov	r1, #32768	; 0x8000
    b0ec:	e0011002 	and	r1, r1, r2
    b0f0:	e3310000 	teq	r1, #0
    b0f4:	0a000001 	beq	b100 <writeBlockToGrid_blockHasNoData>

0000b0f8 <writeBlockToGrid_blockHasData>:
    b0f8:	e92d0070 	push	{r4, r5, r6}
    b0fc:	ebffff2a 	bl	adac <tetrisSetGridBlockColor>

0000b100 <writeBlockToGrid_blockHasNoData>:
    b100:	e8bd0070 	pop	{r4, r5, r6}
    b104:	e28cc001 	add	ip, ip, #1
    b108:	e35c0004 	cmp	ip, #4
    b10c:	baffffed 	blt	b0c8 <writeBlockToGrid_for_j_lessThan_4_loop>
    b110:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    b114:	e28bb001 	add	fp, fp, #1
    b118:	e35b0004 	cmp	fp, #4
    b11c:	baffffe8 	blt	b0c4 <writeBlockToGrid_for_i_lessThan_4_loop>
    b120:	e8bd1800 	pop	{fp, ip}
    b124:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b128:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b12c:	e1a0f00e 	mov	pc, lr

0000b130 <tetrisRotateBlock>:
    b130:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b134:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b138:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b13c:	e3300000 	teq	r0, #0
    b140:	0a000000 	beq	b148 <handleRotateLeft>
    b144:	1a000003 	bne	b158 <handleRotateRight>

0000b148 <handleRotateLeft>:
    b148:	e2888002 	add	r8, r8, #2
    b14c:	e3580006 	cmp	r8, #6
    b150:	c3a08000 	movgt	r8, #0
    b154:	ea000003 	b	b168 <handleRotateEnd>

0000b158 <handleRotateRight>:
    b158:	e2488002 	sub	r8, r8, #2
    b15c:	e3580000 	cmp	r8, #0
    b160:	b3a08006 	movlt	r8, #6
    b164:	eaffffff 	b	b168 <handleRotateEnd>

0000b168 <handleRotateEnd>:
    b168:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b16c:	ebffffb0 	bl	b034 <tetrisCheckBlockGridCollisions>
    b170:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b174:	e3300000 	teq	r0, #0
    b178:	1a000000 	bne	b180 <onRotationCollision>
    b17c:	0a000004 	beq	b194 <onNoRotationCollision>

0000b180 <onRotationCollision>:
    b180:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b184:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b188:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b18c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b190:	ea000004 	b	b1a8 <tetrisRotateBlockEnd>

0000b194 <onNoRotationCollision>:
    b194:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b198:	028dd014 	addeq	sp, sp, #20
    b19c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b1a0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b1a4:	eaffffff 	b	b1a8 <tetrisRotateBlockEnd>

0000b1a8 <tetrisRotateBlockEnd>:
    b1a8:	e1a0f00e 	mov	pc, lr

0000b1ac <tetrisTranslateBlock>:
    b1ac:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b1b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b1b4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b1b8:	e0844000 	add	r4, r4, r0
    b1bc:	e0855001 	add	r5, r5, r1
    b1c0:	e92d0003 	push	{r0, r1}
    b1c4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b1c8:	ebffff99 	bl	b034 <tetrisCheckBlockGridCollisions>
    b1cc:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)
    b1d0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b1d4:	e8bd0003 	pop	{r0, r1}
    b1d8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b1dc:	e3330000 	teq	r3, #0
    b1e0:	1a000000 	bne	b1e8 <onTranslationCollision>
    b1e4:	0a00000d 	beq	b220 <onNoTranslationCollision>

0000b1e8 <onTranslationCollision>:
    b1e8:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b1ec:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b1f0:	e3310000 	teq	r1, #0
    b1f4:	0a000000 	beq	b1fc <onTranslationCollision_Horizontal>
    b1f8:	1a000002 	bne	b208 <onTranslationCollision_Vertical>

0000b1fc <onTranslationCollision_Horizontal>:
    b1fc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b200:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b204:	ea00000a 	b	b234 <tetrisTranslateBlockEnd>

0000b208 <onTranslationCollision_Vertical>:
    b208:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b20c:	ebffff99 	bl	b078 <tetrisOnBlockCollision>
    b210:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b214:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b218:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b21c:	ea000004 	b	b234 <tetrisTranslateBlockEnd>

0000b220 <onNoTranslationCollision>:
    b220:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b224:	028dd014 	addeq	sp, sp, #20
    b228:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b22c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b230:	eaffffff 	b	b234 <tetrisTranslateBlockEnd>

0000b234 <tetrisTranslateBlockEnd>:
    b234:	e1a0f00e 	mov	pc, lr

0000b238 <tetrisBlockHasDataForGridPoint>:
    b238:	e8bd0003 	pop	{r0, r1}
    b23c:	e89d01f0 	ldm	sp, {r4, r5, r6, r7, r8}
    b240:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b244:	e92d0003 	push	{r0, r1}
    b248:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b24c:	e92d0003 	push	{r0, r1}
    b250:	eb000013 	bl	b2a4 <tetrisBlockContainsGridPoint>
    b254:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
    b258:	e3320000 	teq	r2, #0
    b25c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b260:	e8bd0003 	pop	{r0, r1}
    b264:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b268:	052d2004 	pusheq	{r2}		; (streq r2, [sp, #-4]!)
    b26c:	0a00000b 	beq	b2a0 <tetrisBlockHasDataForGridLocationEnd>
    b270:	e0440000 	sub	r0, r4, r0
    b274:	e0451001 	sub	r1, r5, r1
    b278:	e19730b8 	ldrh	r3, [r7, r8]
    b27c:	e3a02004 	mov	r2, #4
    b280:	e0020192 	mul	r2, r2, r1
    b284:	e0822000 	add	r2, r2, r0
    b288:	e1a03213 	lsl	r3, r3, r2
    b28c:	e3a02902 	mov	r2, #32768	; 0x8000
    b290:	e0022003 	and	r2, r2, r3
    b294:	e3320000 	teq	r2, #0
    b298:	13a02001 	movne	r2, #1
    b29c:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)

0000b2a0 <tetrisBlockHasDataForGridLocationEnd>:
    b2a0:	e1a0f00e 	mov	pc, lr

0000b2a4 <tetrisBlockContainsGridPoint>:
    b2a4:	e8bd0003 	pop	{r0, r1}
    b2a8:	e89d01f0 	ldm	sp, {r4, r5, r6, r7, r8}
    b2ac:	e3a02001 	mov	r2, #1
    b2b0:	e1500004 	cmp	r0, r4
    b2b4:	b3a02000 	movlt	r2, #0
    b2b8:	ba00000a 	blt	b2e8 <tetrisBlockContainsGridPointEnd>
    b2bc:	e2844004 	add	r4, r4, #4
    b2c0:	e1500004 	cmp	r0, r4
    b2c4:	a3a02000 	movge	r2, #0
    b2c8:	aa000006 	bge	b2e8 <tetrisBlockContainsGridPointEnd>
    b2cc:	e1510005 	cmp	r1, r5
    b2d0:	b3a02000 	movlt	r2, #0
    b2d4:	ba000003 	blt	b2e8 <tetrisBlockContainsGridPointEnd>
    b2d8:	e2855004 	add	r5, r5, #4
    b2dc:	e1510005 	cmp	r1, r5
    b2e0:	a3a02000 	movge	r2, #0
    b2e4:	aaffffff 	bge	b2e8 <tetrisBlockContainsGridPointEnd>

0000b2e8 <tetrisBlockContainsGridPointEnd>:
    b2e8:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    b2ec:	e1a0f00e 	mov	pc, lr

0000b2f0 <tetrisGetGridBitmaskForBlock>:
    b2f0:	e1a0000d 	mov	r0, sp
    b2f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b2f8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b2fc:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b300:	e92d1800 	push	{fp, ip}
    b304:	e3a00000 	mov	r0, #0
    b308:	e3a0b000 	mov	fp, #0
    b30c:	e3a0c000 	mov	ip, #0

0000b310 <tetrisGetGridBitmaskForBlock_for_i_lessThan_4_loop>:
    b310:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000b314 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop>:
    b314:	e92d0070 	push	{r4, r5, r6}
    b318:	e084400b 	add	r4, r4, fp
    b31c:	e085500c 	add	r5, r5, ip
    b320:	e92d1801 	push	{r0, fp, ip}
    b324:	e92d0030 	push	{r4, r5}
    b328:	ebfffeaf 	bl	adec <tetrisGetGridBlockColor>
    b32c:	e49d6004 	pop	{r6}		; (ldr r6, [sp], #4)
    b330:	e8bd1801 	pop	{r0, fp, ip}
    b334:	e3360000 	teq	r6, #0
    b338:	13a01004 	movne	r1, #4
    b33c:	1001019c 	mulne	r1, ip, r1
    b340:	1081100b 	addne	r1, r1, fp
    b344:	13a02902 	movne	r2, #32768	; 0x8000
    b348:	11a02132 	lsrne	r2, r2, r1
    b34c:	11800002 	orrne	r0, r0, r2
    b350:	e8bd0070 	pop	{r4, r5, r6}
    b354:	e28cc001 	add	ip, ip, #1
    b358:	e35c0004 	cmp	ip, #4
    b35c:	baffffec 	blt	b314 <tetrisGetGridBitmaskForBlock_for_j_lessThan_4_loop>
    b360:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    b364:	e28bb001 	add	fp, fp, #1
    b368:	e35b0004 	cmp	fp, #4
    b36c:	baffffe7 	blt	b310 <tetrisGetGridBitmaskForBlock_for_i_lessThan_4_loop>
    b370:	e8bd1800 	pop	{fp, ip}
    b374:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b378:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b37c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b380:	e1a0f00e 	mov	pc, lr
    b384:	00abc777 	.word	0x00abc777
    b388:	000fffff 	.word	0x000fffff
    b38c:	000090f0 	.word	0x000090f0
    b390:	000093f4 	.word	0x000093f4
    b394:	00002710 	.word	0x00002710
    b398:	00009cb0 	.word	0x00009cb0
    b39c:	0000ffff 	.word	0x0000ffff
    b3a0:	000001df 	.word	0x000001df
    b3a4:	00009c90 	.word	0x00009c90
    b3a8:	000034a0 	.word	0x000034a0
    b3ac:	00000269 	.word	0x00000269
    b3b0:	00000297 	.word	0x00000297
    b3b4:	0000adb5 	.word	0x0000adb5
    b3b8:	00000299 	.word	0x00000299
    b3bc:	00009cb4 	.word	0x00009cb4
    b3c0:	00000618 	.word	0x00000618
    b3c4:	0000023e 	.word	0x0000023e
    b3c8:	0000024a 	.word	0x0000024a
    b3cc:	00000212 	.word	0x00000212
    b3d0:	00000286 	.word	0x00000286
    b3d4:	000002a6 	.word	0x000002a6
    b3d8:	00009ca0 	.word	0x00009ca0
    b3dc:	00000101 	.word	0x00000101
    b3e0:	00000243 	.word	0x00000243
    b3e4:	00009080 	.word	0x00009080
    b3e8:	0000967f 	.word	0x0000967f
    b3ec:	0000297e 	.word	0x0000297e
    b3f0:	00009c50 	.word	0x00009c50
    b3f4:	00000172 	.word	0x00000172
    b3f8:	000001b5 	.word	0x000001b5
    b3fc:	00009cc0 	.word	0x00009cc0
    b400:	000001e7 	.word	0x000001e7
    b404:	00000247 	.word	0x00000247
    b408:	00000285 	.word	0x00000285
    b40c:	00009cd0 	.word	0x00009cd0
    b410:	000001eb 	.word	0x000001eb
    b414:	00000d7f 	.word	0x00000d7f
    b418:	00009450 	.word	0x00009450
    b41c:	000093f4 	.word	0x000093f4
    b420:	009999ff 	.word	0x009999ff
    b424:	00009430 	.word	0x00009430

0000b428 <clearScreen>:
    b428:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b42c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b430:	e3a04000 	mov	r4, #0
    b434:	e3a05000 	mov	r5, #0
    b438:	e59f00d0 	ldr	r0, [pc, #208]	; b510 <waitLoop+0x10>
    b43c:	e5906014 	ldr	r6, [r0, #20]
    b440:	e5907018 	ldr	r7, [r0, #24]
    b444:	e3a08000 	mov	r8, #0
    b448:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b44c:	eb00000c 	bl	b484 <drawRect>
    b450:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b454:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b458:	e1a0f00e 	mov	pc, lr

0000b45c <drawPixel>:
    b45c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b460:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    b464:	e0804501 	add	r4, r0, r1, lsl #10
    b468:	e1a04084 	lsl	r4, r4, #1
    b46c:	e59f00a0 	ldr	r0, [pc, #160]	; b514 <waitLoop+0x14>
    b470:	e5900000 	ldr	r0, [r0]
    b474:	e18020b4 	strh	r2, [r0, r4]
    b478:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    b47c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b480:	e1a0f00e 	mov	pc, lr

0000b484 <drawRect>:
    b484:	e1a0000d 	mov	r0, sp
    b488:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b48c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    b490:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    b494:	e0866004 	add	r6, r6, r4
    b498:	e0877005 	add	r7, r7, r5

0000b49c <drawRectForLoopX>:
    b49c:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000b4a0 <drawRectForLoopY>:
    b4a0:	e1a00004 	mov	r0, r4
    b4a4:	e1a01005 	mov	r1, r5
    b4a8:	e1a02008 	mov	r2, r8
    b4ac:	ebffffea 	bl	b45c <drawPixel>
    b4b0:	e2855001 	add	r5, r5, #1
    b4b4:	e1550007 	cmp	r5, r7
    b4b8:	bafffff8 	blt	b4a0 <drawRectForLoopY>
    b4bc:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    b4c0:	e2844001 	add	r4, r4, #1
    b4c4:	e1540006 	cmp	r4, r6
    b4c8:	bafffff3 	blt	b49c <drawRectForLoopX>
    b4cc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    b4d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b4d4:	e28dd014 	add	sp, sp, #20
    b4d8:	e1a0f00e 	mov	pc, lr

0000b4dc <positionToArrayOffset>:
    b4dc:	e8bd0007 	pop	{r0, r1, r2}
    b4e0:	e0030192 	mul	r3, r2, r1
    b4e4:	e0833000 	add	r3, r3, r0
    b4e8:	e92d0008 	stmfd	sp!, {r3}
    b4ec:	e1a0f00e 	mov	pc, lr

0000b4f0 <startTimer>:
    b4f0:	e1a03000 	mov	r3, r0
    b4f4:	e59f001c 	ldr	r0, [pc, #28]	; b518 <waitLoop+0x18>
    b4f8:	e5901000 	ldr	r1, [r0]
    b4fc:	e0811003 	add	r1, r1, r3

0000b500 <waitLoop>:
    b500:	e5902000 	ldr	r2, [r0]
    b504:	e1510002 	cmp	r1, r2
    b508:	8afffffc 	bhi	b500 <waitLoop>
    b50c:	e1a0f00e 	mov	pc, lr
    b510:	00009080 	.word	0x00009080
    b514:	000090e0 	.word	0x000090e0
    b518:	3f003004 	.word	0x3f003004
