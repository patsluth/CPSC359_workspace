
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea00076a 	b	9db0 <main>

Disassembly of section .text:

00009ac0 <EnableJTAG>:
    9ac0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9ac4:	e59f0064 	ldr	r0, [pc, #100]	; 9b30 <dowaitloop+0xc>
    9ac8:	e0211001 	eor	r1, r1, r1
    9acc:	e5801000 	str	r1, [r0]
    9ad0:	eb000012 	bl	9b20 <dowait>
    9ad4:	e59f0058 	ldr	r0, [pc, #88]	; 9b34 <dowaitloop+0x10>
    9ad8:	e59f1058 	ldr	r1, [pc, #88]	; 9b38 <dowaitloop+0x14>
    9adc:	e5801000 	str	r1, [r0]
    9ae0:	eb00000e 	bl	9b20 <dowait>
    9ae4:	e0211001 	eor	r1, r1, r1
    9ae8:	e5801000 	str	r1, [r0]
    9aec:	e59f0048 	ldr	r0, [pc, #72]	; 9b3c <dowaitloop+0x18>
    9af0:	e5901000 	ldr	r1, [r0]
    9af4:	e3c11a07 	bic	r1, r1, #28672	; 0x7000
    9af8:	e3811a02 	orr	r1, r1, #8192	; 0x2000
    9afc:	e5801000 	str	r1, [r0]
    9b00:	e59f0038 	ldr	r0, [pc, #56]	; 9b40 <dowaitloop+0x1c>
    9b04:	e5901000 	ldr	r1, [r0]
    9b08:	e59f2034 	ldr	r2, [pc, #52]	; 9b44 <dowaitloop+0x20>
    9b0c:	e1c11002 	bic	r1, r1, r2
    9b10:	e59f2030 	ldr	r2, [pc, #48]	; 9b48 <dowaitloop+0x24>
    9b14:	e1811002 	orr	r1, r1, r2
    9b18:	e5801000 	str	r1, [r0]
    9b1c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009b20 <dowait>:
    9b20:	e3a02f4b 	mov	r2, #300	; 0x12c

00009b24 <dowaitloop>:
    9b24:	e2522001 	subs	r2, r2, #1
    9b28:	1afffffd 	bne	9b24 <dowaitloop>
    9b2c:	e12fff1e 	bx	lr
    9b30:	3f200094 	.word	0x3f200094
    9b34:	3f200098 	.word	0x3f200098
    9b38:	0bc00010 	.word	0x0bc00010
    9b3c:	3f200000 	.word	0x3f200000
    9b40:	3f200008 	.word	0x3f200008
    9b44:	00e3ffc0 	.word	0x00e3ffc0
    9b48:	0061b6c0 	.word	0x0061b6c0

00009b4c <InitFrameBuffer>:
    9b4c:	e59f2068 	ldr	r2, [pc, #104]	; 9bbc <pointerWaitLoop$+0x1c>
    9b50:	e59f3068 	ldr	r3, [pc, #104]	; 9bc0 <pointerWaitLoop$+0x20>

00009b54 <mBoxFullLoop$>:
    9b54:	e5920018 	ldr	r0, [r2, #24]
    9b58:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    9b5c:	1afffffc 	bne	9b54 <mBoxFullLoop$>
    9b60:	e2830101 	add	r0, r3, #1073741824	; 0x40000000
    9b64:	e3800008 	orr	r0, r0, #8
    9b68:	e5820020 	str	r0, [r2, #32]

00009b6c <mBoxEmptyLoop$>:
    9b6c:	e5920018 	ldr	r0, [r2, #24]
    9b70:	e3100101 	tst	r0, #1073741824	; 0x40000000
    9b74:	1afffffc 	bne	9b6c <mBoxEmptyLoop$>
    9b78:	e5920000 	ldr	r0, [r2]
    9b7c:	e200100f 	and	r1, r0, #15
    9b80:	e3310008 	teq	r1, #8
    9b84:	1afffff8 	bne	9b6c <mBoxEmptyLoop$>
    9b88:	e59f0030 	ldr	r0, [pc, #48]	; 9bc0 <pointerWaitLoop$+0x20>
    9b8c:	e5901004 	ldr	r1, [r0, #4]
    9b90:	e3310102 	teq	r1, #-2147483648	; 0x80000000
    9b94:	0a000001 	beq	9ba0 <pointerWaitLoop$>
    9b98:	13a00000 	movne	r0, #0
    9b9c:	112fff1e 	bxne	lr

00009ba0 <pointerWaitLoop$>:
    9ba0:	e59f001c 	ldr	r0, [pc, #28]	; 9bc4 <pointerWaitLoop$+0x24>
    9ba4:	e5900000 	ldr	r0, [r0]
    9ba8:	e3300000 	teq	r0, #0
    9bac:	0afffffb 	beq	9ba0 <pointerWaitLoop$>
    9bb0:	e59f3010 	ldr	r3, [pc, #16]	; 9bc8 <pointerWaitLoop$+0x28>
    9bb4:	e5830000 	str	r0, [r3]
    9bb8:	e12fff1e 	bx	lr
    9bbc:	3f00b880 	.word	0x3f00b880
    9bc0:	00009080 	.word	0x00009080
    9bc4:	000090cc 	.word	0x000090cc
    9bc8:	000090e0 	.word	0x000090e0

00009bcc <sampleSNES>:
    9bcc:	e92d4000 	stmfd	sp!, {lr}

00009bd0 <initSNES>:
    9bd0:	e3a00001 	mov	r0, #1
    9bd4:	eb000048 	bl	9cfc <setCLOCKFunction>
    9bd8:	e3a00001 	mov	r0, #1
    9bdc:	eb00003d 	bl	9cd8 <setLATCHFunction>
    9be0:	e3a00000 	mov	r0, #0
    9be4:	eb000034 	bl	9cbc <setDATAFunction>

00009be8 <startSamplingSNESButtons>:
    9be8:	e3a0000b 	mov	r0, #11
    9bec:	e3a01001 	mov	r1, #1
    9bf0:	eb000056 	bl	9d50 <writeGPIO>
    9bf4:	e3a00009 	mov	r0, #9
    9bf8:	e3a01001 	mov	r1, #1
    9bfc:	eb000053 	bl	9d50 <writeGPIO>
    9c00:	e3a0000c 	mov	r0, #12
    9c04:	eb000019 	bl	9c70 <startTimer>
    9c08:	e3a00009 	mov	r0, #9
    9c0c:	e3a01000 	mov	r1, #0
    9c10:	eb00004e 	bl	9d50 <writeGPIO>
    9c14:	e3a08000 	mov	r8, #0
    9c18:	e3a07000 	mov	r7, #0

00009c1c <pulseLoop>:
    9c1c:	e3a00006 	mov	r0, #6
    9c20:	eb000012 	bl	9c70 <startTimer>
    9c24:	e3a0000b 	mov	r0, #11
    9c28:	e3a01000 	mov	r1, #0
    9c2c:	eb000047 	bl	9d50 <writeGPIO>
    9c30:	e3a00006 	mov	r0, #6
    9c34:	eb00000d 	bl	9c70 <startTimer>
    9c38:	e3a0000a 	mov	r0, #10
    9c3c:	e3a01000 	mov	r1, #0
    9c40:	eb000036 	bl	9d20 <readGPIO>
    9c44:	e1a00710 	lsl	r0, r0, r7
    9c48:	e1888000 	orr	r8, r8, r0
    9c4c:	e3a0000b 	mov	r0, #11
    9c50:	e3a01001 	mov	r1, #1
    9c54:	eb00003d 	bl	9d50 <writeGPIO>
    9c58:	e2877001 	add	r7, r7, #1
    9c5c:	e3570010 	cmp	r7, #16
    9c60:	baffffed 	blt	9c1c <pulseLoop>

00009c64 <pulseLoopEnd>:
    9c64:	e1a00008 	mov	r0, r8

00009c68 <mainEnd>:
    9c68:	eaffffff 	b	9c6c <killProgram>

00009c6c <killProgram>:
    9c6c:	e8bd8000 	ldmfd	sp!, {pc}

00009c70 <startTimer>:
    9c70:	e1a03000 	mov	r3, r0
    9c74:	e59f0128 	ldr	r0, [pc, #296]	; 9da4 <newButtonPress+0x14>
    9c78:	e5901000 	ldr	r1, [r0]
    9c7c:	e0811003 	add	r1, r1, r3

00009c80 <waitLoop>:
    9c80:	e5902000 	ldr	r2, [r0]
    9c84:	e1510002 	cmp	r1, r2
    9c88:	8afffffc 	bhi	9c80 <waitLoop>
    9c8c:	e1a0f00e 	mov	pc, lr

00009c90 <setGPIOFunction>:
    9c90:	e59f3110 	ldr	r3, [pc, #272]	; 9da8 <newButtonPress+0x18>
    9c94:	e3a04004 	mov	r4, #4
    9c98:	e0000094 	mul	r0, r4, r0
    9c9c:	e7934000 	ldr	r4, [r3, r0]
    9ca0:	e3a05007 	mov	r5, #7
    9ca4:	e1a05215 	lsl	r5, r5, r2
    9ca8:	e1c33005 	bic	r3, r3, r5
    9cac:	e1a01211 	lsl	r1, r1, r2
    9cb0:	e1844001 	orr	r4, r4, r1
    9cb4:	e7834000 	str	r4, [r3, r0]
    9cb8:	e1a0f00e 	mov	pc, lr

00009cbc <setDATAFunction>:
    9cbc:	e59f10e4 	ldr	r1, [pc, #228]	; 9da8 <newButtonPress+0x18>
    9cc0:	e5912004 	ldr	r2, [r1, #4]
    9cc4:	e3a03007 	mov	r3, #7
    9cc8:	e1c22003 	bic	r2, r2, r3
    9ccc:	e1822000 	orr	r2, r2, r0
    9cd0:	e5812004 	str	r2, [r1, #4]
    9cd4:	e1a0f00e 	mov	pc, lr

00009cd8 <setLATCHFunction>:
    9cd8:	e59f10c8 	ldr	r1, [pc, #200]	; 9da8 <newButtonPress+0x18>
    9cdc:	e5912000 	ldr	r2, [r1]
    9ce0:	e3a03007 	mov	r3, #7
    9ce4:	e1a03d83 	lsl	r3, r3, #27
    9ce8:	e1c22003 	bic	r2, r2, r3
    9cec:	e1a00d80 	lsl	r0, r0, #27
    9cf0:	e1822000 	orr	r2, r2, r0
    9cf4:	e5812000 	str	r2, [r1]
    9cf8:	e1a0f00e 	mov	pc, lr

00009cfc <setCLOCKFunction>:
    9cfc:	e59f10a4 	ldr	r1, [pc, #164]	; 9da8 <newButtonPress+0x18>
    9d00:	e5912004 	ldr	r2, [r1, #4]
    9d04:	e3a03007 	mov	r3, #7
    9d08:	e1a03183 	lsl	r3, r3, #3
    9d0c:	e1c22003 	bic	r2, r2, r3
    9d10:	e1a00180 	lsl	r0, r0, #3
    9d14:	e1822000 	orr	r2, r2, r0
    9d18:	e5812004 	str	r2, [r1, #4]
    9d1c:	e1a0f00e 	mov	pc, lr

00009d20 <readGPIO>:
    9d20:	e59f1080 	ldr	r1, [pc, #128]	; 9da8 <newButtonPress+0x18>
    9d24:	e3500020 	cmp	r0, #32
    9d28:	b5912034 	ldrlt	r2, [r1, #52]	; 0x34
    9d2c:	a5912038 	ldrge	r2, [r1, #56]	; 0x38
    9d30:	a2400020 	subge	r0, r0, #32
    9d34:	e3a03001 	mov	r3, #1
    9d38:	e1a03013 	lsl	r3, r3, r0
    9d3c:	e0022003 	and	r2, r2, r3
    9d40:	e3320000 	teq	r2, #0
    9d44:	03a00000 	moveq	r0, #0
    9d48:	13a00001 	movne	r0, #1
    9d4c:	e1a0f00e 	mov	pc, lr

00009d50 <writeGPIO>:
    9d50:	e3310000 	teq	r1, #0
    9d54:	e59f104c 	ldr	r1, [pc, #76]	; 9da8 <newButtonPress+0x18>
    9d58:	1281201c 	addne	r2, r1, #28
    9d5c:	02812028 	addeq	r2, r1, #40	; 0x28
    9d60:	e3500020 	cmp	r0, #32
    9d64:	a2400020 	subge	r0, r0, #32
    9d68:	e3a01001 	mov	r1, #1
    9d6c:	e1a01011 	lsl	r1, r1, r0
    9d70:	b5821000 	strlt	r1, [r2]
    9d74:	a5821004 	strge	r1, [r2, #4]
    9d78:	e1a0f00e 	mov	pc, lr

00009d7c <areAnySNESButtonsPressed>:
    9d7c:	e59f1028 	ldr	r1, [pc, #40]	; 9dac <newButtonPress+0x1c>
    9d80:	e0411000 	sub	r1, r1, r0
    9d84:	e1500009 	cmp	r0, r9
    9d88:	1a000000 	bne	9d90 <newButtonPress>
    9d8c:	e3a01000 	mov	r1, #0

00009d90 <newButtonPress>:
    9d90:	e3310000 	teq	r1, #0
    9d94:	03a01000 	moveq	r1, #0
    9d98:	13a01001 	movne	r1, #1
    9d9c:	e1a09000 	mov	r9, r0
    9da0:	e1a0f00e 	mov	pc, lr
    9da4:	3f003004 	.word	0x3f003004
    9da8:	3f200000 	.word	0x3f200000
    9dac:	0000ffff 	.word	0x0000ffff

00009db0 <main>:
    9db0:	e3a0d902 	mov	sp, #32768	; 0x8000
    9db4:	ebffff41 	bl	9ac0 <EnableJTAG>
    9db8:	ebffff63 	bl	9b4c <InitFrameBuffer>
    9dbc:	ebffff82 	bl	9bcc <sampleSNES>
    9dc0:	e59f03e8 	ldr	r0, [pc, #1000]	; a1b0 <waitLoop+0x10>
    9dc4:	e280000c 	add	r0, r0, #12
    9dc8:	e59f13e4 	ldr	r1, [pc, #996]	; a1b4 <waitLoop+0x14>

00009dcc <looop>:
    9dcc:	e3a02000 	mov	r2, #0
    9dd0:	e5802000 	str	r2, [r0]
    9dd4:	e2800004 	add	r0, r0, #4
    9dd8:	e0412000 	sub	r2, r1, r0
    9ddc:	e3520000 	cmp	r2, #0
    9de0:	cafffff9 	bgt	9dcc <looop>
    9de4:	eb000094 	bl	a03c <tetrisCreateNewBlock>

00009de8 <mainLoop>:
    9de8:	e3a00000 	mov	r0, #0
    9dec:	e3a01000 	mov	r1, #0
    9df0:	eb000044 	bl	9f08 <tetrisClearGridBlock>
    9df4:	e3a00000 	mov	r0, #0
    9df8:	e3a01001 	mov	r1, #1
    9dfc:	eb000041 	bl	9f08 <tetrisClearGridBlock>
    9e00:	e3a00000 	mov	r0, #0
    9e04:	e3a01002 	mov	r1, #2
    9e08:	eb00003e 	bl	9f08 <tetrisClearGridBlock>
    9e0c:	e3a00000 	mov	r0, #0
    9e10:	e3a01003 	mov	r1, #3
    9e14:	eb00003b 	bl	9f08 <tetrisClearGridBlock>
    9e18:	e3a00001 	mov	r0, #1
    9e1c:	e3a01000 	mov	r1, #0
    9e20:	eb000038 	bl	9f08 <tetrisClearGridBlock>
    9e24:	e3a00001 	mov	r0, #1
    9e28:	e3a01001 	mov	r1, #1
    9e2c:	eb000035 	bl	9f08 <tetrisClearGridBlock>
    9e30:	e3a00001 	mov	r0, #1
    9e34:	e3a01002 	mov	r1, #2
    9e38:	eb000032 	bl	9f08 <tetrisClearGridBlock>
    9e3c:	e3a00001 	mov	r0, #1
    9e40:	e3a01003 	mov	r1, #3
    9e44:	eb00002f 	bl	9f08 <tetrisClearGridBlock>
    9e48:	e3a00002 	mov	r0, #2
    9e4c:	e3a01000 	mov	r1, #0
    9e50:	eb00002c 	bl	9f08 <tetrisClearGridBlock>
    9e54:	e3a00002 	mov	r0, #2
    9e58:	e3a01001 	mov	r1, #1
    9e5c:	eb000029 	bl	9f08 <tetrisClearGridBlock>
    9e60:	e3a00002 	mov	r0, #2
    9e64:	e3a01002 	mov	r1, #2
    9e68:	eb000026 	bl	9f08 <tetrisClearGridBlock>
    9e6c:	e3a00002 	mov	r0, #2
    9e70:	e3a01003 	mov	r1, #3
    9e74:	eb000023 	bl	9f08 <tetrisClearGridBlock>
    9e78:	e3a00003 	mov	r0, #3
    9e7c:	e3a01000 	mov	r1, #0
    9e80:	eb000020 	bl	9f08 <tetrisClearGridBlock>
    9e84:	e3a00003 	mov	r0, #3
    9e88:	e3a01001 	mov	r1, #1
    9e8c:	eb00001d 	bl	9f08 <tetrisClearGridBlock>
    9e90:	e3a00003 	mov	r0, #3
    9e94:	e3a01002 	mov	r1, #2
    9e98:	eb00001a 	bl	9f08 <tetrisClearGridBlock>
    9e9c:	e3a00003 	mov	r0, #3
    9ea0:	e3a01003 	mov	r1, #3
    9ea4:	eb000017 	bl	9f08 <tetrisClearGridBlock>
    9ea8:	eb00003d 	bl	9fa4 <tetrisUpdateGridWithBlock>
    9eac:	e3a000ff 	mov	r0, #255	; 0xff
    9eb0:	eb0000b6 	bl	a190 <startTimer>
    9eb4:	eb00006b 	bl	a068 <tetrisRotateBlockTest>
    9eb8:	e3a00000 	mov	r0, #0
    9ebc:	e3a01001 	mov	r1, #1
    9ec0:	eb000016 	bl	9f20 <tetrisDrawGrid>
    9ec4:	eaffffc7 	b	9de8 <mainLoop>

00009ec8 <mainEnd>:
    9ec8:	eafffffe 	b	9ec8 <mainEnd>

00009ecc <tetrisSetGridBlockColor>:
    9ecc:	e1a0000d 	mov	r0, sp
    9ed0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9ed4:	e92d03f0 	push	{r4, r5, r6, r7, r8, r9}
    9ed8:	e8900070 	ldm	r0, {r4, r5, r6}
    9edc:	e59f72cc 	ldr	r7, [pc, #716]	; a1b0 <waitLoop+0x10>
    9ee0:	e5978008 	ldr	r8, [r7, #8]
    9ee4:	e287700c 	add	r7, r7, #12
    9ee8:	e0090598 	mul	r9, r8, r5
    9eec:	e0899004 	add	r9, r9, r4
    9ef0:	e1a09109 	lsl	r9, r9, #2
    9ef4:	e7876009 	str	r6, [r7, r9]
    9ef8:	e8bd03f0 	pop	{r4, r5, r6, r7, r8, r9}
    9efc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    9f00:	e28dd00c 	add	sp, sp, #12
    9f04:	e1a0f00e 	mov	pc, lr

00009f08 <tetrisClearGridBlock>:
    9f08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9f0c:	e3a02000 	mov	r2, #0
    9f10:	e92d0007 	push	{r0, r1, r2}
    9f14:	ebffffec 	bl	9ecc <tetrisSetGridBlockColor>
    9f18:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    9f1c:	e1a0f00e 	mov	pc, lr

00009f20 <tetrisDrawGrid>:
    9f20:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9f24:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp}
    9f28:	e59f0280 	ldr	r0, [pc, #640]	; a1b0 <waitLoop+0x10>
    9f2c:	e8b00070 	ldm	r0!, {r4, r5, r6}
    9f30:	e1a0a000 	mov	sl, r0
    9f34:	e3a07000 	mov	r7, #0
    9f38:	e3a08000 	mov	r8, #0

00009f3c <for_curRow_lessThan_rows_loop>:
    9f3c:	e52d8004 	push	{r8}		; (str r8, [sp, #-4]!)

00009f40 <for_curCol_lessThan_cols_loop>:
    9f40:	e92d03f0 	push	{r4, r5, r6, r7, r8, r9}
    9f44:	e00b0894 	mul	fp, r4, r8
    9f48:	e08bb007 	add	fp, fp, r7
    9f4c:	e1a0b10b 	lsl	fp, fp, #2
    9f50:	e79a900b 	ldr	r9, [sl, fp]
    9f54:	e0000697 	mul	r0, r7, r6
    9f58:	e0010698 	mul	r1, r8, r6
    9f5c:	e24dd014 	sub	sp, sp, #20
    9f60:	e58d0000 	str	r0, [sp]
    9f64:	e58d1004 	str	r1, [sp, #4]
    9f68:	e58d6008 	str	r6, [sp, #8]
    9f6c:	e58d600c 	str	r6, [sp, #12]
    9f70:	e58d9010 	str	r9, [sp, #16]
    9f74:	eb000073 	bl	a148 <drawRect>
    9f78:	e8bd03f0 	pop	{r4, r5, r6, r7, r8, r9}
    9f7c:	e2888001 	add	r8, r8, #1
    9f80:	e1580005 	cmp	r8, r5
    9f84:	baffffed 	blt	9f40 <for_curCol_lessThan_cols_loop>
    9f88:	e49d8004 	pop	{r8}		; (ldr r8, [sp], #4)
    9f8c:	e2877001 	add	r7, r7, #1
    9f90:	e1570004 	cmp	r7, r4
    9f94:	baffffe8 	blt	9f3c <for_curRow_lessThan_rows_loop>
    9f98:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
    9f9c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    9fa0:	e1a0f00e 	mov	pc, lr

00009fa4 <tetrisUpdateGridWithBlock>:
    9fa4:	e1a0000d 	mov	r0, sp
    9fa8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9fac:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    9fb0:	e89007f0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl}
    9fb4:	e1a04006 	mov	r4, r6
    9fb8:	e1a05007 	mov	r5, r7
    9fbc:	e5804000 	str	r4, [r0]
    9fc0:	e5805004 	str	r5, [r0, #4]
    9fc4:	e3a0b000 	mov	fp, #0
    9fc8:	e3a0c000 	mov	ip, #0

00009fcc <for_i_lessThan_4_loop_>:
    9fcc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

00009fd0 <for_j_lessThan_4_loop_>:
    9fd0:	e92d01c0 	push	{r6, r7, r8}
    9fd4:	e19920ba 	ldrh	r2, [r9, sl]
    9fd8:	e086600b 	add	r6, r6, fp
    9fdc:	e087700c 	add	r7, r7, ip
    9fe0:	e3a01004 	mov	r1, #4
    9fe4:	e0010c91 	mul	r1, r1, ip
    9fe8:	e081100b 	add	r1, r1, fp
    9fec:	e1a02112 	lsl	r2, r2, r1
    9ff0:	e3a01902 	mov	r1, #32768	; 0x8000
    9ff4:	e0011002 	and	r1, r1, r2
    9ff8:	e3310000 	teq	r1, #0
    9ffc:	01a00006 	moveq	r0, r6
    a000:	01a01007 	moveq	r1, r7
    a004:	0bffffbf 	bleq	9f08 <tetrisClearGridBlock>
    a008:	192d01c0 	pushne	{r6, r7, r8}
    a00c:	1bffffae 	blne	9ecc <tetrisSetGridBlockColor>
    a010:	e8bd01c0 	pop	{r6, r7, r8}
    a014:	e28cc001 	add	ip, ip, #1
    a018:	e35c0004 	cmp	ip, #4
    a01c:	baffffeb 	blt	9fd0 <for_j_lessThan_4_loop_>
    a020:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    a024:	e28bb001 	add	fp, fp, #1
    a028:	e35b0004 	cmp	fp, #4
    a02c:	baffffe6 	blt	9fcc <for_i_lessThan_4_loop_>
    a030:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a034:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a038:	e1a0f00e 	mov	pc, lr

0000a03c <tetrisCreateNewBlock>:
    a03c:	e59f0174 	ldr	r0, [pc, #372]	; a1b8 <waitLoop+0x18>
    a040:	e89007f0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl}

0000a044 <initializeTetrisBlock>:
    a044:	e3a04000 	mov	r4, #0
    a048:	e3a05000 	mov	r5, #0
    a04c:	e3a06000 	mov	r6, #0
    a050:	e3a07000 	mov	r7, #0
    a054:	e59f8160 	ldr	r8, [pc, #352]	; a1bc <waitLoop+0x1c>
    a058:	e59f9160 	ldr	r9, [pc, #352]	; a1c0 <waitLoop+0x20>
    a05c:	e3a0a000 	mov	sl, #0

0000a060 <initializeTetrisBlockEnd>:
    a060:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a064:	e1a0f00e 	mov	pc, lr

0000a068 <tetrisRotateBlockTest>:
    a068:	e89d07f0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl}
    a06c:	e28aa002 	add	sl, sl, #2
    a070:	e35a0006 	cmp	sl, #6
    a074:	c3a0a000 	movgt	sl, #0
    a078:	e58da018 	str	sl, [sp, #24]
    a07c:	e1a0f00e 	mov	pc, lr

0000a080 <tetrisTranslateBlockTest>:
    a080:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a084:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a088:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a08c:	e3a00000 	mov	r0, #0
    a090:	e1a01007 	mov	r1, r7
    a094:	ebffff9b 	bl	9f08 <tetrisClearGridBlock>
    a098:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a09c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a0a0:	e3a00001 	mov	r0, #1
    a0a4:	e1a01007 	mov	r1, r7
    a0a8:	ebffff96 	bl	9f08 <tetrisClearGridBlock>
    a0ac:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a0b0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a0b4:	e3a00002 	mov	r0, #2
    a0b8:	e1a01007 	mov	r1, r7
    a0bc:	ebffff91 	bl	9f08 <tetrisClearGridBlock>
    a0c0:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a0c4:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a0c8:	e3a00003 	mov	r0, #3
    a0cc:	e1a01007 	mov	r1, r7
    a0d0:	ebffff8c 	bl	9f08 <tetrisClearGridBlock>
    a0d4:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a0d8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a0dc:	e0866000 	add	r6, r6, r0
    a0e0:	e0877001 	add	r7, r7, r1
    a0e4:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a0e8:	e1a0f00e 	mov	pc, lr

0000a0ec <clearScreen>:
    a0ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a0f0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a0f4:	e3a04000 	mov	r4, #0
    a0f8:	e3a05000 	mov	r5, #0
    a0fc:	e59f00c0 	ldr	r0, [pc, #192]	; a1c4 <waitLoop+0x24>
    a100:	e5906014 	ldr	r6, [r0, #20]
    a104:	e5907018 	ldr	r7, [r0, #24]
    a108:	e3a08000 	mov	r8, #0
    a10c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a110:	eb00000c 	bl	a148 <drawRect>
    a114:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    a118:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a11c:	e1a0f00e 	mov	pc, lr

0000a120 <drawPixel>:
    a120:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a124:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    a128:	e0804501 	add	r4, r0, r1, lsl #10
    a12c:	e1a04084 	lsl	r4, r4, #1
    a130:	e59f0090 	ldr	r0, [pc, #144]	; a1c8 <waitLoop+0x28>
    a134:	e5900000 	ldr	r0, [r0]
    a138:	e18020b4 	strh	r2, [r0, r4]
    a13c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    a140:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a144:	e1a0f00e 	mov	pc, lr

0000a148 <drawRect>:
    a148:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    a14c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a150:	e0866004 	add	r6, r6, r4
    a154:	e0877005 	add	r7, r7, r5

0000a158 <drawRectForLoopX>:
    a158:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000a15c <drawRectForLoopY>:
    a15c:	e1a00004 	mov	r0, r4
    a160:	e1a01005 	mov	r1, r5
    a164:	e1a02008 	mov	r2, r8
    a168:	ebffffec 	bl	a120 <drawPixel>
    a16c:	e2855001 	add	r5, r5, #1
    a170:	e1550007 	cmp	r5, r7
    a174:	bafffff8 	blt	a15c <drawRectForLoopY>
    a178:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    a17c:	e2844001 	add	r4, r4, #1
    a180:	e1540006 	cmp	r4, r6
    a184:	bafffff3 	blt	a158 <drawRectForLoopX>
    a188:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a18c:	e1a0f00e 	mov	pc, lr

0000a190 <startTimer>:
    a190:	e1a03000 	mov	r3, r0
    a194:	e59f0030 	ldr	r0, [pc, #48]	; a1cc <waitLoop+0x2c>
    a198:	e5901000 	ldr	r1, [r0]
    a19c:	e0811003 	add	r1, r1, r3

0000a1a0 <waitLoop>:
    a1a0:	e5902000 	ldr	r2, [r0]
    a1a4:	e1510002 	cmp	r1, r2
    a1a8:	8afffffc 	bhi	a1a0 <waitLoop>
    a1ac:	e1a0f00e 	mov	pc, lr
    a1b0:	000090f0 	.word	0x000090f0
    a1b4:	00009a5c 	.word	0x00009a5c
    a1b8:	00009a5c 	.word	0x00009a5c
    a1bc:	001133ff 	.word	0x001133ff
    a1c0:	00009a90 	.word	0x00009a90
    a1c4:	00009080 	.word	0x00009080
    a1c8:	000090e0 	.word	0x000090e0
    a1cc:	3f003004 	.word	0x3f003004
