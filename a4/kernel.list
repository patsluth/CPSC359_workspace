
build/output.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	ea0008ba 	b	a2f0 <main>

Disassembly of section .text:

0000a000 <EnableJTAG>:
    a000:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a004:	e59f0064 	ldr	r0, [pc, #100]	; a070 <dowaitloop+0xc>
    a008:	e0211001 	eor	r1, r1, r1
    a00c:	e5801000 	str	r1, [r0]
    a010:	eb000012 	bl	a060 <dowait>
    a014:	e59f0058 	ldr	r0, [pc, #88]	; a074 <dowaitloop+0x10>
    a018:	e59f1058 	ldr	r1, [pc, #88]	; a078 <dowaitloop+0x14>
    a01c:	e5801000 	str	r1, [r0]
    a020:	eb00000e 	bl	a060 <dowait>
    a024:	e0211001 	eor	r1, r1, r1
    a028:	e5801000 	str	r1, [r0]
    a02c:	e59f0048 	ldr	r0, [pc, #72]	; a07c <dowaitloop+0x18>
    a030:	e5901000 	ldr	r1, [r0]
    a034:	e3c11a07 	bic	r1, r1, #28672	; 0x7000
    a038:	e3811a02 	orr	r1, r1, #8192	; 0x2000
    a03c:	e5801000 	str	r1, [r0]
    a040:	e59f0038 	ldr	r0, [pc, #56]	; a080 <dowaitloop+0x1c>
    a044:	e5901000 	ldr	r1, [r0]
    a048:	e59f2034 	ldr	r2, [pc, #52]	; a084 <dowaitloop+0x20>
    a04c:	e1c11002 	bic	r1, r1, r2
    a050:	e59f2030 	ldr	r2, [pc, #48]	; a088 <dowaitloop+0x24>
    a054:	e1811002 	orr	r1, r1, r2
    a058:	e5801000 	str	r1, [r0]
    a05c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a060 <dowait>:
    a060:	e3a02f4b 	mov	r2, #300	; 0x12c

0000a064 <dowaitloop>:
    a064:	e2522001 	subs	r2, r2, #1
    a068:	1afffffd 	bne	a064 <dowaitloop>
    a06c:	e12fff1e 	bx	lr
    a070:	3f200094 	.word	0x3f200094
    a074:	3f200098 	.word	0x3f200098
    a078:	0bc00010 	.word	0x0bc00010
    a07c:	3f200000 	.word	0x3f200000
    a080:	3f200008 	.word	0x3f200008
    a084:	00e3ffc0 	.word	0x00e3ffc0
    a088:	0061b6c0 	.word	0x0061b6c0

0000a08c <InitFrameBuffer>:
    a08c:	e59f2068 	ldr	r2, [pc, #104]	; a0fc <pointerWaitLoop$+0x1c>
    a090:	e59f3068 	ldr	r3, [pc, #104]	; a100 <pointerWaitLoop$+0x20>

0000a094 <mBoxFullLoop$>:
    a094:	e5920018 	ldr	r0, [r2, #24]
    a098:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    a09c:	1afffffc 	bne	a094 <mBoxFullLoop$>
    a0a0:	e2830101 	add	r0, r3, #1073741824	; 0x40000000
    a0a4:	e3800008 	orr	r0, r0, #8
    a0a8:	e5820020 	str	r0, [r2, #32]

0000a0ac <mBoxEmptyLoop$>:
    a0ac:	e5920018 	ldr	r0, [r2, #24]
    a0b0:	e3100101 	tst	r0, #1073741824	; 0x40000000
    a0b4:	1afffffc 	bne	a0ac <mBoxEmptyLoop$>
    a0b8:	e5920000 	ldr	r0, [r2]
    a0bc:	e200100f 	and	r1, r0, #15
    a0c0:	e3310008 	teq	r1, #8
    a0c4:	1afffff8 	bne	a0ac <mBoxEmptyLoop$>
    a0c8:	e59f0030 	ldr	r0, [pc, #48]	; a100 <pointerWaitLoop$+0x20>
    a0cc:	e5901004 	ldr	r1, [r0, #4]
    a0d0:	e3310102 	teq	r1, #-2147483648	; 0x80000000
    a0d4:	0a000001 	beq	a0e0 <pointerWaitLoop$>
    a0d8:	13a00000 	movne	r0, #0
    a0dc:	112fff1e 	bxne	lr

0000a0e0 <pointerWaitLoop$>:
    a0e0:	e59f001c 	ldr	r0, [pc, #28]	; a104 <pointerWaitLoop$+0x24>
    a0e4:	e5900000 	ldr	r0, [r0]
    a0e8:	e3300000 	teq	r0, #0
    a0ec:	0afffffb 	beq	a0e0 <pointerWaitLoop$>
    a0f0:	e59f3010 	ldr	r3, [pc, #16]	; a108 <pointerWaitLoop$+0x28>
    a0f4:	e5830000 	str	r0, [r3]
    a0f8:	e12fff1e 	bx	lr
    a0fc:	3f00b880 	.word	0x3f00b880
    a100:	00009080 	.word	0x00009080
    a104:	000090cc 	.word	0x000090cc
    a108:	000090e0 	.word	0x000090e0

0000a10c <sampleSNES>:
    a10c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}

0000a110 <initSNES>:
    a110:	e3a00001 	mov	r0, #1
    a114:	eb000048 	bl	a23c <setCLOCKFunction>
    a118:	e3a00001 	mov	r0, #1
    a11c:	eb00003d 	bl	a218 <setLATCHFunction>
    a120:	e3a00000 	mov	r0, #0
    a124:	eb000034 	bl	a1fc <setDATAFunction>

0000a128 <startSamplingSNESButtons>:
    a128:	e3a0000b 	mov	r0, #11
    a12c:	e3a01001 	mov	r1, #1
    a130:	eb000056 	bl	a290 <writeGPIO>
    a134:	e3a00009 	mov	r0, #9
    a138:	e3a01001 	mov	r1, #1
    a13c:	eb000053 	bl	a290 <writeGPIO>
    a140:	e3a0000c 	mov	r0, #12
    a144:	eb000019 	bl	a1b0 <startTimer>
    a148:	e3a00009 	mov	r0, #9
    a14c:	e3a01000 	mov	r1, #0
    a150:	eb00004e 	bl	a290 <writeGPIO>
    a154:	e3a08000 	mov	r8, #0
    a158:	e3a07000 	mov	r7, #0

0000a15c <pulseLoop>:
    a15c:	e3a00006 	mov	r0, #6
    a160:	eb000012 	bl	a1b0 <startTimer>
    a164:	e3a0000b 	mov	r0, #11
    a168:	e3a01000 	mov	r1, #0
    a16c:	eb000047 	bl	a290 <writeGPIO>
    a170:	e3a00006 	mov	r0, #6
    a174:	eb00000d 	bl	a1b0 <startTimer>
    a178:	e3a0000a 	mov	r0, #10
    a17c:	e3a01000 	mov	r1, #0
    a180:	eb000036 	bl	a260 <readGPIO>
    a184:	e1a00710 	lsl	r0, r0, r7
    a188:	e1888000 	orr	r8, r8, r0
    a18c:	e3a0000b 	mov	r0, #11
    a190:	e3a01001 	mov	r1, #1
    a194:	eb00003d 	bl	a290 <writeGPIO>
    a198:	e2877001 	add	r7, r7, #1
    a19c:	e3570010 	cmp	r7, #16
    a1a0:	baffffed 	blt	a15c <pulseLoop>

0000a1a4 <pulseLoopEnd>:
    a1a4:	e1a00008 	mov	r0, r8

0000a1a8 <mainEnd>:
    a1a8:	eaffffff 	b	a1ac <killProgram>

0000a1ac <killProgram>:
    a1ac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000a1b0 <startTimer>:
    a1b0:	e1a03000 	mov	r3, r0
    a1b4:	e59f0128 	ldr	r0, [pc, #296]	; a2e4 <newButtonPress+0x14>
    a1b8:	e5901000 	ldr	r1, [r0]
    a1bc:	e0811003 	add	r1, r1, r3

0000a1c0 <waitLoop>:
    a1c0:	e5902000 	ldr	r2, [r0]
    a1c4:	e1510002 	cmp	r1, r2
    a1c8:	8afffffc 	bhi	a1c0 <waitLoop>
    a1cc:	e1a0f00e 	mov	pc, lr

0000a1d0 <setGPIOFunction>:
    a1d0:	e59f3110 	ldr	r3, [pc, #272]	; a2e8 <newButtonPress+0x18>
    a1d4:	e3a04004 	mov	r4, #4
    a1d8:	e0000094 	mul	r0, r4, r0
    a1dc:	e7934000 	ldr	r4, [r3, r0]
    a1e0:	e3a05007 	mov	r5, #7
    a1e4:	e1a05215 	lsl	r5, r5, r2
    a1e8:	e1c33005 	bic	r3, r3, r5
    a1ec:	e1a01211 	lsl	r1, r1, r2
    a1f0:	e1844001 	orr	r4, r4, r1
    a1f4:	e7834000 	str	r4, [r3, r0]
    a1f8:	e1a0f00e 	mov	pc, lr

0000a1fc <setDATAFunction>:
    a1fc:	e59f10e4 	ldr	r1, [pc, #228]	; a2e8 <newButtonPress+0x18>
    a200:	e5912004 	ldr	r2, [r1, #4]
    a204:	e3a03007 	mov	r3, #7
    a208:	e1c22003 	bic	r2, r2, r3
    a20c:	e1822000 	orr	r2, r2, r0
    a210:	e5812004 	str	r2, [r1, #4]
    a214:	e1a0f00e 	mov	pc, lr

0000a218 <setLATCHFunction>:
    a218:	e59f10c8 	ldr	r1, [pc, #200]	; a2e8 <newButtonPress+0x18>
    a21c:	e5912000 	ldr	r2, [r1]
    a220:	e3a03007 	mov	r3, #7
    a224:	e1a03d83 	lsl	r3, r3, #27
    a228:	e1c22003 	bic	r2, r2, r3
    a22c:	e1a00d80 	lsl	r0, r0, #27
    a230:	e1822000 	orr	r2, r2, r0
    a234:	e5812000 	str	r2, [r1]
    a238:	e1a0f00e 	mov	pc, lr

0000a23c <setCLOCKFunction>:
    a23c:	e59f10a4 	ldr	r1, [pc, #164]	; a2e8 <newButtonPress+0x18>
    a240:	e5912004 	ldr	r2, [r1, #4]
    a244:	e3a03007 	mov	r3, #7
    a248:	e1a03183 	lsl	r3, r3, #3
    a24c:	e1c22003 	bic	r2, r2, r3
    a250:	e1a00180 	lsl	r0, r0, #3
    a254:	e1822000 	orr	r2, r2, r0
    a258:	e5812004 	str	r2, [r1, #4]
    a25c:	e1a0f00e 	mov	pc, lr

0000a260 <readGPIO>:
    a260:	e59f1080 	ldr	r1, [pc, #128]	; a2e8 <newButtonPress+0x18>
    a264:	e3500020 	cmp	r0, #32
    a268:	b5912034 	ldrlt	r2, [r1, #52]	; 0x34
    a26c:	a5912038 	ldrge	r2, [r1, #56]	; 0x38
    a270:	a2400020 	subge	r0, r0, #32
    a274:	e3a03001 	mov	r3, #1
    a278:	e1a03013 	lsl	r3, r3, r0
    a27c:	e0022003 	and	r2, r2, r3
    a280:	e3320000 	teq	r2, #0
    a284:	03a00000 	moveq	r0, #0
    a288:	13a00001 	movne	r0, #1
    a28c:	e1a0f00e 	mov	pc, lr

0000a290 <writeGPIO>:
    a290:	e3310000 	teq	r1, #0
    a294:	e59f104c 	ldr	r1, [pc, #76]	; a2e8 <newButtonPress+0x18>
    a298:	1281201c 	addne	r2, r1, #28
    a29c:	02812028 	addeq	r2, r1, #40	; 0x28
    a2a0:	e3500020 	cmp	r0, #32
    a2a4:	a2400020 	subge	r0, r0, #32
    a2a8:	e3a01001 	mov	r1, #1
    a2ac:	e1a01011 	lsl	r1, r1, r0
    a2b0:	b5821000 	strlt	r1, [r2]
    a2b4:	a5821004 	strge	r1, [r2, #4]
    a2b8:	e1a0f00e 	mov	pc, lr

0000a2bc <areAnySNESButtonsPressed>:
    a2bc:	e59f1028 	ldr	r1, [pc, #40]	; a2ec <newButtonPress+0x1c>
    a2c0:	e0411000 	sub	r1, r1, r0
    a2c4:	e1500009 	cmp	r0, r9
    a2c8:	1a000000 	bne	a2d0 <newButtonPress>
    a2cc:	e3a01000 	mov	r1, #0

0000a2d0 <newButtonPress>:
    a2d0:	e3310000 	teq	r1, #0
    a2d4:	03a01000 	moveq	r1, #0
    a2d8:	13a01001 	movne	r1, #1
    a2dc:	e1a09000 	mov	r9, r0
    a2e0:	e1a0f00e 	mov	pc, lr
    a2e4:	3f003004 	.word	0x3f003004
    a2e8:	3f200000 	.word	0x3f200000
    a2ec:	0000ffff 	.word	0x0000ffff

0000a2f0 <main>:
    a2f0:	e3a0d902 	mov	sp, #32768	; 0x8000
    a2f4:	ebffff41 	bl	a000 <EnableJTAG>
    a2f8:	ebffff63 	bl	a08c <InitFrameBuffer>
    a2fc:	ebffff82 	bl	a10c <sampleSNES>
    a300:	eb00011a 	bl	a770 <tetrisInitGrid>
    a304:	e3a00000 	mov	r0, #0
    a308:	e3a0100c 	mov	r1, #12
    a30c:	e59f2a14 	ldr	r2, [pc, #2580]	; ad28 <waitLoop+0x10>
    a310:	e92d0007 	push	{r0, r1, r2}
    a314:	eb00011f 	bl	a798 <tetrisSetGridBlockColor>
    a318:	e3a00001 	mov	r0, #1
    a31c:	e3a0100c 	mov	r1, #12
    a320:	e59f2a00 	ldr	r2, [pc, #2560]	; ad28 <waitLoop+0x10>
    a324:	e92d0007 	push	{r0, r1, r2}
    a328:	eb00011a 	bl	a798 <tetrisSetGridBlockColor>
    a32c:	e3a00002 	mov	r0, #2
    a330:	e3a0100c 	mov	r1, #12
    a334:	e59f29ec 	ldr	r2, [pc, #2540]	; ad28 <waitLoop+0x10>
    a338:	e3a00003 	mov	r0, #3
    a33c:	e3a0100c 	mov	r1, #12
    a340:	e59f29e0 	ldr	r2, [pc, #2528]	; ad28 <waitLoop+0x10>
    a344:	e3a00000 	mov	r0, #0
    a348:	e3a0100d 	mov	r1, #13
    a34c:	e59f29d8 	ldr	r2, [pc, #2520]	; ad2c <waitLoop+0x14>
    a350:	e92d0007 	push	{r0, r1, r2}
    a354:	eb00010f 	bl	a798 <tetrisSetGridBlockColor>
    a358:	e3a00001 	mov	r0, #1
    a35c:	e3a0100d 	mov	r1, #13
    a360:	e59f29c4 	ldr	r2, [pc, #2500]	; ad2c <waitLoop+0x14>
    a364:	e92d0007 	push	{r0, r1, r2}
    a368:	eb00010a 	bl	a798 <tetrisSetGridBlockColor>
    a36c:	e3a00002 	mov	r0, #2
    a370:	e3a0100d 	mov	r1, #13
    a374:	e59f29b4 	ldr	r2, [pc, #2484]	; ad30 <waitLoop+0x18>
    a378:	e92d0007 	push	{r0, r1, r2}
    a37c:	eb000105 	bl	a798 <tetrisSetGridBlockColor>
    a380:	e3a00003 	mov	r0, #3
    a384:	e3a0100d 	mov	r1, #13
    a388:	e59f29a0 	ldr	r2, [pc, #2464]	; ad30 <waitLoop+0x18>
    a38c:	e92d0007 	push	{r0, r1, r2}
    a390:	eb000100 	bl	a798 <tetrisSetGridBlockColor>
    a394:	eb0001af 	bl	aa58 <tetrisCreateNewBlock>
    a398:	e3a00001 	mov	r0, #1
    a39c:	eb0001e5 	bl	ab38 <tetrisRotateBlock>
    a3a0:	e3a00001 	mov	r0, #1
    a3a4:	eb0001e3 	bl	ab38 <tetrisRotateBlock>

0000a3a8 <mainLoop>:
    a3a8:	e320f000 	nop	{0}
    a3ac:	eb00013f 	bl	a8b0 <tetrisDrawGrid>
    a3b0:	e320f000 	nop	{0}
    a3b4:	eb00017b 	bl	a9a8 <tetrisUpdateGridWithBlock>
    a3b8:	e320f000 	nop	{0}
    a3bc:	e320f000 	nop	{0}
    a3c0:	e320f000 	nop	{0}
    a3c4:	e3a00001 	mov	r0, #1
    a3c8:	e3a00000 	mov	r0, #0
    a3cc:	e3a01001 	mov	r1, #1
    a3d0:	e320f000 	nop	{0}
    a3d4:	eb0001e5 	bl	ab70 <tetrisTranslateBlock>
    a3d8:	eb0001c2 	bl	aae8 <tetrisCheckBlockGridCollisions>
    a3dc:	e3300000 	teq	r0, #0
    a3e0:	1b0001cf 	blne	ab24 <tetrisOnBlockCollision>
    a3e4:	e59f0948 	ldr	r0, [pc, #2376]	; ad34 <waitLoop+0x1c>
    a3e8:	eb000246 	bl	ad08 <startTimer>
    a3ec:	eaffffed 	b	a3a8 <mainLoop>

0000a3f0 <mainEnd>:
    a3f0:	eafffffe 	b	a3f0 <mainEnd>

0000a3f4 <DrawTitle>:
    a3f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a3f8:	e3a00000 	mov	r0, #0
    a3fc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a400:	e3a0001e 	mov	r0, #30
    a404:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a408:	e3a00064 	mov	r0, #100	; 0x64
    a40c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a410:	e3a0005e 	mov	r0, #94	; 0x5e
    a414:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a418:	e3a000de 	mov	r0, #222	; 0xde
    a41c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a420:	eb00021c 	bl	ac98 <drawRect>
    a424:	e3a00000 	mov	r0, #0
    a428:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a42c:	e3a00096 	mov	r0, #150	; 0x96
    a430:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a434:	e3a0001e 	mov	r0, #30
    a438:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a43c:	e3a0007c 	mov	r0, #124	; 0x7c
    a440:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a444:	e59f08ec 	ldr	r0, [pc, #2284]	; ad38 <waitLoop+0x20>
    a448:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a44c:	eb000211 	bl	ac98 <drawRect>
    a450:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a454 <SetMainMenuIndicatorStart>:
    a454:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a458:	e59f08d4 	ldr	r0, [pc, #2260]	; ad34 <waitLoop+0x1c>
    a45c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a460:	e3a00014 	mov	r0, #20
    a464:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a468:	e3a00014 	mov	r0, #20
    a46c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a470:	e3a00fa5 	mov	r0, #660	; 0x294
    a474:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a478:	e3a00f71 	mov	r0, #452	; 0x1c4
    a47c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a480:	eb000204 	bl	ac98 <drawRect>
    a484:	e3a00000 	mov	r0, #0
    a488:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a48c:	e3a00014 	mov	r0, #20
    a490:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a494:	e3a00014 	mov	r0, #20
    a498:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a49c:	e59f0898 	ldr	r0, [pc, #2200]	; ad3c <waitLoop+0x24>
    a4a0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4a4:	e3a00f71 	mov	r0, #452	; 0x1c4
    a4a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4ac:	eb0001f9 	bl	ac98 <drawRect>
    a4b0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a4b4 <SetMainMenuIndicatorQuit>:
    a4b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a4b8:	e59f0874 	ldr	r0, [pc, #2164]	; ad34 <waitLoop+0x1c>
    a4bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4c0:	e3a00014 	mov	r0, #20
    a4c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4c8:	e3a00014 	mov	r0, #20
    a4cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4d0:	e59f0864 	ldr	r0, [pc, #2148]	; ad3c <waitLoop+0x24>
    a4d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4d8:	e3a00f71 	mov	r0, #452	; 0x1c4
    a4dc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4e0:	eb0001ec 	bl	ac98 <drawRect>
    a4e4:	e3a00000 	mov	r0, #0
    a4e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4ec:	e3a00014 	mov	r0, #20
    a4f0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4f4:	e3a00014 	mov	r0, #20
    a4f8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a4fc:	e3a00fa5 	mov	r0, #660	; 0x294
    a500:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a504:	e3a00f71 	mov	r0, #452	; 0x1c4
    a508:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a50c:	eb0001e1 	bl	ac98 <drawRect>
    a510:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a514 <ClearScreenBlack>:
    a514:	e92d4600 	push	{r9, sl, lr}
    a518:	e59f0820 	ldr	r0, [pc, #2080]	; ad40 <waitLoop+0x28>
    a51c:	e5909014 	ldr	r9, [r0, #20]
    a520:	e590a018 	ldr	sl, [r0, #24]
    a524:	e3a00000 	mov	r0, #0
    a528:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a52c:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    a530:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    a534:	e3a00000 	mov	r0, #0
    a538:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a53c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a540:	eb0001d4 	bl	ac98 <drawRect>
    a544:	e8bd8600 	pop	{r9, sl, pc}

0000a548 <DrawMainMenu>:
    a548:	e92d4600 	push	{r9, sl, lr}
    a54c:	e59f07ec 	ldr	r0, [pc, #2028]	; ad40 <waitLoop+0x28>
    a550:	e5909014 	ldr	r9, [r0, #20]
    a554:	e590a018 	ldr	sl, [r0, #24]
    a558:	e59f07e4 	ldr	r0, [pc, #2020]	; ad44 <waitLoop+0x2c>
    a55c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a560:	e52da004 	push	{sl}		; (str sl, [sp, #-4]!)
    a564:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
    a568:	e3a00000 	mov	r0, #0
    a56c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a570:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a574:	eb0001c7 	bl	ac98 <drawRect>
    a578:	e59f07c8 	ldr	r0, [pc, #1992]	; ad48 <waitLoop+0x30>
    a57c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a580:	e3a000c8 	mov	r0, #200	; 0xc8
    a584:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a588:	e3a00f96 	mov	r0, #600	; 0x258
    a58c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a590:	e3a00054 	mov	r0, #84	; 0x54
    a594:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a598:	e3a000d4 	mov	r0, #212	; 0xd4
    a59c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5a0:	eb0001bc 	bl	ac98 <drawRect>
    a5a4:	e59f079c 	ldr	r0, [pc, #1948]	; ad48 <waitLoop+0x30>
    a5a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5ac:	e3a000c8 	mov	r0, #200	; 0xc8
    a5b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5b4:	e3a000c8 	mov	r0, #200	; 0xc8
    a5b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5bc:	e3a00f47 	mov	r0, #284	; 0x11c
    a5c0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5c4:	e3a00f67 	mov	r0, #412	; 0x19c
    a5c8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a5cc:	eb0001b1 	bl	ac98 <drawRect>
    a5d0:	ebffff87 	bl	a3f4 <DrawTitle>
    a5d4:	e59f0770 	ldr	r0, [pc, #1904]	; ad4c <waitLoop+0x34>
    a5d8:	e3a01000 	mov	r1, #0
    a5dc:	e59f276c 	ldr	r2, [pc, #1900]	; ad50 <waitLoop+0x38>
    a5e0:	e3a03044 	mov	r3, #68	; 0x44
    a5e4:	eb00003a 	bl	a6d4 <WriteSentence>
    a5e8:	e59f0764 	ldr	r0, [pc, #1892]	; ad54 <waitLoop+0x3c>
    a5ec:	e3a01f8d 	mov	r1, #564	; 0x234
    a5f0:	eb00000e 	bl	a630 <drawStartMenuButton>
    a5f4:	e59f075c 	ldr	r0, [pc, #1884]	; ad58 <waitLoop+0x40>
    a5f8:	e3a01000 	mov	r1, #0
    a5fc:	e59f2758 	ldr	r2, [pc, #1880]	; ad5c <waitLoop+0x44>
    a600:	e59f3758 	ldr	r3, [pc, #1880]	; ad60 <waitLoop+0x48>
    a604:	eb000032 	bl	a6d4 <WriteSentence>
    a608:	e59f0744 	ldr	r0, [pc, #1860]	; ad54 <waitLoop+0x3c>
    a60c:	e59f1750 	ldr	r1, [pc, #1872]	; ad64 <waitLoop+0x4c>
    a610:	eb000006 	bl	a630 <drawStartMenuButton>
    a614:	e59f074c 	ldr	r0, [pc, #1868]	; ad68 <waitLoop+0x50>
    a618:	e3a01000 	mov	r1, #0
    a61c:	e59f2748 	ldr	r2, [pc, #1864]	; ad6c <waitLoop+0x54>
    a620:	e3a03fa6 	mov	r3, #664	; 0x298
    a624:	eb00002a 	bl	a6d4 <WriteSentence>
    a628:	ebffff89 	bl	a454 <SetMainMenuIndicatorStart>
    a62c:	e8bd8600 	pop	{r9, sl, pc}

0000a630 <drawStartMenuButton>:
    a630:	e92d4600 	push	{r9, sl, lr}
    a634:	e1a09000 	mov	r9, r0
    a638:	e1a0a001 	mov	sl, r1
    a63c:	e3a00000 	mov	r0, #0
    a640:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a644:	e3a00032 	mov	r0, #50	; 0x32
    a648:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a64c:	e3a00096 	mov	r0, #150	; 0x96
    a650:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a654:	e1a0000a 	mov	r0, sl
    a658:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a65c:	e1a00009 	mov	r0, r9
    a660:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a664:	eb00018b 	bl	ac98 <drawRect>
    a668:	e2899005 	add	r9, r9, #5
    a66c:	e28aa005 	add	sl, sl, #5
    a670:	e59f06f8 	ldr	r0, [pc, #1784]	; ad70 <waitLoop+0x58>
    a674:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a678:	e3a00028 	mov	r0, #40	; 0x28
    a67c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a680:	e3a0008c 	mov	r0, #140	; 0x8c
    a684:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a688:	e1a0000a 	mov	r0, sl
    a68c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a690:	e1a00009 	mov	r0, r9
    a694:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a698:	eb00017e 	bl	ac98 <drawRect>
    a69c:	e2899005 	add	r9, r9, #5
    a6a0:	e28aa005 	add	sl, sl, #5
    a6a4:	e59f0688 	ldr	r0, [pc, #1672]	; ad34 <waitLoop+0x1c>
    a6a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a6ac:	e3a0001e 	mov	r0, #30
    a6b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a6b4:	e3a0001e 	mov	r0, #30
    a6b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a6bc:	e1a0000a 	mov	r0, sl
    a6c0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a6c4:	e1a00009 	mov	r0, r9
    a6c8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a6cc:	eb000171 	bl	ac98 <drawRect>
    a6d0:	e8bd8600 	pop	{r9, sl, pc}

0000a6d4 <WriteSentence>:
    a6d4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a6d8:	e1a05000 	mov	r5, r0
    a6dc:	e5954000 	ldr	r4, [r5]
    a6e0:	e2855004 	add	r5, r5, #4
    a6e4:	e1a06001 	mov	r6, r1
    a6e8:	e1a08002 	mov	r8, r2
    a6ec:	e1a07003 	mov	r7, r3

0000a6f0 <LoadChar>:
    a6f0:	e4d50001 	ldrb	r0, [r5], #1
    a6f4:	e1a01006 	mov	r1, r6
    a6f8:	e1a02007 	mov	r2, r7
    a6fc:	e1a03008 	mov	r3, r8
    a700:	eb000004 	bl	a718 <DrawChar>
    a704:	e2888008 	add	r8, r8, #8
    a708:	e2444001 	sub	r4, r4, #1
    a70c:	e3540000 	cmp	r4, #0
    a710:	cafffff6 	bgt	a6f0 <LoadChar>
    a714:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000a718 <DrawChar>:
    a718:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a71c:	e1a09001 	mov	r9, r1
    a720:	e59f464c 	ldr	r4, [pc, #1612]	; ad74 <waitLoop+0x5c>
    a724:	e0844200 	add	r4, r4, r0, lsl #4
    a728:	e1a06002 	mov	r6, r2

0000a72c <charLoop$>:
    a72c:	e1a05003 	mov	r5, r3
    a730:	e3a08001 	mov	r8, #1
    a734:	e4d47001 	ldrb	r7, [r4], #1

0000a738 <rowLoop$>:
    a738:	e1170008 	tst	r7, r8
    a73c:	0a000003 	beq	a750 <noPixel$>
    a740:	e1a00005 	mov	r0, r5
    a744:	e1a01006 	mov	r1, r6
    a748:	e1a02009 	mov	r2, r9
    a74c:	eb000147 	bl	ac70 <drawPixel>

0000a750 <noPixel$>:
    a750:	e2855001 	add	r5, r5, #1
    a754:	e1a08088 	lsl	r8, r8, #1
    a758:	e3180c01 	tst	r8, #256	; 0x100
    a75c:	0afffff5 	beq	a738 <rowLoop$>
    a760:	e2866001 	add	r6, r6, #1
    a764:	e314000f 	tst	r4, #15
    a768:	1affffef 	bne	a72c <charLoop$>
    a76c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000a770 <tetrisInitGrid>:
    a770:	e59f0600 	ldr	r0, [pc, #1536]	; ad78 <waitLoop+0x60>
    a774:	e280100c 	add	r1, r0, #12
    a778:	e59f25fc 	ldr	r2, [pc, #1532]	; ad7c <waitLoop+0x64>
    a77c:	e3a03000 	mov	r3, #0

0000a780 <forEach_block_in_tetrisGrid_loop>:
    a780:	e5813000 	str	r3, [r1]
    a784:	e2811004 	add	r1, r1, #4
    a788:	e1510002 	cmp	r1, r2
    a78c:	aa000000 	bge	a794 <forEach_block_in_tetrisGrid_loopEnd>
    a790:	bafffffa 	blt	a780 <forEach_block_in_tetrisGrid_loop>

0000a794 <forEach_block_in_tetrisGrid_loopEnd>:
    a794:	e1a0f00e 	mov	pc, lr

0000a798 <tetrisSetGridBlockColor>:
    a798:	e8bd0007 	pop	{r0, r1, r2}
    a79c:	e59f35d4 	ldr	r3, [pc, #1492]	; ad78 <waitLoop+0x60>
    a7a0:	e5934000 	ldr	r4, [r3]
    a7a4:	e5935004 	ldr	r5, [r3, #4]
    a7a8:	e5936008 	ldr	r6, [r3, #8]
    a7ac:	e283700c 	add	r7, r3, #12
    a7b0:	e0080195 	mul	r8, r5, r1
    a7b4:	e0888000 	add	r8, r8, r0
    a7b8:	e1a08108 	lsl	r8, r8, #2
    a7bc:	e7872008 	str	r2, [r7, r8]
    a7c0:	e1a0f00e 	mov	pc, lr

0000a7c4 <tetrisGetGridBlockColor>:
    a7c4:	e8bd0006 	pop	{r1, r2}
    a7c8:	e59f35a8 	ldr	r3, [pc, #1448]	; ad78 <waitLoop+0x60>
    a7cc:	e5934000 	ldr	r4, [r3]
    a7d0:	e5935004 	ldr	r5, [r3, #4]
    a7d4:	e5936008 	ldr	r6, [r3, #8]
    a7d8:	e283700c 	add	r7, r3, #12
    a7dc:	e0080295 	mul	r8, r5, r2
    a7e0:	e0888001 	add	r8, r8, r1
    a7e4:	e1a08108 	lsl	r8, r8, #2
    a7e8:	e7970008 	ldr	r0, [r7, r8]
    a7ec:	e1a0f00e 	mov	pc, lr

0000a7f0 <tetrisClearGridBlock>:
    a7f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a7f4:	e3a02000 	mov	r2, #0
    a7f8:	e92d0007 	push	{r0, r1, r2}
    a7fc:	ebffffe5 	bl	a798 <tetrisSetGridBlockColor>
    a800:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a804:	e1a0f00e 	mov	pc, lr

0000a808 <tetrisGetGridBitmaskForBlock>:
    a808:	e1a0000d 	mov	r0, sp
    a80c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a810:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a814:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    a818:	e92d1800 	push	{fp, ip}
    a81c:	e3a01000 	mov	r1, #0
    a820:	e3a0b000 	mov	fp, #0
    a824:	e3a0c000 	mov	ip, #0

0000a828 <for_i_lessThan_4_loop_>:
    a828:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000a82c <for_j_lessThan_4_loop_>:
    a82c:	e92d0030 	push	{r4, r5}
    a830:	e084400c 	add	r4, r4, ip
    a834:	e085500b 	add	r5, r5, fp
    a838:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    a83c:	e92d0030 	push	{r4, r5}
    a840:	ebffffdf 	bl	a7c4 <tetrisGetGridBlockColor>
    a844:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    a848:	e3300000 	teq	r0, #0
    a84c:	e1a01081 	lsl	r1, r1, #1
    a850:	12811001 	addne	r1, r1, #1
    a854:	e8bd0030 	pop	{r4, r5}
    a858:	e28cc001 	add	ip, ip, #1
    a85c:	e35c0004 	cmp	ip, #4
    a860:	bafffff1 	blt	a82c <for_j_lessThan_4_loop_>
    a864:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    a868:	e28bb001 	add	fp, fp, #1
    a86c:	e35b0004 	cmp	fp, #4
    a870:	baffffec 	blt	a828 <for_i_lessThan_4_loop_>
    a874:	e8bd1800 	pop	{fp, ip}
    a878:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    a87c:	e1a00001 	mov	r0, r1
    a880:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a884:	e1a0f00e 	mov	pc, lr

0000a888 <tetrisGetGridOffsetForGridPosition>:
    a888:	e8bd0003 	pop	{r0, r1}
    a88c:	e92d0380 	push	{r7, r8, r9}
    a890:	e59f74e0 	ldr	r7, [pc, #1248]	; ad78 <waitLoop+0x60>
    a894:	e8970300 	ldm	r7, {r8, r9}
    a898:	e0020199 	mul	r2, r9, r1
    a89c:	e0822000 	add	r2, r2, r0
    a8a0:	e1a02102 	lsl	r2, r2, #2
    a8a4:	e8bd0380 	pop	{r7, r8, r9}
    a8a8:	e92d0004 	stmfd	sp!, {r2}
    a8ac:	e1a0f00e 	mov	pc, lr

0000a8b0 <tetrisDrawGrid>:
    a8b0:	e1a0000d 	mov	r0, sp
    a8b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a8b8:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a8bc:	e59f74b4 	ldr	r7, [pc, #1204]	; ad78 <waitLoop+0x60>
    a8c0:	e8970700 	ldm	r7, {r8, r9, sl}
    a8c4:	e287b00c 	add	fp, r7, #12
    a8c8:	e1a07000 	mov	r7, r0
    a8cc:	e3a04000 	mov	r4, #0
    a8d0:	e3a05000 	mov	r5, #0
    a8d4:	e3a06000 	mov	r6, #0

0000a8d8 <for_curRow_lessThan_rows_loop>:
    a8d8:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000a8dc <for_curCol_lessThan_cols_loop>:
    a8dc:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a8e0:	e320f000 	nop	{0}
    a8e4:	e320f000 	nop	{0}
    a8e8:	e8971fc0 	ldm	r7, {r6, r7, r8, r9, sl, fp, ip}
    a8ec:	e92d1fc0 	push	{r6, r7, r8, r9, sl, fp, ip}
    a8f0:	e1a00004 	mov	r0, r4
    a8f4:	e1a01005 	mov	r1, r5
    a8f8:	eb000079 	bl	aae4 <tetrisBlockBitForGridPoint>
    a8fc:	e1a00004 	mov	r0, r4
    a900:	e1a01005 	mov	r1, r5
    a904:	eb00005c 	bl	aa7c <tetrisBlockContainsPoint>
    a908:	e8bd1fc0 	pop	{r6, r7, r8, r9, sl, fp, ip}
    a90c:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a910:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a914:	e3300000 	teq	r0, #0
    a918:	e92d0030 	push	{r4, r5}
    a91c:	ebffffd9 	bl	a888 <tetrisGetGridOffsetForGridPosition>
    a920:	e8bd1000 	ldmfd	sp!, {ip}
    a924:	e79b600c 	ldr	r6, [fp, ip]
    a928:	e92d000f 	push	{r0, r1, r2, r3}
    a92c:	e1a00004 	mov	r0, r4
    a930:	e1a01005 	mov	r1, r5
    a934:	e92d0003 	push	{r0, r1}
    a938:	eb00000f 	bl	a97c <tetrisGetRectForGridPosition>
    a93c:	e8bd000f 	pop	{r0, r1, r2, r3}
    a940:	e92d004f 	push	{r0, r1, r2, r3, r6}
    a944:	eb0000d3 	bl	ac98 <drawRect>
    a948:	e8bd000f 	pop	{r0, r1, r2, r3}

0000a94c <skippy>:
    a94c:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a950:	e2855001 	add	r5, r5, #1
    a954:	e1550009 	cmp	r5, r9
    a958:	baffffdf 	blt	a8dc <for_curCol_lessThan_cols_loop>
    a95c:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    a960:	e2844001 	add	r4, r4, #1
    a964:	e1540008 	cmp	r4, r8
    a968:	baffffda 	blt	a8d8 <for_curRow_lessThan_rows_loop>
    a96c:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
    a970:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a974:	e1a0f00e 	mov	pc, lr

0000a978 <tetrisDrawBlock>:
    a978:	e1a0f00e 	mov	pc, lr

0000a97c <tetrisGetRectForGridPosition>:
    a97c:	e8bd0003 	pop	{r0, r1}
    a980:	e92d00f0 	push	{r4, r5, r6, r7}
    a984:	e59f43ec 	ldr	r4, [pc, #1004]	; ad78 <waitLoop+0x60>
    a988:	e89400e0 	ldm	r4, {r5, r6, r7}
    a98c:	e1a02007 	mov	r2, r7
    a990:	e1a03007 	mov	r3, r7
    a994:	e0000092 	mul	r0, r2, r0
    a998:	e0010193 	mul	r1, r3, r1
    a99c:	e8bd00f0 	pop	{r4, r5, r6, r7}
    a9a0:	e92d000f 	push	{r0, r1, r2, r3}
    a9a4:	e1a0f00e 	mov	pc, lr

0000a9a8 <tetrisUpdateGridWithBlock>:
    a9a8:	e1a0000d 	mov	r0, sp
    a9ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a9b0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    a9b4:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    a9b8:	e92d1800 	push	{fp, ip}
    a9bc:	e3a0b000 	mov	fp, #0
    a9c0:	e3a0c000 	mov	ip, #0

0000a9c4 <for_i_lessThan_4_loop>:
    a9c4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000a9c8 <for_j_lessThan_4_loop>:
    a9c8:	e92d0070 	push	{r4, r5, r6}
    a9cc:	e19720b8 	ldrh	r2, [r7, r8]
    a9d0:	e084400b 	add	r4, r4, fp
    a9d4:	e085500c 	add	r5, r5, ip
    a9d8:	e3a01004 	mov	r1, #4
    a9dc:	e0010c91 	mul	r1, r1, ip
    a9e0:	e081100b 	add	r1, r1, fp
    a9e4:	e1a02112 	lsl	r2, r2, r1
    a9e8:	e3a01902 	mov	r1, #32768	; 0x8000
    a9ec:	e0011002 	and	r1, r1, r2
    a9f0:	e3310000 	teq	r1, #0
    a9f4:	e52d6004 	push	{r6}		; (str r6, [sp, #-4]!)
    a9f8:	03a06000 	moveq	r6, #0
    a9fc:	0a000008 	beq	aa24 <blockHasNoData>

0000aa00 <blockHasData>:
    aa00:	e92d000f 	push	{r0, r1, r2, r3}
    aa04:	e320f000 	nop	{0}
    aa08:	e92d0030 	push	{r4, r5}
    aa0c:	ebffffda 	bl	a97c <tetrisGetRectForGridPosition>
    aa10:	e8bd000f 	pop	{r0, r1, r2, r3}
    aa14:	e320f000 	nop	{0}
    aa18:	e92d004f 	push	{r0, r1, r2, r3, r6}
    aa1c:	eb00009d 	bl	ac98 <drawRect>
    aa20:	e8bd000f 	pop	{r0, r1, r2, r3}

0000aa24 <blockHasNoData>:
    aa24:	e49d6004 	pop	{r6}		; (ldr r6, [sp], #4)
    aa28:	e8bd0070 	pop	{r4, r5, r6}
    aa2c:	e28cc001 	add	ip, ip, #1
    aa30:	e35c0004 	cmp	ip, #4
    aa34:	baffffe3 	blt	a9c8 <for_j_lessThan_4_loop>
    aa38:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    aa3c:	e28bb001 	add	fp, fp, #1
    aa40:	e35b0004 	cmp	fp, #4
    aa44:	baffffde 	blt	a9c4 <for_i_lessThan_4_loop>
    aa48:	e8bd1800 	pop	{fp, ip}
    aa4c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    aa50:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    aa54:	e1a0f00e 	mov	pc, lr

0000aa58 <tetrisCreateNewBlock>:
    aa58:	e59f0320 	ldr	r0, [pc, #800]	; ad80 <waitLoop+0x68>
    aa5c:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}

0000aa60 <initializeTetrisBlock>:
    aa60:	e3a04000 	mov	r4, #0
    aa64:	e3a05000 	mov	r5, #0
    aa68:	e59f6314 	ldr	r6, [pc, #788]	; ad84 <waitLoop+0x6c>
    aa6c:	e59f7314 	ldr	r7, [pc, #788]	; ad88 <waitLoop+0x70>
    aa70:	e3a08000 	mov	r8, #0

0000aa74 <initializeTetrisBlockEnd>:
    aa74:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aa78:	e1a0f00e 	mov	pc, lr

0000aa7c <tetrisBlockContainsPoint>:
    aa7c:	e1a0300d 	mov	r3, sp
    aa80:	e3a02001 	mov	r2, #1
    aa84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aa88:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aa8c:	e89301f0 	ldm	r3, {r4, r5, r6, r7, r8}
    aa90:	e1500004 	cmp	r0, r4
    aa94:	b3a02000 	movlt	r2, #0
    aa98:	ba00000c 	blt	aad0 <tetrisBlockDoesNotContainPoint>
    aa9c:	e2844004 	add	r4, r4, #4
    aaa0:	e1500004 	cmp	r0, r4
    aaa4:	a3a02000 	movge	r2, #0
    aaa8:	aa000008 	bge	aad0 <tetrisBlockDoesNotContainPoint>
    aaac:	e1510005 	cmp	r1, r5
    aab0:	b3a02000 	movlt	r2, #0
    aab4:	ba000005 	blt	aad0 <tetrisBlockDoesNotContainPoint>
    aab8:	e2855004 	add	r5, r5, #4
    aabc:	e1510005 	cmp	r1, r5
    aac0:	a3a02000 	movge	r2, #0
    aac4:	aa000001 	bge	aad0 <tetrisBlockDoesNotContainPoint>

0000aac8 <tetrisBlockDoesContainPoint>:
    aac8:	e320f000 	nop	{0}
    aacc:	e3a00001 	mov	r0, #1

0000aad0 <tetrisBlockDoesNotContainPoint>:
    aad0:	e3a00000 	mov	r0, #0

0000aad4 <tetrisBlockContainsPointEnd>:
    aad4:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    aad8:	e1a00002 	mov	r0, r2
    aadc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    aae0:	e1a0f00e 	mov	pc, lr

0000aae4 <tetrisBlockBitForGridPoint>:
    aae4:	e1a0f00e 	mov	pc, lr

0000aae8 <tetrisCheckBlockGridCollisions>:
    aae8:	e1a0000d 	mov	r0, sp
    aaec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aaf0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aaf4:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    aaf8:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aafc:	ebffff41 	bl	a808 <tetrisGetGridBitmaskForBlock>
    ab00:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ab04:	e320f000 	nop	{0}
    ab08:	e19730b8 	ldrh	r3, [r7, r8]
    ab0c:	e0010003 	and	r0, r1, r3
    ab10:	e3500000 	cmp	r0, #0
    ab14:	13a00001 	movne	r0, #1
    ab18:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ab1c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ab20:	e1a0f00e 	mov	pc, lr

0000ab24 <tetrisOnBlockCollision>:
    ab24:	e28dd014 	add	sp, sp, #20
    ab28:	e1a0c00e 	mov	ip, lr
    ab2c:	ebffffc9 	bl	aa58 <tetrisCreateNewBlock>
    ab30:	e1a0e00c 	mov	lr, ip
    ab34:	e1a0f00e 	mov	pc, lr

0000ab38 <tetrisRotateBlock>:
    ab38:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ab3c:	e3300000 	teq	r0, #0
    ab40:	0a000000 	beq	ab48 <rotateLeft>
    ab44:	1a000003 	bne	ab58 <rotateRight>

0000ab48 <rotateLeft>:
    ab48:	e2888002 	add	r8, r8, #2
    ab4c:	e3580006 	cmp	r8, #6
    ab50:	c3a08000 	movgt	r8, #0
    ab54:	ea000003 	b	ab68 <tetrisRotateBlockEnd>

0000ab58 <rotateRight>:
    ab58:	e2488002 	sub	r8, r8, #2
    ab5c:	e3580000 	cmp	r8, #0
    ab60:	b3a08006 	movlt	r8, #6
    ab64:	eaffffff 	b	ab68 <tetrisRotateBlockEnd>

0000ab68 <tetrisRotateBlockEnd>:
    ab68:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ab6c:	e1a0f00e 	mov	pc, lr

0000ab70 <tetrisTranslateBlock>:
    ab70:	e1a0b00e 	mov	fp, lr
    ab74:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ab78:	e0844000 	add	r4, r4, r0
    ab7c:	e0855001 	add	r5, r5, r1
    ab80:	e3550013 	cmp	r5, #19
    ab84:	a3a05000 	movge	r5, #0
    ab88:	e92d01f0 	push	{r4, r5, r6, r7, r8}

0000ab8c <tetrisTranslateBlockEnd>:
    ab8c:	e1a0f00b 	mov	pc, fp

0000ab90 <tetrisGetMaxBlockPosition>:
    ab90:	e89d01f0 	ldm	sp, {r4, r5, r6, r7, r8}
    ab94:	e92d1800 	push	{fp, ip}
    ab98:	e3a0b001 	mov	fp, #1
    ab9c:	e3a0c001 	mov	ip, #1
    aba0:	e1a00004 	mov	r0, r4
    aba4:	e1a01005 	mov	r1, r5

0000aba8 <for_i_lessThanEqual_4_loop>:
    aba8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)

0000abac <for_j_lessThanEqual_4_loop>:
    abac:	e92d0070 	push	{r4, r5, r6}
    abb0:	e19730b8 	ldrh	r3, [r7, r8]
    abb4:	e92d1800 	push	{fp, ip}
    abb8:	e084400b 	add	r4, r4, fp
    abbc:	e085500c 	add	r5, r5, ip
    abc0:	e24bb001 	sub	fp, fp, #1
    abc4:	e24cc001 	sub	ip, ip, #1
    abc8:	e3a02004 	mov	r2, #4
    abcc:	e0020c92 	mul	r2, r2, ip
    abd0:	e082200b 	add	r2, r2, fp
    abd4:	e1a03213 	lsl	r3, r3, r2
    abd8:	e3a02902 	mov	r2, #32768	; 0x8000
    abdc:	e0022003 	and	r2, r2, r3
    abe0:	e3320000 	teq	r2, #0
    abe4:	0a000003 	beq	abf8 <for_j_lessThanEqual_4_loopEnd>
    abe8:	e1500004 	cmp	r0, r4
    abec:	b1a00004 	movlt	r0, r4
    abf0:	e1510005 	cmp	r1, r5
    abf4:	b1a01005 	movlt	r1, r5

0000abf8 <for_j_lessThanEqual_4_loopEnd>:
    abf8:	e8bd1800 	pop	{fp, ip}
    abfc:	e8bd0070 	pop	{r4, r5, r6}
    ac00:	e28cc001 	add	ip, ip, #1
    ac04:	e35c0004 	cmp	ip, #4
    ac08:	daffffe7 	ble	abac <for_j_lessThanEqual_4_loop>
    ac0c:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
    ac10:	e28bb001 	add	fp, fp, #1
    ac14:	e35b0004 	cmp	fp, #4
    ac18:	daffffe2 	ble	aba8 <for_i_lessThanEqual_4_loop>
    ac1c:	e8bd1800 	pop	{fp, ip}

0000ac20 <tetrisGetMaxBlockPositionEnd>:
    ac20:	e1a0f00e 	mov	pc, lr

0000ac24 <tetrisCheckBlockCollision>:
    ac24:	e89d01f0 	ldm	sp, {r4, r5, r6, r7, r8}
    ac28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ac2c:	e355000b 	cmp	r5, #11
    ac30:	a3a05000 	movge	r5, #0
    ac34:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ac38:	e1a0f00e 	mov	pc, lr

0000ac3c <clearScreen>:
    ac3c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ac40:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ac44:	e3a04000 	mov	r4, #0
    ac48:	e3a05000 	mov	r5, #0
    ac4c:	e59f00ec 	ldr	r0, [pc, #236]	; ad40 <waitLoop+0x28>
    ac50:	e5906014 	ldr	r6, [r0, #20]
    ac54:	e5907018 	ldr	r7, [r0, #24]
    ac58:	e3a08000 	mov	r8, #0
    ac5c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    ac60:	eb00000c 	bl	ac98 <drawRect>
    ac64:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ac68:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ac6c:	e1a0f00e 	mov	pc, lr

0000ac70 <drawPixel>:
    ac70:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ac74:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    ac78:	e0804501 	add	r4, r0, r1, lsl #10
    ac7c:	e1a04084 	lsl	r4, r4, #1
    ac80:	e59f0104 	ldr	r0, [pc, #260]	; ad8c <waitLoop+0x74>
    ac84:	e5900000 	ldr	r0, [r0]
    ac88:	e18020b4 	strh	r2, [r0, r4]
    ac8c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    ac90:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ac94:	e1a0f00e 	mov	pc, lr

0000ac98 <drawRect>:
    ac98:	e1a0000d 	mov	r0, sp
    ac9c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aca0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    aca4:	e89001f0 	ldm	r0, {r4, r5, r6, r7, r8}
    aca8:	e0866004 	add	r6, r6, r4
    acac:	e0877005 	add	r7, r7, r5

0000acb0 <drawRectForLoopX>:
    acb0:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)

0000acb4 <drawRectForLoopY>:
    acb4:	e1a00004 	mov	r0, r4
    acb8:	e1a01005 	mov	r1, r5
    acbc:	e1a02008 	mov	r2, r8
    acc0:	ebffffea 	bl	ac70 <drawPixel>
    acc4:	e2855001 	add	r5, r5, #1
    acc8:	e1550007 	cmp	r5, r7
    accc:	bafffff8 	blt	acb4 <drawRectForLoopY>
    acd0:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    acd4:	e2844001 	add	r4, r4, #1
    acd8:	e1540006 	cmp	r4, r6
    acdc:	bafffff3 	blt	acb0 <drawRectForLoopX>
    ace0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    ace4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ace8:	e28dd014 	add	sp, sp, #20
    acec:	e1a0f00e 	mov	pc, lr

0000acf0 <arrayOffsetWithPosition>:
    acf0:	e8bd000f 	pop	{r0, r1, r2, r3}
    acf4:	e0020192 	mul	r2, r2, r1
    acf8:	e0822000 	add	r2, r2, r0
    acfc:	e0020293 	mul	r2, r3, r2
    ad00:	e92d0004 	stmfd	sp!, {r2}
    ad04:	e1a0f00e 	mov	pc, lr

0000ad08 <startTimer>:
    ad08:	e1a03000 	mov	r3, r0
    ad0c:	e59f007c 	ldr	r0, [pc, #124]	; ad90 <waitLoop+0x78>
    ad10:	e5901000 	ldr	r1, [r0]
    ad14:	e0811003 	add	r1, r1, r3

0000ad18 <waitLoop>:
    ad18:	e5902000 	ldr	r2, [r0]
    ad1c:	e1510002 	cmp	r1, r2
    ad20:	8afffffc 	bhi	ad18 <waitLoop>
    ad24:	e1a0f00e 	mov	pc, lr
    ad28:	00654321 	.word	0x00654321
    ad2c:	00777721 	.word	0x00777721
    ad30:	00fff721 	.word	0x00fff721
    ad34:	0000ffff 	.word	0x0000ffff
    ad38:	00000101 	.word	0x00000101
    ad3c:	00000243 	.word	0x00000243
    ad40:	00009080 	.word	0x00009080
    ad44:	0000967f 	.word	0x0000967f
    ad48:	0000297e 	.word	0x0000297e
    ad4c:	00009f90 	.word	0x00009f90
    ad50:	00000172 	.word	0x00000172
    ad54:	000001b5 	.word	0x000001b5
    ad58:	00009fe0 	.word	0x00009fe0
    ad5c:	000001e7 	.word	0x000001e7
    ad60:	00000247 	.word	0x00000247
    ad64:	00000285 	.word	0x00000285
    ad68:	00009ff0 	.word	0x00009ff0
    ad6c:	000001eb 	.word	0x000001eb
    ad70:	00000d7f 	.word	0x00000d7f
    ad74:	00009790 	.word	0x00009790
    ad78:	000090f0 	.word	0x000090f0
    ad7c:	0000973c 	.word	0x0000973c
    ad80:	0000973c 	.word	0x0000973c
    ad84:	001133ff 	.word	0x001133ff
    ad88:	00009760 	.word	0x00009760
    ad8c:	000090e0 	.word	0x000090e0
    ad90:	3f003004 	.word	0x3f003004
